{"hash":"aa994b424d74fa8474be1b102b32704061508c3c","data":{"markdownPage":{"id":"02c7486576dd93a9ef7c84a4fbdbb6ff","title":"Python template ","description":"","path":"/templates-language/python-template/","timeToRead":18,"content":"<h1 id=\"python-template\"><a href=\"#python-template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python template</h1>\n<h2 id=\"python-ddd-tutorial\"><a href=\"#python-ddd-tutorial\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python DDD Tutorial</h2>\n<h3 id=\"model\"><a href=\"#model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Model</h3>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1177' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-453caa40253e6bda86aa54c211e5b2f1'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-453caa40253e6bda86aa54c211e5b2f1)' width='2560' height='1177' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAABYlAAAWJQFJUiTwAAAIiElEQVRYw91Ya2xUxxW2%2bqN/KiXqz7T9kT6lqupDqgQKlGIeiUpxwGkgpChBhEgkUpGSNoqatFGCMcbYgB%2bEEHAKmAJ2AiEQBwgB2wRHwcb1C5v1k/Xa%2b37eu3fve19fz8zuOmsHHBu2rZsrfZr7ODN35ptzvjMzeQ%2bWufCT3S78dI8TD5QF8eiuT/BicTWe3NGOTSVX8cNdHjxY5sT3ye7/FT8od%2bK7Oz1YUT2IzUet%2bM6OEH5Z7cavqj3I%2b9brDnyvNEXCN9/w4ddFLdi2Ywv%2bsqsYC1/5FPcXuXHfGw7ct3Vu4P6tzhSKXDOu8%2b2t4/jGax48VdmG%2buYD%2bNHei/gxTezPKt3Iq2hyo7LZjV2XHKi6PI6SRgFvX7Wh5rMBbG8KYnejG3vmEMovOVF20Y4dF8ZS75o8dwb/7sWeZj/Bh/LGAA629uFYRwt982IXfc%2bLqhJCIQmBgACnOwDEVMBUgGQcgE4w5wgMQhSC24aQaxRJTQQSWup9Ur8NaBzsCnwG%2bK8Cmp3b9o7JsNh1mLrG280bD%2bg436ugcUDDe10mxnwyIhEJYjgCVTcI5hyBAY1KISxxKJqBiKIiIqupcgokWYGsmdAkH1QGRYZumHAJKrwi2agGbzMvFmUMEsMJA8mYAdM0YRipMnM/lxCNRjmy%2b3hnUJ1onMM0U3XiUZMjM7Y8diNFFKiazhkyjHTF9A%2bnEvK/wNS%2bzBxUn9Wbpn4eY9PldEAKixPMZmMuEPCfRJ6pk1i0voq4txNGjGTB0O844LubBeOOpOa6vbsiQCM1PNXYgRGXgEQ8OqnR6UjIxCKLrWywd7FYDFFmMxXc/ssaY2Z9ywZ7F4/HeXssLLPxxf/vzUPzVFLKistRDLl0ynxGWgem9wBd1yl1hhAKBiEIIQihIIdI936/D16vG8GQgKAgUinyktkHAgEoijJp1tkgZFnm3wRBQIjaYLbs3u/3w24fg9vjQUhSIXBoCIkRsglyO9aXe/IAncSv58N%2bBMdDiCWm94DsDkciESSTgGrEoRgJDhZCPr8Iq83FMwpMiVJ3hBKMRN4V46IkiuKXCAiHw9A0DYlEgjyFPCgaI/sEwjTQwREHXGNWmM7rMFwdVLYhEbbxFB8m3WKEzjwr3IYAgzRAslZDlyygf3%2blBrCfRSIyNFUGjR1/P6vg2SMBbDrkx2tnRBhSPw3ainBLEay1hRg8ug6%2bU%2buRkMbBllZhUeAuzVw7A4nyepwWXkpQxecnrqPp6BU0H/kco609VMMOaegDDL25AL17F6Fv9y/guVzECYhI4dwQYLbXwvCO0gwmJqWMryJAoxl/usaH/JJR5NN%2bYuMBC7o/WomhS8sxVrcUbaXz0VXxEHqrFkD3DXAP4aFCXmC32%2bFwUPaRaGFD4WKSx9gHHXi3%2bH28u/09Ki%2bguWYnes8vQHf9MrTvXoSuvUtxs2oebB9vyyEBqg5x3w0oQ0GYSXJTfXYEbHjHj/ziISLBjg37%2b9F9bjVuNa9A5BwR8eYi2P%2bRD%2bHYUpj%2bfqhmAsGAf4KA8fFxHuvBQBCaoeFWnxXHt9ajbns9jhc14Ny%2bUvR9vBjuS6vgObwEXbvnw/HWz2G2laYJyEEIqJQFqoZPoz88Rq6bIBGcOQE6EfDXs1E8cyKOZ%2bqAl05YYG0uRKhjNcQLq9D79ip07i/AraNrqLeTQ4DFO0N2CMg%2bBS2Hr%2bHasTYqO9F9qhLWK8toKV8A77n16D39Onrq/4xQ34ecACkXHqCRCH5Q2wL7kJc6MTMPYCLIwK6UCCahsMxw82UMXnwY/RceRqBjE1TRAb%2bP1uGyxG1Z3WwRZAqeEUH2nEwkoSu0IqV9iiEMwXttHfrO/w69Db%2bF31LCNUejOIrGkykPICG%2bZwJ0CoHuMgsCA5QFktFZE0CbiHSpI35rC4T2AgSvF0AdeC69i/vimkpApj2mA%2bw%2bdSXTxsPQ%2bx5D6F9/QLD1ESjWsol2kskcEsAqyrEkzWRq3WyY5qwIkDRKVzRjomIg1P8qzJuFiFoeQ3RgM%2b1IncRBhKaTtq5JSnGU3qbzANJgBOUYBGrPHxiFcGMjYv1rEbcUAI6yFDl8CxzLHQEmiY9sOwBNmH0aVMj%2bxZMyzwTrDwp4pa4TWu8a6JbHEWgowGjtGgzXroWr/gnERRv3FZa7Wdxna0BYivC9/mAAWFcTxlMHXFj9loyDDWeB4RXwfLoKA4d/j54jG2A59DjGmyvTBEi5SYOqsw4aiZRhzjwN6kSATB6%2bbp8dS0tGsHiHA88e7IN%2b80noNGv9tcvQUf4QeqoW4nr5PPitneRlMfi8Hr7qs9lsGB0d5R7h9fpgahKaupxYXDyMFTsHsaDYi/K608CtlXA2FaKP1gBdFQv4OmDkzMs5JMBgBwMkPno0vQ02Z0XAE/tcyN8%2bgkUlTmzczzygEIblUUQalmOgeiHG3llMaXAJNHcfJAoTj9vFl7BsDcBSIUuDbo8XhiKiuceL32y34ZEyK%2bYVB1F67CQwtBx6eyG8tUtwo5rE8NB8xNtLc7cOyBwcZAafujdnFgJEwN8%2biuFPJ2N4nvq6rcEFfegFmNYXIF95Dr01a9CxfzVG/vlHQHbwEJCmhACDxEKABNgaAraciuOlMzFspvaONzYC1qehdT8P%2b4m1aK1eifaKfARaKnKXBqfbpk4nguzH7KIl%2bwQSyUxWYIhzLxEFWmAZWsqWBn4nEWTvJl%2bsQRLahMLP90wlhLDfAcE7TqkyzC0y/ciBB8z8ZCZDQGYnpmkq5W2NQ%2bPQJ8A9iux1fp6nc9VmBGQfvGQIYGDtqaqaAm/L4FBZyUKTHWsRNN2Y2JEy23vaDc6WgEzJcneq49LEAG4PkZcZe0bSVE9j76avn4aYRvobI/SeD0Tu5nwu%2b0BktpjuQCQX7f3XPOBrcyT2dT3snCn%2bDadMot/kA4BFAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"2560\" alt=\"model\" data-srcset=\"/assets/static/model.82a2fbd.cab783dc59d62b32f567201f4f48855a.png 480w, /assets/static/model.cbab2cf.cab783dc59d62b32f567201f4f48855a.png 1024w, /assets/static/model.2665e34.cab783dc59d62b32f567201f4f48855a.png 1920w, /assets/static/model.42db587.cab783dc59d62b32f567201f4f48855a.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/model.42db587.cab783dc59d62b32f567201f4f48855a.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/model.42db587.cab783dc59d62b32f567201f4f48855a.png\" width=\"2560\" alt=\"model\"></noscript></p>\n<p>There are two Order and Delivery Services in the Model.</p>\n<h4> Order </h4>\n<ul>\n<li>There are two events of Order: OrderPlaced and OrderCancelled. OrderPlaced set trigger with PostPersist, and OrderCancelled set trigger with PreRemove.</li>\n<li>OrderPlaced, that is, an ordered event, communicates with the Delivery Service by issuing an event to the kafka channel through Pub/Sub communication.</li>\n<li>OrderCancelled, that is, order canceled event is communicated with Delivery Service through REST API through Res/Req communication. OrderCancelled logic is executed only after DeliveryCancelled logic in Delivery Service precedes.</li>\n</ul>\n<h4> Delivery </h4>\n<ul>\n<li>The two events of Delivery are DeliveryStarted and DeliveryCancelled. DeliveryStarted sets a trigger with PostPersist, and DeliveryCanclled sets a trigger with PreRemove.</li>\n</ul>\n<h3 id=\"code\"><a href=\"#code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code</h3>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1340' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-c4127cfa7e4b6e243f00fab31f12c17f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-c4127cfa7e4b6e243f00fab31f12c17f)' width='2560' height='1340' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAiCAYAAADvVd%2bPAAAACXBIWXMAABYlAAAWJQFJUiTwAAAJ9ElEQVRo3tVZa0yUVxrml7smTVwVXeQy9xlmBma4DHjZ7K/9szH%2b2YKKpmpM2HVjtV6itd3YZFez2WR/VLMKVATU1Fpbbb0Nl%2bGqhbmBSFtFwc260YICIncFhtuz73tmBodxhqtr6glPzvnOd75vvvc57%2b28hEj2FEGxtxBLdpVi5e6T2Lp9B36/60ukbM%2bAYncBlu0qQsRbjshdhQjdacHvDlxEyqErCN1RDs3%2bImg/tCAkdEcRpHstmLetBNI/n8X7O9Ow7v1tMG09infSzZiffu0thlngnT%2bZEZJegtQDefh79scI25eJqD0lUO0vRsjez4rwQUYh9mbmY2dWGT48cQ1/zbuIfacrcSCnHB/llAkcOFkq4B6/hPf%2bbPFxbrnAX/Iq8FFu%2bZzf98r76b37skuxi2T8IKsUn5w5j0Of52JPVjF2ZxUhpOpGBazfXUexxYK6aiu%2bKytG88OHmNjGELyNzQGjwHA/MNJPf910PfQa3un3fmqtD27DYfkKd2/Zce5qJS4V2mG3WXG71o6Qo%2berkPG1Ff84a8c3hZXIz8/HnbsN6Hv%2bAj/evoN7DY34z4P/oqHxPuppvqu7F4%2bamvHw0U940tKK4dExjNBvzQj0DH/aoGsYdd//gLv0Gz29fRhwDdE9iHfOFfye/gGXIKCh4T7yzWbYbHaYS6tQcoM22mqH1eZAiNPphMPhgMNuFwsKCi24S4Jy6%2b3txYsXLzA0NIT%2b/n6BkZERDA4Ojl%2bPjY29Am/jtcPDw6IPBL7n/Q0eu1wu8e7XhYGBAfEd94gAc36RkK/G6UA1gWW2k8whVZWVsFqtYsJms6GgoAh36u8FV/ixieYwOjoaFD%2bXxhtqNhcIAlhoX4QUl93A9RuVcHoIyCcC6j0EPH36FM3NzWKXeMf8iQgG3lFuV65cwZFPP0Vm1mfIys5BTk4OTp06hby8PDHOzc0dx4mTOcjMzkP2yZO0Jm98ntdmZGTg%2bPHjk%2bLYsWPIzsnDmS/Oi/7I0X/h0uXLbgLuNeKaDwHe3ec%2b5NaZP6K66DTs1XW0wDqBABb8yZMn6OzsHFdl3ll/Vfcnhp/jlpKSivm//AWWhkchXKlHTEwM4uPiEBMbC4kmFjK1DrE01uv1kCmUUGh0kCsUYk6lUiE6OhpqtRpyuRyRkZFQKpWQyWRYtGgRFi5cOA6%2bXrBgASRSGb3bgNAlSzBv3jysXr3abQJMwLUgBJw4kQlzgQU11dVkCm4TqPcxgWfPnpHDeyT61tZWoRE8dpMQWBP6%2bvrEs5s3b8GyZcugVGmg1LiFjSUSNFo9FFoDorVaGAwG6IgAqUQCmVQiBJTQWCqVip7Bc1OB1%2bn0sVix8jdQEolLly7FunXrpiZge2Ytvsh34lYNeUXyjP4EPO/rRRdpQHdXJzpY8NGRKW3uuYeATZs2iQ%2bRK2kXo2lX1dHQaDTiY6OiogQkkqhxQaMIvNPea1%2b410qCgp/T6nRYsXw5FKQxixcvRmpq6tQEnDvyLUqvlsFZ44TNRwM4XA0MjaG9sxctTzvR1tGD1vYu9A1QRBgaRb9r1N37g%2bY7u90m8B4TQOrIqq02JGM5fRzDZEpETFwi5PoExBjjkZxkEvNsIqzyvPsvCZJMToin52t%2bjsEawQSkpKRMTUDZhcOoKr8Ih/Om8AHeKPDs%2bRiau0fww/0m1DQ0o75tDPefDqOlZwTNnUNo6nChqdPl7r2g60fPqG/rdhPwnocAtRbqmAQkJpqQlJREBCQhOTkJsUSC2pAEvSFezDEMZCZs815hprP7UT4kMGZEgPPb/bCXfQ27s3acANYADmK0oXjS1o6fmlvwtKObNKED7dT3Ph%2bAa3gMg7TAHwOELo8GsAmEhf0aMmECBmHvRoO7d4N8gjFO2K5aHwdtLDlI8gd8j/2FjlR6OgT4r5kRAY4DF2D/qgz22okm4G0dHR3k/FrQR569p6db%2bAOXa3DSFLnPxweEh4cjmuxep40Wnp2FYu/OYCHVNBdF9ssCRHp6X0yXAF/MiIBD547iYulV3HTWUGr4KgGcCzRR6tvV1UXenzSgvV3MDQ0NB80HfAkICwuDgsKXkhygUqkSTpDBts7zUvrYyEnsfTYkzIiAv2Vl4BIlCTdragKGQc4B2traBAGM7u5uAc4L/DPDQASEUxjkGC/X6GE0GoUPYIenpJ2XUwTQKGRQyd2IEBoQ%2bYqw/1cNOL35S1hOl6C6LnAewCbAyRDHfiaDNYDHnLdPi4CICIrv5JnJscUY4ogAEznAZCQkJiKJokFCnBErlyfDlBAvEiRldAyFTdWMhZ41ARUVdlRZ%2bcI%2bfhbwJYCFf0jHYxaaMdm5ICAB5APYm6vVGhgpC4wjsCYkMgFEBM/FktNjz%2b9OgDipkb45AqpKTsB64xpd1AQkgDWgpaVFCNXT0yN63n2v8FNqgIcAdnqs/itWrMCqVasEEdybTCbhGI1xBkpktJ5EaHbOb3YEXN4OW8U5CoO3JoRBb2OVZy1gu2cNYDJ4PF0CItgE6IMUlJ6KMEi7zwJzROAowNdGg5FMIl4QMFvPP2sCrDYKfzb3hKgHBCDg8ePHExzfTE1AJpMKR8j5AIc9jYbyAjofKCgy8G77hr%2b5Cj9jAsTAczYOZALs%2bZkEVn8uMvieBP1PhcEJ4AOLXBCgjXNnfjHxydAaEsk5KiCVK1/J5t4oAfYgBLAwvPtNTU0iAniPuYFUfyoCpHTS4%2bOqUh/vcYZEQpyJzglayFTaOYe%2bORLgCEiAt6rDiY%2b3LsDgEtl0NcDtAzy5PfVqgwnxCQkwkUNMXvVbcYJT6IxkIiqRA4wL8nMigE3ANxliU/AWRqbSgAhPHiARwklFEUSr1bnPArExIiuUa42QkBlE0trxNHgO5vDaCPCWwVh4LoRwSOQxg4sj/tmgPwFbtmwRQqmi9VDHJiBapyfVN4oKkDciMAEGXfRL6HXjlZ/ZQuEpiKxdu3ZuBPhmgrzz7Ai9GWCwcphvSYwrMosW/gphEaT%2bKp0477Pw3HP8556FVanorKAgJ0m7x2PWlNDQ0FmDhZ8/fz7WrFkzdwLY5jn%2bs1BMgrfUHKgU7h17fcThw4fxh3ffxdrUVGxIW4/09HRs2LABW7duFdi2bZvo09I2YOPGjVi/fr24n5aWJtSXKzqzARPPwh88ePAlAeY5%2bIBgpfFAyVCwHOFNN/714ZHRgGXxaRMQrOw9mdCB/kESLHROhjkJ7/d4Y4NbA7zhfkoC7vg4wcn%2b8TEVRhgT/hs0OgOMzArDwnGPoq17EJY7nah80A/7rXqSq3CSTNDhkwoXWtDY%2bG%2b87a38/gvIP6mH6Z8PcLb4e5SXWMSpd0oNKC0tR2WlDXV1P8LhrKVFN2F/y1BdXYuS6w5kX6jA52YbissrUVZWLuQT8voQ8D%2bAYkF5iRPSugAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2560\" alt=\"code\" data-srcset=\"/assets/static/code.82a2fbd.0f3aba4f3f009e713dfd47e7c7e209f2.png 480w, /assets/static/code.cbab2cf.0f3aba4f3f009e713dfd47e7c7e209f2.png 1024w, /assets/static/code.2665e34.0f3aba4f3f009e713dfd47e7c7e209f2.png 1920w, /assets/static/code.42db587.0f3aba4f3f009e713dfd47e7c7e209f2.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/code.42db587.0f3aba4f3f009e713dfd47e7c7e209f2.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/code.42db587.0f3aba4f3f009e713dfd47e7c7e209f2.png\" width=\"2560\" alt=\"code\"></noscript></p>\n<p>If you click the code on the top right of the EventStorming screen and set the language to python, the code above is generated. If you want to download it, click Download Archive.</p>\n<h3 id=\"test\"><a href=\"#test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test</h3>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1992 1022' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9b7ac8ba8d36111a53629f5c55ed0664'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9b7ac8ba8d36111a53629f5c55ed0664)' width='1992' height='1022' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAhCAYAAABpwa0hAAAACXBIWXMAABYlAAAWJQFJUiTwAAAF1ElEQVRo3uWZaXMiOQyG6eaGcDZnmiOcuVM18///m0aP4Q09mUlt2CUpwn5QWZZlt3VYltW50Whkk8nEut2u5Uo5K7Sa1vnx0%2brbW%2bt0OnZ9fW1pmlqSJDYej63f71ur1bJcLncZsFqtggKm06lN51MbuJCJ99M9HaFph8Oh3d7e2nw%2bD7gUgYJQVLvdDnRalNnr9azZbNpgMAjKA2ec9RqNhknxzIXOOGtqHjTmshZ9WgzBfheLhd3c3ISWPTCHcda%2burqyfD7/cQVsNpuwMLBeb2zEh3uJTb3PBlh0NpuFdr1eBz42Co4QtCiBcdZi40GZDsyHxnw2yVi1WrVCoWCVSiXgpVLpta3VaoEeRVGgAcViMfCXy%2bUwhoDw1ev1oEitxTg01jnKA9gglgBW61UQhM0iABsG5AkSFsGwAIqgFZ9o8hrWQXjmgEPH4mwUT4GGQAiCABIMHvqMAdAkPJbm%2b3wHAIcXL2E%2ba8H/YQVIKDYsq%2bKyKAAcQIigIHe/dO8Zy%2bXy1cLyAMalMOaIj7W0cTaKVVEAgmJlviel4NLwIQzjGkNIhGOMb2hvALzMhZdxFPVhBXCOZDEUICtx1rPKQHDxonm5tebAK6XQZw5z8QodG3jYXNa1abFuHMcBx4V1LOhDB0cBHI2TB8FsDJAFEUKBD%2bvKAxQDGEcZtMxBMHjBERQeHQGUolsGnDWkDMYBlK0joe/rOyiR7zNfrn1SRWRjgI4AG1QM0BHYBclDEEQB78UAXZ3gCKcYAGDRfxIAz3hLYw5zT%2b4B2RiAMuT2CK0zhjBYQApA2PdigK43xQAUpeMC7/Pzc6BDY4y1oPNNzWUtxuQFjNMeFdyOiQH6cDYGsEHd9wgoFwaXZd%2bLAVIoQrG%2bcILY2SVCigG4PMLoDEoBCpAIsN1uf/MAWQ%2bBAR0heYDiAspC%2bE8JYqfIBBFMVnx4eAibxcoIqQwLS6IEoriiNRmXIjntWxo4NPCzTYXZoK4hWkVwBCb1xbKK5Fj1rIX5d3DoYDHcVtcigDcoQN7d3b0%2bhM7Snf%2brAvAGhOYocCx0Z5OIkMEBR%2bfa30kBHAHcXFGe%2bMDdjttzBWF9vcy4KS7EC34/AkpjUQDCowSE5wi8vLyEe/zp6ckeHx8vJR4cOgiE8AQ/WqXAHAG96pT0AH/L2L4dZNNLXlUIigKUBOHquD4CX9jZ38FRT8fLiv5/HoELFvI4BfyvQEVOpbvgnHuCH28CHjzkBdC4FeBTgZLUWI8iQG8GVW3ER5/5Z/kYIuDpMaSCiMpaygrBCYgkR8LhVUEEpcBL4qR6ohTD9YniUAzjvDW4Vc5GAbrrlf1JQNps3Q0%2brkDVB8ARWl6j/EHzVSVmnrJI1RlVPlf9T48veYluHlWLweGHB0WeNEYp4%2bOjKIANq1Yv95X1tXkJwni2CgR%2bf3//WsoiaWJ9bhr6KpPppckYXsE416/qDcpApUj6KrdxrE5aGVL5a0zpay/YYF/XY7P68SFLq9St2KCiJ3jbLRXK3vvytn6IYFU2LkVg2daeF8vGblGSKvYCr1Ju8hL44Tn2uj7qOdxNejYYja2PG8/mNiLb25fBNm75drtjS7dUwsPIN9WjPEXNHtclYfJ%2byzf5LW%2bByN1p0GrYqp/YsueWHo9skbrVq2XruBVSzvdwYCO3VtpLrMibgcIl%2bUIGwmMqcrpDKdqNF6MD5Pc0xsrRoYW/%2boaW/%2bo8oO8f3RZytsnv8KrTJt5vON4G4pxNvT/xdl6K7b4cW1qMrFOIQ3/mgBCD/A6GDkm8a5tO7zjecuizjtPmvtbI23TPtyrs8IW3s8JOkV%2bqgGrd3dndPF%2bp2lXTI26naw136YZ7QMVdvuVjdaeXqjWr8RurVre4WLIav62cXm80v28iRA0g/MKiekswo77v0Zkg1vMAJEYCVfTe%2byCDf0rt/jOB6Ksfn1w12f8BXH0EQt0URHuuLiIzNQGSKKIzN4EKKar3E%2bF1jamgeo5vjF9E9hfuFixqdAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1992\" alt=\"code\" data-srcset=\"/assets/static/run.82a2fbd.f20999154d30180861afed3fa4253d86.png 480w, /assets/static/run.cbab2cf.f20999154d30180861afed3fa4253d86.png 1024w, /assets/static/run.b3f6503.f20999154d30180861afed3fa4253d86.png 1992w\" data-sizes=\"(max-width: 1992px) 100vw, 1992px\" data-src=\"/assets/static/run.b3f6503.f20999154d30180861afed3fa4253d86.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/run.b3f6503.f20999154d30180861afed3fa4253d86.png\" width=\"1992\" alt=\"code\"></noscript></p>\n<h4> Running the application </h4>\n<p>The python code generated by MSAEZ must have a python version of at least 3.7.</p>\n<ol>\n<li>Go to the downloaded path and move to each service file.</li>\n<li>After checking whether app.py and requirements.txt exist in the current directory, enter the following command. (This command is a command to install the necessary libraries at once.)</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt</code></pre>\n<ol start=\"3\">\n<li>Enter the following command to run the application.</li>\n</ol>\n<ul>\n<li>OSX environment</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">python3 app.py</code></pre>\n<ul>\n<li>Windows environment</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">python app.py</code></pre>\n<h2 id=\"python-technology-stack\"><a href=\"#python-technology-stack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>python technology stack</h2>\n<ul>\n<li>Web Framework : Flask </li>\n<li>ORM : SqlAlchemy </li>\n<li>Kafka: Flask-kafka (for consumer), kafka (general) In Python, the flask-kafka API is used because the kafka consumer is created in a different thread for channel listening.</li>\n<li>DB : SQlite</li>\n<li>REST Api : requests</li>\n</ul>\n<h2 id=\"before-creating-the-template-code\"><a href=\"#before-creating-the-template-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Before creating the Template Code</h2>\n<p>Python Template is implemented based on Spring-boot template. The parts that are linguistically different from Java will be described in the detailed description. Functions that are implemented in Spring-boot but not provided in python are implemented separately.</p>\n<h2 id=\"python-template-file-structure\"><a href=\"#python-template-file-structure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python template file structure</h2>\n<p>A source code for Python template is generated like Spring boot based on model driven. The comparison between Spring-boot and Python is as follows.</p>\n<table>\n<thead>\n<tr>\n<th>role</th>\n<th>Spring boot</th>\n<th>Go</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Aggregate</td>\n<td>Entity.java</td>\n<td>Entity.py</td>\n</tr>\n<tr>\n<td>AbstractEvent</td>\n<td>AbstractEvent.java</td>\n<td>AbstractEvent.py</td>\n</tr>\n<tr>\n<td>Event</td>\n<td>Event.java</td>\n<td>Event.py</td>\n</tr>\n<tr>\n<td>PolicyHandler</td>\n<td>PolicyHandler.java</td>\n<td>PolicyHandler.py</td>\n</tr>\n<tr>\n<td>PolicyEvent</td>\n<td>PolicyEvent.java</td>\n<td>PolicyEvent.py</td>\n</tr>\n<tr>\n<td>ExternalEntity</td>\n<td>ExternalEntity.java</td>\n<td>ExternalEntity.py</td>\n</tr>\n<tr>\n<td>ExternalService</td>\n<td>ExternalService.java</td>\n<td>ExternalService.py</td>\n</tr>\n<tr>\n<td>Repository</td>\n<td>Repoistory.java</td>\n<td>Repository.py</td>\n</tr>\n<tr>\n<td>Controller</td>\n<td>Controller.java</td>\n<td>Controller.py</td>\n</tr>\n<tr>\n<td>Application</td>\n<td>Application.java</td>\n<td>app.go</td>\n</tr>\n<tr>\n<td>Kafka</td>\n<td></td>\n<td>KafkaProcessor.go</td>\n</tr>\n<tr>\n<td>DB</td>\n<td></td>\n<td>DB.py</td>\n</tr>\n<tr>\n<td>utility</td>\n<td></td>\n<td>Util.py</td>\n</tr>\n<tr>\n<td>hateoas</td>\n<td></td>\n<td>Hateoas.py</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"template-description-for-each-model\"><a href=\"#template-description-for-each-model\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Template description for each model</h2>\n<ul>\n<li>This section describes the codes that are model-driven and generated based on the models generated through eventstorming.</li>\n</ul>\n<h3 id=\"-entitypy\"><a href=\"#-entitypy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Entity.py</h3>\n<ul>\n<li>Create aggregate code</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\">forEach<span class=\"token punctuation\">:</span> Aggregate\nfileName<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>boundedContext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>ext<span class=\"token punctuation\">.</span>declarative <span class=\"token keyword\">import</span> declarative_base \n<span class=\"token keyword\">from</span> sqlalchemy <span class=\"token keyword\">import</span> Column<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> Float<span class=\"token punctuation\">,</span> Boolean\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">import</span> util\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#events}}</span>\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#relationCommandInfo}}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#commandValue}}</span>\n<span class=\"token keyword\">from</span> external<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>aggregate<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>aggregate<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">from</span> external<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>aggregate<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Service <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>commandValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>relationCommandInfo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>events<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\nBase <span class=\"token operator\">=</span> declarative_base<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    __tablename__ <span class=\"token operator\">=</span> <span class=\"token string\">'{{namePascalCase}}_table'</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#aggregateRoot.fieldDescriptors}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#isKey}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>isKey<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">^</span>isKey<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#typeCheckinEntity className}}{{/typeCheckinEntity}})</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>isKey<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>aggregateRoot<span class=\"token punctuation\">.</span>fieldDescriptors<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#aggregateRoot.fieldDescriptors}}</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>aggregateRoot<span class=\"token punctuation\">.</span>fieldDescriptors<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#lifeCycles}}</span>\n<span class=\"token decorator annotation punctuation\">@event<span class=\"token punctuation\">.</span>listens_for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'{{#triggerCheck trigger}}{{/triggerCheck}}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>trigger<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">,</span> connection<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#events}}</span>\n    event <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    event <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span>AutoBinding<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span>\n\n    event<span class=\"token punctuation\">.</span>Publish<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#relationCommandInfo}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#commandValue}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>aggregate<span class=\"token punctuation\">.</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>aggregate<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>aggregate<span class=\"token punctuation\">.</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>commandValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>relationCommandInfo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>events<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    \n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>lifeCycles<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token operator\">&lt;</span>function<span class=\"token operator\">></span>\n    window<span class=\"token punctuation\">.</span>$HandleBars<span class=\"token punctuation\">.</span>registerHelper<span class=\"token punctuation\">(</span><span class=\"token string\">'typeCheckinEntity'</span><span class=\"token punctuation\">,</span> function <span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"String(50)\"</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Integer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Integer\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Float\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Float\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Long\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Integer\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>ensWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Boolean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Boolean\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>ensWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Double\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Float\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    window<span class=\"token punctuation\">.</span>$HandleBars<span class=\"token punctuation\">.</span>registerHelper<span class=\"token punctuation\">(</span><span class=\"token string\">'triggerCheck'</span><span class=\"token punctuation\">,</span> function <span class=\"token punctuation\">(</span>trigger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trigger<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"PreRemove\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"before_delete\"</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trigger<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"PostRemove\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"after_delete\"</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trigger<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"PrePersist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"before_insert\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trigger<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"PostPersist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"after_insert\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trigger<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"PreUpdate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"before_update\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"after_update\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>function<span class=\"token operator\">></span></code></pre>\n<h4> HandlerBar function </h4>\n<ul>\n<li>typeCheckinEntity </li>\n</ul>\n<p>Converts a Java variable type to a variable type suitable for Python. In Python, the variable types of the entity class exist in a different form from the basic python variable type, but the type of the variable is the same. In Python, long and double do not exist, so they are replaced with int and float.</p>\n<ul>\n<li>triggerCheck </li>\n</ul>\n<p>After checking the trigger in the event, it is converted into a trigger suitable for python SqlAlchemy.</p>\n<table>\n<thead>\n<tr>\n<th>Java</th>\n<th>Python</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PostPersist</td>\n<td>after_insert</td>\n</tr>\n<tr>\n<td>PrePersist</td>\n<td>before_insert</td>\n</tr>\n<tr>\n<td>PostUpdate</td>\n<td>after_update</td>\n</tr>\n<tr>\n<td>PreUpdate</td>\n<td>before_update</td>\n</tr>\n<tr>\n<td>PostDelete</td>\n<td>after_delete</td>\n</tr>\n<tr>\n<td>PreDelete</td>\n<td>before_delete</td>\n</tr>\n</tbody>\n</table>\n<h4> Detail </h4>\n<ul>\n<li>Create one Entity.py per Aggregate.</li>\n<li>It specifies that the tablename in the entity class is the class mapped with the .db file.</li>\n<li>@event.listen_for() annotation continuously listens to the status of the db and plays the role of trigger.</li>\n</ul>\n<h3 id=\"-abstracteventpy\"><a href=\"#-abstracteventpy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· AbstractEvent.py</h3>\n<ul>\n<li>Creating AbstractEvent code that implements common variables and methods in Event class</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">import</span> KafkaProcessor\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractEvent</span><span class=\"token punctuation\">:</span>\n\teventType <span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n\ttimeStamp <span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>eventType <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__\n\t\tself<span class=\"token punctuation\">.</span>timeStamp <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">ToJson</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__dict__\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tmsg <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ToJson<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\tprocessor <span class=\"token operator\">=</span> KafkaProcessor<span class=\"token punctuation\">.</span>streamhandler\n\t\tprocessor<span class=\"token punctuation\">.</span>produce<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></code></pre>\n<h4> Detail </h4>\n<ul>\n<li>AbstractEvent has eventType with event type and timeStamp with event issue time.</li>\n<li>When the class is created, eventType is initialized with the name of the created class, and timeStamp is initialized with the created time.</li>\n<li>ToJson() is a function for serializing a function.</li>\n<li>Publish() is a function that publishes an event to a kafka channel.</li>\n</ul>\n<h3 id=\"-eventpy\"><a href=\"#-eventpy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Event.py</h3>\n<ul>\n<li>Create event code</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> Event\nfileName<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>boundedContext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">from</span> AbstractEvent <span class=\"token keyword\">import</span> AbstractEvent\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>AbstractEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#fieldDescriptors}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#typeCheck className}}{{/typeCheck}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>fieldDescriptors<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#fieldDescriptors}}</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>fieldDescriptors<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token operator\">&lt;</span>function<span class=\"token operator\">></span>\n    window<span class=\"token punctuation\">.</span>$HandleBars<span class=\"token punctuation\">.</span>registerHelper<span class=\"token punctuation\">(</span><span class=\"token string\">'typeCheck'</span><span class=\"token punctuation\">,</span> function <span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"str\"</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Integer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"int\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Float\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"float\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Long\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"int\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>ensWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Boolean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"bool\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>ensWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Double\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"int\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>function<span class=\"token operator\">></span></code></pre>\n<h4> HandlerBar function </h4>\n<ul>\n<li>typeCheck </li>\n</ul>\n<p>Converts a Java-based variable type to a python variable type. The handlebar function transforms it into a basic python variable type.</p>\n<h4> Detail </h4>\n<ul>\n<li>Inherit AbstractEvent</li>\n</ul>\n<h3 id=\"-policyhandlerpy\"><a href=\"#-policyhandlerpy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· PolicyHandler.py</h3>\n<ul>\n<li>Create PolicyHandler code</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> BoundedContext\nfileName<span class=\"token punctuation\">:</span> PolicyHandler<span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">import</span> util\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#aggregates}}</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>DB\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>repository <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>DB<span class=\"token punctuation\">.</span>repository\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>aggregates<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#policies}}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#relationEventInfo}}</span>\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>eventValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>eventValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> whenever<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>eventValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>_<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    event <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>eventValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    event <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span>AutoBinding<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#../../aggregates}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>repository<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>aggregates<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>relationEventInfo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>policies<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<h4> Detail </h4>\n<ul>\n<li>When the corresponding event is received from the kafka channel, the serialized message is converted into an event object through AutoBinding of uitl.</li>\n<li>Logic can be additionally implemented using the converted event object.</li>\n</ul>\n<h3 id=\"-policyeventpy\"><a href=\"#-policyeventpy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· PolicyEvent.py</h3>\n<ul>\n<li>Implementing event code used in PolicyHandler</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> RelationEventInfo\nfileName<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>eventValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>boundedContext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n\n<span class=\"token keyword\">from</span> AbstractEvent <span class=\"token keyword\">import</span> AbstractEvent\n<span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>eventValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>AbstractEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#eventValue.fieldDescriptors}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#typeCheck className}}{{/typeCheck}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>eventValue<span class=\"token punctuation\">.</span>fieldDescriptors<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#eventValue.fieldDescriptors}}</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>eventValue<span class=\"token punctuation\">.</span>fieldDescriptors<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token operator\">&lt;</span>function<span class=\"token operator\">></span>\n    window<span class=\"token punctuation\">.</span>$HandleBars<span class=\"token punctuation\">.</span>registerHelper<span class=\"token punctuation\">(</span><span class=\"token string\">'typeCheck'</span><span class=\"token punctuation\">,</span> function <span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"str\"</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Integer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"int\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Float\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"float\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Long\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"int\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>ensWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Boolean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"bool\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>ensWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Double\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"int\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>function<span class=\"token operator\">></span></code></pre>\n<h4> Detail </h4>\n<ul>\n<li>Create code for events of other aggregates that are connected to the policyHandler of the current aggregate.</li>\n<li>Same as Event.py code</li>\n</ul>\n<h3 id=\"-externalservicepy\"><a href=\"#-externalservicepy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· ExternalService.py</h3>\n<ul>\n<li>Create ExternalService code that implements logic to communicate with external service command and res/req method</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> RelationCommandInfo\nfileName<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>commandValue<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Service<span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>boundedContext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>external\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">from</span> external<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>commandValue<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>commandValue<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> json\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#MethodGet commandValue.restRepositoryInfo.method}}</span>\n<span class=\"token keyword\">def</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>commandValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\theaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">}</span>\n\tip <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:\"</span>\n\tport <span class=\"token operator\">=</span> <span class=\"token string\">\"### this should be changed ###\"</span>\n\ttarget <span class=\"token operator\">=</span> <span class=\"token string\">\"/{{commandValue.aggregate.namePlural}}/\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\taddress <span class=\"token operator\">=</span> ip<span class=\"token operator\">+</span>port<span class=\"token operator\">+</span>target\n\n\tresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n\tresponse <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>MethodGet<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#MethodPost commandValue.restRepositoryInfo.method}}</span>\n<span class=\"token keyword\">def</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>commandValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\theaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">}</span>\n\tip <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:\"</span>\n\tport <span class=\"token operator\">=</span> <span class=\"token string\">\"### this should be changed ###\"</span>\n\ttarget <span class=\"token operator\">=</span> <span class=\"token string\">\"/{{commandValue.aggregate.namePlural}}\"</span>\n\taddress <span class=\"token operator\">=</span> ip<span class=\"token operator\">+</span>port<span class=\"token operator\">+</span>target\n\tdata <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>__dict__\n\tresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n\tresponse <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token triple-quoted-string string\">'''\n    LOGIC GOES HERE\n    '''</span>\n\n\t<span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>MethodPost<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#MethodUpdate commandValue.restRepositoryInfo.method}}</span>\n<span class=\"token keyword\">def</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>commandValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\theaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">}</span>\n\tip <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:\"</span>\n\tport <span class=\"token operator\">=</span> <span class=\"token string\">\"### this should be changed ###\"</span>\n\ttarget <span class=\"token operator\">=</span> <span class=\"token string\">\"/{{commandValue.aggregate.namePlural}}/\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\tdata <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>__dict__\n\tresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n\tresponse <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>MethodUpdate<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#MethodDelete commandValue.restRepositoryInfo.method}}</span>\n<span class=\"token keyword\">def</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>commandValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\theaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">}</span>\n\tip <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:\"</span>\n\tport <span class=\"token operator\">=</span> <span class=\"token string\">\"### this should be changed ###\"</span>\n\ttarget <span class=\"token operator\">=</span> <span class=\"token string\">\"/{{commandValue.aggregate.namePlural}}/\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n\tresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n\t\n\t<span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>MethodDelete<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\t\n\n<span class=\"token operator\">&lt;</span>function<span class=\"token operator\">></span>\n\twindow<span class=\"token punctuation\">.</span>$HandleBars<span class=\"token punctuation\">.</span>registerHelper<span class=\"token punctuation\">(</span><span class=\"token string\">'MethodGet'</span><span class=\"token punctuation\">,</span> function<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        \t<span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>inverse<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\twindow<span class=\"token punctuation\">.</span>$HandleBars<span class=\"token punctuation\">.</span>registerHelper<span class=\"token punctuation\">(</span><span class=\"token string\">'MethodPost'</span><span class=\"token punctuation\">,</span> function<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        \t<span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>inverse<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\twindow<span class=\"token punctuation\">.</span>$HandleBars<span class=\"token punctuation\">.</span>registerHelper<span class=\"token punctuation\">(</span><span class=\"token string\">'MethodUpdate'</span><span class=\"token punctuation\">,</span> function<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">'PUT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        \t<span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>inverse<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\twindow<span class=\"token punctuation\">.</span>$HandleBars<span class=\"token punctuation\">.</span>registerHelper<span class=\"token punctuation\">(</span><span class=\"token string\">'MethodDelete'</span><span class=\"token punctuation\">,</span> function<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        \t<span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> options<span class=\"token punctuation\">.</span>inverse<span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>function<span class=\"token operator\">></span></code></pre>\n<h4> HandleBar Function </h4>\n<p>Implement a function such as switch/case that can distinguish methods because it is necessary to generate a code suitable for the method according to the method</p>\n<ul>\n<li>MethodGet </li>\n</ul>\n<p>return true for get method</p>\n<ul>\n<li>MethodPost</li>\n</ul>\n<p>return true for post method</p>\n<ul>\n<li>MethodUpdate </li>\n</ul>\n<p>In case of update method, return true</p>\n<ul>\n<li>MethodDelete</li>\n</ul>\n<p>In case of Delete method, return true</p>\n<h4> Detail </h4>\n<ul>\n<li>The requests library, which is a rest api, was used for the req/res communication method.</li>\n</ul>\n<h3 id=\"-externalentitypy\"><a href=\"#-externalentitypy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· ExternalEntity.py</h3>\n<ul>\n<li>Create entity code corresponding to aggregate of external service connected by res/req communication</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> RelationCommandInfo\nfileName<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>commandValue<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>boundedContext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>external\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#commandValue.aggregate}}</span>\n<span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#aggregateRoot.fieldDescriptors}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#typeCheck className}}{{/typeCheck}}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>aggregateRoot<span class=\"token punctuation\">.</span>fieldDescriptors<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#aggregateRoot.fieldDescriptors}}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>aggregateRoot<span class=\"token punctuation\">.</span>fieldDescriptors<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>commandValue<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>function<span class=\"token operator\">></span>\n    window<span class=\"token punctuation\">.</span>$HandleBars<span class=\"token punctuation\">.</span>registerHelper<span class=\"token punctuation\">(</span><span class=\"token string\">'typeCheck'</span><span class=\"token punctuation\">,</span> function <span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"str\"</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Integer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"int\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Float\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"float\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>endsWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Long\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"int\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>ensWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Boolean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"bool\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">.</span>ensWith<span class=\"token punctuation\">(</span><span class=\"token string\">\"Double\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"int\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>function<span class=\"token operator\">></span></code></pre>\n<h4> Detail </h4>\n<ul>\n<li>It is similar to the aggregate code, but there is no mapping with the db table. It is a simple object that only contains information from an external aggregate.</li>\n</ul>\n<h3 id=\"-repositorypy\"><a href=\"#-repositorypy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Repository.py</h3>\n<ul>\n<li>Implementing Repository code with DB and related data logic implemented</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> Aggregate\nfileName<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Repository<span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>boundedContext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Response<span class=\"token punctuation\">,</span> request\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>DB\n<span class=\"token keyword\">import</span> util\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\nrepository <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>DB<span class=\"token punctuation\">.</span>repository\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    entity <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    entity <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span>AutoBinding<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">)</span>\n    repository<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> entity\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    entity_list <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> entity_list\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Read_by_id</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    ele <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> ele\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    ele <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> ele\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ele <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> ele</code></pre>\n<h4> Detail </h4>\n<ul>\n<li>Basic CRUD related to DB is implemented.</li>\n<li>To maintain persistence, import the repository object created in DB code and execute DB logic.</li>\n<li>The result is returned from the repository to the controller. In this case, if an error occurs, 'error' is returned, and if it works normally, data corresponding to each function is returned.</li>\n</ul>\n<h3 id=\"-controllerpy\"><a href=\"#-controllerpy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Controller.py</h3>\n<ul>\n<li>Creating Controller code that implements basic CRUD of REST API</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> Aggregate\nfileName<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Controller<span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>boundedContext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> abort<span class=\"token punctuation\">,</span> jsonify<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> Blueprint<span class=\"token punctuation\">,</span> Response\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Repository \n<span class=\"token keyword\">import</span> Hateoas \n\nbp <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'{{nameCamelCase}}'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">'/{{namePlural}}'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@bp<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Repository<span class=\"token punctuation\">.</span>Create<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n    response <span class=\"token operator\">=</span> Hateoas<span class=\"token punctuation\">.</span>POST_response<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>base_url<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token decorator annotation punctuation\">@bp<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Repository<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    response <span class=\"token operator\">=</span> Hateoas<span class=\"token punctuation\">.</span>GET_list_response<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url_root<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>base_url<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token decorator annotation punctuation\">@bp<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&lt;int:id>\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Get_By_Id</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Repository<span class=\"token punctuation\">.</span>Read_by_id<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> response <span class=\"token operator\">!=</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> Hateoas<span class=\"token punctuation\">.</span>GET_id_response<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>base_url<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">404</span><span class=\"token punctuation\">,</span>mimetype<span class=\"token operator\">=</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token decorator annotation punctuation\">@bp<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&lt;int:id>\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"UPDATE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Repository<span class=\"token punctuation\">.</span>Update<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> response <span class=\"token operator\">!=</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> Hateoas<span class=\"token punctuation\">.</span>GET_id_response<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>base_url<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span>mimetype<span class=\"token operator\">=</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n\n    \n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token decorator annotation punctuation\">@bp<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&lt;int:id>\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Repository<span class=\"token punctuation\">.</span>Delete<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> response <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> mimetype<span class=\"token operator\">=</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span>mimetype<span class=\"token operator\">=</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> response\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#commands}}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#isRestRepository}}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>isRestRepository<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">^</span>isRestRepository<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token decorator annotation punctuation\">@bp<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{{controllerInfo.apiPath}}\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"{{controllerInfo.method}}\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>nameCamelCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># -> edit this part</span>\n    \n    <span class=\"token triple-quoted-string string\">'''\n    LOGIC GOES HERE\n    '''</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'hello world!'</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>isRestRepository<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>commands<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator annotation punctuation\">@bp<span class=\"token punctuation\">.</span>errorhandler</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">resource_not_found</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span>error<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span></code></pre>\n<h4> Detail </h4>\n<ul>\n<li>Create a controller per aggregate.</li>\n<li>In flask, you need to manage the route function in the file where the Flask() object exists, so I used the blueprint api in flask to manage it in other files as well.</li>\n<li>Because the controller determines the action for the request, it responds by calling the corresponding repository logic according to the request.</li>\n<li>It is the data returned through the repository. If it is a string type error, it responds with an error response, and if it is normal data, it responds with the hateoas method.</li>\n<li>When the command is not in RestRepository, the route and method are set with the received apiPath.</li>\n</ul>\n<h3 id=\"-apppy\"><a href=\"#-apppy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· app.py</h3>\n<ul>\n<li>Creating application code that can run the application</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> BoundedContext\nfileName<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">import</span> KafkaProcessor\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#aggregates}}</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Controller\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>aggregates<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\nsh <span class=\"token operator\">=</span> KafkaProcessor<span class=\"token punctuation\">.</span>streamhandler\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#aggregates}}</span>\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Controller<span class=\"token punctuation\">.</span>bp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>aggregates<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n\tsh<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tapp<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> port<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>portGenerated<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<h4> Detail </h4>\n<ul>\n<li>Since there can be multiple aggregates in one boundedContext, import all the controllers corresponding to the aggregate.</li>\n<li>The streamhandler created in kafkaprocessor is executed together when the application is executed. (At this time, a new thread is created for the kafka consumer.)</li>\n</ul>\n<h2 id=\"python-specific-templates\"><a href=\"#python-specific-templates\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python-specific templates</h2>\n<ul>\n<li>This section describes the code that is abstracted in Java and implemented in python format.</li>\n<li>Since there is no In-Memory DB in python, SQlite was used.</li>\n<li>Kafka API is used for Kafka producer and overall Kafka management, and flask-kafka API is used to listen to the flask thread and other threads.</li>\n</ul>\n<h3 id=\"-dbpy\"><a href=\"#-dbpy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· DB.py</h3>\n<ul>\n<li>Create Sqlite DB (H2 DB is used in the spring boot tutorial.)</li>\n<li>All logic related to DB is executed in this code</li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> Aggregate\nfileName<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>DB<span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>boundedContext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\n<span class=\"token keyword\">from</span> sqlalchemy <span class=\"token keyword\">import</span> create_engine\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> sessionmaker\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>DB<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>engine <span class=\"token operator\">=</span> create_engine<span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite:///{{namePascalCase}}_table.db'</span><span class=\"token punctuation\">,</span> echo<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> connect_args<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'check_same_thread'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>__table__<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>engine<span class=\"token punctuation\">,</span> checkfirst<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        DBsession <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>engine<span class=\"token punctuation\">)</span>\n        session <span class=\"token operator\">=</span> DBsession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        query <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> query\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        DBsession <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>engine<span class=\"token punctuation\">)</span>\n        session <span class=\"token operator\">=</span> DBsession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        session<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span>\n        session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">find_by_id</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        DBsession <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>engine<span class=\"token punctuation\">)</span>\n        session <span class=\"token operator\">=</span> DBsession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            query <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter_by<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n            \n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        DBsession <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>engine<span class=\"token punctuation\">)</span>\n        session <span class=\"token operator\">=</span> DBsession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            query <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token operator\">==</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            query_dict <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span>__dict__\n            <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> request<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> key <span class=\"token keyword\">in</span> query_dict<span class=\"token punctuation\">:</span>\n                    <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n                \n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> query\n            \n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        DBsession <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>engine<span class=\"token punctuation\">)</span>\n        session <span class=\"token operator\">=</span> DBsession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            query <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter_by<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            session<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error:'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\nrepository <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>DB<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h4> Detail </h4>\n<ul>\n<li>Create a .db file with create_engine() and bind it with the corresponding entity class.</li>\n<li>In the create_engine() argument, connect_args configures the db to be accessed by other threads as well. This enables logic to be executed when an event, the corresponding eventType, is received from kafka consumer.</li>\n<li>The function to save to db is save, and the entity class is entered as an argument.</li>\n<li>The function that reads all data from db is a list, and the function that brings id as a key is find_by_id.</li>\n<li>The function that updates a record in the db is update, and it is entered in the form of a dict as an argument.</li>\n<li>The function that deletes a record from the db enters an id as an argument to delete.</li>\n<li>To maintain persistence, the same context can be maintained in other files by initializing the db object in the db file.</li>\n</ul>\n<h3 id=\"-kafkaprocessorpy\"><a href=\"#-kafkaprocessorpy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· KafkaProcessor.py</h3>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> BoundedContext\nfileName<span class=\"token punctuation\">:</span> KafkaProcessor<span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">from</span> kafka <span class=\"token keyword\">import</span> KafkaProducer\n<span class=\"token keyword\">from</span> flask_kafka <span class=\"token keyword\">import</span> FlaskKafka\n<span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Event\n<span class=\"token keyword\">import</span> json\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#policies}}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#relationEventInfo}}</span>\n<span class=\"token keyword\">from</span> PolicyHandler <span class=\"token keyword\">import</span> whenever<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>eventValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>_<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>relationEventInfo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>policies<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tINTERRUPT_EVENT <span class=\"token operator\">=</span> Event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>destination <span class=\"token operator\">=</span> <span class=\"token string\">\"{{options.package}}\"</span>\n\t\tself<span class=\"token punctuation\">.</span>group_id <span class=\"token operator\">=</span> <span class=\"token string\">\"{{name}}\"</span>\n\t\tself<span class=\"token punctuation\">.</span>producer <span class=\"token operator\">=</span> KafkaProducer<span class=\"token punctuation\">(</span>acks<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> compression_type<span class=\"token operator\">=</span><span class=\"token string\">'gzip'</span><span class=\"token punctuation\">,</span> bootstrap_servers<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'localhost:9092'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value_serializer<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>consumer <span class=\"token operator\">=</span> FlaskKafka<span class=\"token punctuation\">(</span>INTERRUPT_EVENT<span class=\"token punctuation\">,</span>\n\t\t         bootstrap_servers<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t         group_id<span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>group_id\n\t\t         <span class=\"token punctuation\">)</span>\n\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span>msg<span class=\"token punctuation\">)</span>\n\nstreamhandler <span class=\"token operator\">=</span> StreamHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@streamhandler<span class=\"token punctuation\">.</span>consumer<span class=\"token punctuation\">.</span>handle</span><span class=\"token punctuation\">(</span>streamhandler<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    my_json <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>my_json<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#policies}}</span>\n    <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'eventType'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#relationEventInfo}}\"{{eventValue.namePascalCase}}\"{{/relationEventInfo}}:</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token comment\">#relationEventInfo}}</span>\n        whenever<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>eventValue<span class=\"token punctuation\">.</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>_<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>namePascalCase<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>relationEventInfo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>policies<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<h4> Detail </h4> \n<ul>\n<li>The overall config related to kafka is initialized in StreamHandler.</li>\n<li>@streamhandler.consumer.handle annotation executes the function below it in a new thread.</li>\n<li>In the consume() function, deserialize the message received through channel listening, classify the event type, and call the corresponding function.</li>\n</ul>\n<h3 id=\"-utilpy\"><a href=\"#-utilpy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· util.py</h3>\n<ul>\n<li>The autobinding function that exists in Java does not exist in Python. Code that implements this </li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">AutoBinding</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n\t\tsource_dict <span class=\"token operator\">=</span> source\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\tsource_dict <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>__dict__\n\t\n\ttarget_dict <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>__dict__\n\n\t<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> source_dict<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> key <span class=\"token keyword\">in</span> target_dict<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> target</code></pre>\n<h4> Detail </h4>\n<ul>\n<li>AutoBinding is a function that maps dict type or class to class.</li>\n<li>It is used when binding the request coming in the form of a dict to the entity class, binding the message coming through the kafka channel to the event class, and binding the entity class and the event class</li>\n</ul>\n<h3 id=\"-hateoaspy\"><a href=\"#-hateoaspy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Hateoas.py</h3>\n<ul>\n<li>Module to convert Response to Hateoas format </li>\n</ul>\n<pre class=\"language-py\"><code class=\"language-py\">forEach<span class=\"token punctuation\">:</span> BoundedContext\nfileName<span class=\"token punctuation\">:</span> Hateoas<span class=\"token punctuation\">.</span>py\npath<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> OrderedDict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">GET_id_response</span><span class=\"token punctuation\">(</span>base_url<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tresponse<span class=\"token operator\">=</span>OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tentity_name <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tresponse<span class=\"token punctuation\">[</span><span class=\"token string\">'_links'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tentity_name <span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span> \t\t\t\t\t\n\t\t\t<span class=\"token string\">'href'</span><span class=\"token punctuation\">:</span>base_url\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'self'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">'href'</span><span class=\"token punctuation\">:</span>base_url\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tentity_dict <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span>__dict__\n\t<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> entity_dict<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> key <span class=\"token operator\">!=</span> <span class=\"token string\">'_sa_instance_state'</span> <span class=\"token keyword\">and</span> key <span class=\"token operator\">!=</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span>\n\t\t\tresponse<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n\t<span class=\"token keyword\">return</span> response\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">POST_response</span><span class=\"token punctuation\">(</span>base_url<span class=\"token punctuation\">,</span> entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tresponse <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\turl <span class=\"token operator\">=</span> base_url <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\tentity_name <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tresponse<span class=\"token punctuation\">[</span><span class=\"token string\">'_links'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\tentity_name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">'href'</span><span class=\"token punctuation\">:</span> url\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'self'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">'href'</span><span class=\"token punctuation\">:</span> url\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tentity_dict <span class=\"token operator\">=</span> entity<span class=\"token punctuation\">.</span>__dict__\n\t<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> entity_dict<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> key <span class=\"token operator\">!=</span> <span class=\"token string\">'_sa_instance_state'</span> <span class=\"token keyword\">and</span> key <span class=\"token operator\">!=</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span>\n\t\t\tresponse<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n\t<span class=\"token keyword\">return</span> response\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">GET_list_response</span><span class=\"token punctuation\">(</span>url_root<span class=\"token punctuation\">,</span>base_url<span class=\"token punctuation\">,</span>entity_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttotalElements <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>entity_list<span class=\"token punctuation\">)</span>\n\tsize <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\tnumber <span class=\"token operator\">=</span> totalElements<span class=\"token operator\">//</span>size\n\tresponse <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tobj_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n\t<span class=\"token keyword\">for</span> ele <span class=\"token keyword\">in</span> entity_list<span class=\"token punctuation\">:</span>\n\t\tobj_dict <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tele_dict <span class=\"token operator\">=</span> ele<span class=\"token punctuation\">.</span>__dict__\n\t\tele_name <span class=\"token operator\">=</span> ele<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\turl <span class=\"token operator\">=</span> base_url <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\t\t\n\t\tobj_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'_list'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\tele_name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token string\">\"href\"</span><span class=\"token punctuation\">:</span>url\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"self\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token string\">\"href\"</span><span class=\"token punctuation\">:</span>url\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> ele_dict<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> key <span class=\"token operator\">!=</span> <span class=\"token string\">'_sa_instance_state'</span> <span class=\"token keyword\">and</span> key <span class=\"token operator\">!=</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span>\n\t\t\t\tobj_dict<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n\n\t\tobj_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>obj_dict<span class=\"token punctuation\">)</span>\n\n\ttarget <span class=\"token operator\">=</span> base_url<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\tresponse<span class=\"token punctuation\">[</span><span class=\"token string\">'_embedded'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj_list\n\tresponse<span class=\"token punctuation\">[</span><span class=\"token string\">'_links'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">'profile'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">'href'</span><span class=\"token punctuation\">:</span> url_root<span class=\"token operator\">+</span><span class=\"token string\">\"profile/\"</span><span class=\"token operator\">+</span>target\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'self'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">'href'</span><span class=\"token punctuation\">:</span> base_url<span class=\"token operator\">+</span><span class=\"token string\">\"{?page,size,sort}\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">'templated'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tresponse<span class=\"token punctuation\">[</span><span class=\"token string\">'page'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">'number'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'size'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'totalElements'</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>totalElements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'totalPages'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>number<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> response</code></pre>\n<h4> Detail </h4>\n<ul>\n<li>GGET_id_response is a function that creates a response format for the entity that has the id as the key. The entity class is entered as an argument. -POST_response is a function that creates a response format for the post method. As an argument, the entity class received by the post is entered.</li>\n<li>GET_list_response is a function that creates a response format when all records are fetched. As an argument, it is entered in the form of a list of entity classes.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Python template","anchor":"#python-template"},{"depth":2,"value":"Python DDD Tutorial","anchor":"#python-ddd-tutorial"},{"depth":3,"value":"Model","anchor":"#model"},{"depth":3,"value":"Code","anchor":"#code"},{"depth":3,"value":"Test","anchor":"#test"},{"depth":2,"value":"python technology stack","anchor":"#python-technology-stack"},{"depth":2,"value":"Before creating the Template Code","anchor":"#before-creating-the-template-code"},{"depth":2,"value":"Python template file structure","anchor":"#python-template-file-structure"},{"depth":2,"value":"Template description for each model","anchor":"#template-description-for-each-model"},{"depth":3,"value":"· Entity.py","anchor":"#-entitypy"},{"depth":3,"value":"· AbstractEvent.py","anchor":"#-abstracteventpy"},{"depth":3,"value":"· Event.py","anchor":"#-eventpy"},{"depth":3,"value":"· PolicyHandler.py","anchor":"#-policyhandlerpy"},{"depth":3,"value":"· PolicyEvent.py","anchor":"#-policyeventpy"},{"depth":3,"value":"· ExternalService.py","anchor":"#-externalservicepy"},{"depth":3,"value":"· ExternalEntity.py","anchor":"#-externalentitypy"},{"depth":3,"value":"· Repository.py","anchor":"#-repositorypy"},{"depth":3,"value":"· Controller.py","anchor":"#-controllerpy"},{"depth":3,"value":"· app.py","anchor":"#-apppy"},{"depth":2,"value":"Python-specific templates","anchor":"#python-specific-templates"},{"depth":3,"value":"· DB.py","anchor":"#-dbpy"},{"depth":3,"value":"· KafkaProcessor.py","anchor":"#-kafkaprocessorpy"},{"depth":3,"value":"· util.py","anchor":"#-utilpy"},{"depth":3,"value":"· Hateoas.py","anchor":"#-hateoaspy"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/tool/model-driven/","title":"Code Generation"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/info/partnership/","title":"Partner Program"}},{"node":{"path":"/info/pricing/","title":"Pricing"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/info/company/","title":"Cases"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"Creating Custom Templates in MSAEZ"}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"Loop & Conditional Statement"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}