{"hash":"6bae81c000e896c40580c1063fbf0495a192aa29","data":{"markdownPage":{"id":"593a8d42a2b3899271f9687b51bebc3f","title":"Persistent Volume","description":"","path":"/operation/ops-deploy-diagramming-advanced-pvc/","timeToRead":3,"content":"<h1 id=\"persistent-volume\"><a href=\"#persistent-volume\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Persistent Volume</h1>\n<p>Based on the provided 12th event storming model, utilize the deployment modeling tool provided by MSA-Ez to automatically generate the manifest YAML for Kubernetes objects. Apply these manifests to the cluster to set up storage.</p>\n<h2 id=\"event-storming-model-preparation\"><a href=\"#event-storming-model-preparation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event Storming Model Preparation</h2>\n<ul>\n<li>Load the model from the link in a new tab.\n<a href=\"https://www.msaez.io/#/storming/mallbasic-for-ops\" target=\"_blank\" rel=\"noopener noreferrer\">Model Link</a></li>\n<li>If the model doesn't load in the browser, click on the avatar icon (person-shaped) in the upper right, log in with your Github account, and reload.</li>\n<li>The 12th event storming model consisting of orders, delivery, and products should appear.</li>\n<li>The loaded model will not display the sticker list in the right palette. Click on the FORK icon in the top menu to clone the given model.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/1e16e849-7ae9-4b33-b39c-db4ef0939507\" alt=\"image\"></li>\n<li>The sticker list should now appear in the right palette.</li>\n</ul>\n<h2 id=\"deployment-modeling\"><a href=\"#deployment-modeling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deployment Modeling</h2>\n<ul>\n<li>Add Ingress topping to the forked model.</li>\n<li>Adding Ingress topping is as simple as going to 'Code' > 'Preview' > 'Toppings' in the menu and checking Ingress under Service Mesh.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/a55fc02b-2c67-492e-a233-10aee09d3cee\" alt=\"image\"></li>\n<li>With Ingress applied, click on 'DEPLOY' in the model's top menu.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/07d45fce-528a-4261-a1e3-c100e068c6b0\" alt=\"image\"></li>\n<li>The Kubernetes default deployment model, which includes Services and Deployments, will now show an added Ingress diagram at the top of the service stack.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/9a3ffc7d-4910-4b6f-b3a7-0178f15abb17\" alt=\"image\"></li>\n<li>Additionally, automatic path names for routing from the Ingress gateway to each individual service will be displayed.</li>\n<li>Use a Cloud IDE to generate and push images for each service. Then, set the created image names in the Deployment objects.</li>\n</ul>\n<h2 id=\"persistence-object-modeling\"><a href=\"#persistence-object-modeling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Persistence Object Modeling</h2>\n<ul>\n<li>In the modeling tool, select 'Persistence' > 'PersistentVolumeClaim' to create a PVC sticker.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/5d4b0cc8-7159-4aab-ab72-9c424efd896f\" alt=\"image\"></li>\n<li>\n<p>Double-click on the created PVC sticker and input the storage information for the order service as follows:</p>\n<blockquote>\n<p>Name : o-data\nAccess Modes : ReadWriteOnce\nStorage : 10 Gi\nVolume Mode : Filesystem\n<img src=\"https://github.com/acmexii/demo/assets/35618409/298d7014-97f7-4eb8-b5e1-c8949989ca51\" alt=\"image\"></p>\n</blockquote>\n</li>\n<li>At this point, delete line 14 (storageClassName) in the YAML spec to use the default storage class (Provisioner) set by most CSPs.</li>\n<li>Next, click on the 'order' Deployment object, use the arrow tool to map it to the 'o-data' PVC.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/be3accc4-bda3-473d-8745-3e04eae4c2ac\" alt=\"image\"></li>\n<li>Once the mapping is set, the order service deployment YAML spec will automatically include volume mount information using the 'o-data' storage.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/22696b78-e9a3-4b2e-afa9-06845f376174\" alt=\"image\"></li>\n<li>Apply the same volume modeling to the delivery and product services.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/e7f9d971-148c-4f7d-a9a0-ea90e3fdf300\" alt=\"image\"></li>\n</ul>\n<h2 id=\"deploy-to-the-cluster\"><a href=\"#deploy-to-the-cluster\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deploy to the Cluster</h2>\n<ul>\n<li>Manually deploy using the client (kubectl) on the configured cluster context.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f kubernetes/template/template.yml</code></pre>\n<ul>\n<li>If Kafka is not installed on the target cluster, install Kafka using Helm.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm install my-kafka bitnami/kafka --version 23.0.5</code></pre>\n<ul>\n<li>If there is no Ingress Controller, install the Ingress Controller.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm repo add stable https://charts.helm.sh/stable\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\nkubectl create namespace ingress-basic\n\nhelm install nginx-ingress ingress-nginx/ingress-nginx --namespace=ingress-basic</code></pre>\n<ul>\n<li>Check the deployed PVCs.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get pvc </code></pre>\n<ul>\n<li>The deployed PVC specs will be displayed, similar to the following (example from GCP):</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">NAME              STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nd-data            Bound    pvc-05cadaa8-0dd4-407f-85f5-d25fbb02939b   10Gi       RWO            standard-rwo   49m\ndata-my-kafka-0   Bound    pvc-676d0c9d-043d-41bd-ba57-b9397e63b565   8Gi        RWO            standard-rwo   125m\no-data            Bound    pvc-6b3a94e4-d7e6-42f3-9c4c-d4cc675db94d   10Gi       RWO            standard-rwo   49m\np-data            Bound    pvc-ab492454-4c05-4e58-8462-67d8e0f7c3aa   10Gi       RWO            standard-rwo   49m</code></pre>\n<h2 id=\"verify-order-container-storage\"><a href=\"#verify-order-container-storage\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Verify Order Container Storage</h2>\n<ul>\n<li>Access the order container to check the bound storage and create data.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/ORDER 객체 -- /bin/sh\nls /data</code></pre>\n<ul>\n<li>The storage size specified in the PVC claim will be visible, showcasing the supported storage by the cloud service provider.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Persistent Volume","anchor":"#persistent-volume"},{"depth":2,"value":"Event Storming Model Preparation","anchor":"#event-storming-model-preparation"},{"depth":2,"value":"Deployment Modeling","anchor":"#deployment-modeling"},{"depth":2,"value":"Persistence Object Modeling","anchor":"#persistence-object-modeling"},{"depth":2,"value":"Deploy to the Cluster","anchor":"#deploy-to-the-cluster"},{"depth":2,"value":"Verify Order Container Storage","anchor":"#verify-order-container-storage"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/tool/model-driven/","title":"Automatic Code Generation"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/custom-template/template-editor/","title":""}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":""}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"1. Creating a Repository"}},{"node":{"path":"/custom-template/helper/","title":""}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/custom-template/global-helper/","title":""}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/contact/question/","title":"CONTACT"}}]}},"context":{}}