{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"15bf504980d5446888b114aa54017ac0","title":"Developing Custom Template","description":"","path":"/custom-template/designing-template/","timeToRead":3,"content":"<h1 id=\"developing-custom-template\"><a href=\"#developing-custom-template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Developing Custom Template</h1>\n<h2 id=\"creating-template-file\"><a href=\"#creating-template-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating Template File</h2>\n<p>Article below is the way of creating template file to convert eventstorming model into actual source code.</p>\n<p>Following example is a source code of AggregateRoot.java file from axon template.</p>\n<pre class=\"language-text\"><code class=\"language-text\">.forEach: Aggregate\nfileName: {{namePascalCase}}Aggregate.java\npath: {{boundedContext.name}}/{{{options.packagePath}}}/aggregate\n---\npackage {{options.package}}.aggregate;\n\nimport org.axonframework.commandhandling.CommandHandler;\nimport org.axonframework.eventsourcing.EventSourcingHandler;\nimport org.axonframework.modelling.command.AggregateIdentifier;\nimport static org.axonframework.modelling.command.AggregateLifecycle.*;\nimport org.axonframework.spring.stereotype.Aggregate;\n\nimport org.springframework.beans.BeanUtils;\nimport java.util.List;\nimport java.util.UUID;\n\nimport lombok.Data;\nimport lombok.ToString;\n\n{{#checkDateType aggregateRoot.fieldDescriptors}} {{/checkDateType}}\n{{#checkBigDecimal aggregateRoot.fieldDescriptors}} {{/checkBigDecimal}}\n\nimport {{options.package}}.command.*;\nimport {{options.package}}.event.*;\nimport {{options.package}}.query.*;</code></pre>\n<p>For the first, the type of eventstorming sticker must be declared(Aggregate, Command, Policy, ...).</p>\n<p>Then you need to set the name and the path of the file by using {{ Mustache engine }}.</p>\n<p>And the package name must be declared, and all required libraries must be imported to each files.</p>\n<pre class=\"language-text\"><code class=\"language-text\">@Aggregate\n@Data\n@ToString\npublic class {{namePascalCase}}Aggregate {\n\n    {{#aggregateRoot.fieldDescriptors}}\n    {{#isKey}}\n    @AggregateIdentifier\n    {{/isKey}}\n    private {{{className}}} {{nameCamelCase}};\n    {{/aggregateRoot.fieldDescriptors}}\n\n    public {{namePascalCase}}Aggregate(){}\n\n    {{#commands}}\n    @CommandHandler\n    {{#if (isRepositoryPost this)}}\n    public {{../namePascalCase}}Aggregate({{namePascalCase}}Command command){\n    {{else}}\n    public void handle({{namePascalCase}}Command command){\n    {{/if}}\n\n        {{#triggerByCommand}}\n        {{eventValue.namePascalCase}}Event event = new {{eventValue.namePascalCase}}Event();\n        BeanUtils.copyProperties(command, event);     \n\n        {{#if (isRepositoryPost ../this)}}\n        //TODO: check key generation is properly done\n        if(event.get{{@root.aggregateRoot.keyFieldDescriptor.namePascalCase}}()==null)\n            event.set{{@root.aggregateRoot.keyFieldDescriptor.namePascalCase}}(createUUID());\n        {{/if}}\n\n        apply(event);\n\n        {{#relationCommandInfo}}\n        {{#commandValue}}\n        //Following code causes dependency to external APIs\n        // it is NOT A GOOD PRACTICE. instead, Event-Policy mapping is recommended.\n\n        {{options.package}}.external.{{aggregate.namePascalCase}} {{aggregate.nameCamelCase}} = new {{options.package}}.external.{{aggregate.namePascalCase}}();\n        // mappings goes here\n        {{relationCommandInfo.boundedContext.namePascalCase}}Application.applicationContext.getBean({{options.package}}.external.{{aggregate.namePascalCase}}Service.class)\n        .{{nameCamelCase}}({{aggregate.nameCamelCase}});\n        {{/commandValue}}\n        {{/relationCommandInfo}}\n        {{/triggerByCommand}}\n    }\n\n    {{/commands}}</code></pre>\n<p>The first annotation @Aggregate indicates that the file is a template that converts aggregate stickers, and @Data &#x26; @ToString receive data from the model and convert it into String form.</p>\n<p>Next comes the class declaration. The template creates the class name based on the name of Aggregate sticker and gets the attributes saved in it.</p>\n<p>{{#aggregateRoot.fieldDescriptors}} plays the role of bringing attributes from the Aggregate, {{#isKey}} turns the key value of the attributes and by the annotation @AggregateIdentifier, the whole group of attributes turn into constructors of the source code.</p>\n<p>Then the @CommandHandler appears. It takes the role of collecting informations from command stickers and convert them into methods to request domain events.</p>\n<p>Each commands turns into methods and they work as a trigger to run the service.</p>\n<pre class=\"language-text\"><code class=\"language-text\">//&lt;&lt;&lt; Etc / ID Generation\n    private String createUUID() {\n        return UUID.randomUUID().toString();\n    }\n//&gt;&gt;&gt; Etc / ID Generation\n\n    {{#policies}}\n\n//&lt;&lt;&lt; Clean Arch / Port Method\n    \n    @CommandHandler\n    public void handle({{namePascalCase}}Command command){\n        {{#triggerByCommand}}\n        {{eventValue.namePascalCase}}Event event = new {{eventValue.namePascalCase}}Event();\n        BeanUtils.copyProperties(this, event);     \n        apply(event);\n\n        {{#relationCommandInfo}}\n        {{#commandValue}}\n        //Following code causes dependency to external APIs\n        // it is NOT A GOOD PRACTICE. instead, Event-Policy mapping is recommended.\n\n        {{options.package}}.external.{{aggregate.namePascalCase}} {{aggregate.nameCamelCase}} = new {{options.package}}.external.{{aggregate.namePascalCase}}();\n        // mappings goes here\n        {{relationCommandInfo.boundedContext.namePascalCase}}Application.applicationContext.getBean({{options.package}}.external.{{aggregate.namePascalCase}}Service.class)\n        .{{nameCamelCase}}({{aggregate.nameCamelCase}});\n        {{/commandValue}}\n        {{/relationCommandInfo}}\n        {{/triggerByCommand}}\n    }\n//&gt;&gt;&gt; Clean Arch / Port Method\n\n    {{/policies}}</code></pre>\n<p>For the key values of each aggregates, the template randomly creates their own UUID in string type.</p>\n<p>Or if there are any rules for creating id declared as policy, the template brings the information and create an id to be used in handlers.</p>\n<p>The Annotation @CommandHandler calls the command stickers and turns the action into events to run the service.</p>\n<pre class=\"language-text\"><code class=\"language-text\">//&lt;&lt;&lt; EDA / Event Sourcing\n\n    {{#events}}\n    \n    @EventSourcingHandler\n    public void on({{namePascalCase}}Event event) {\n\n        {{#isCreationEvent}}\n        BeanUtils.copyProperties(event, this);\n        {{/isCreationEvent}}\n\n        //TODO: business logic here\n\n    }\n\n    {{/events}}\n//&gt;&gt;&gt; EDA / Event Sourcing</code></pre>\n<p>The final step starts with the annotation @EventSourcingHandler.</p>\n<p>It handles the domain events from eventstorming model and it brings on method for each events.</p>\n<p>You can add any business logics for the domain events you want to include at your application inside @EventSourcingHandler.</p>\n<h3 id=\"publishing--applying-template-file\"><a href=\"#publishing--applying-template-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Publishing &#x26; Applying Template File</h3>\n<p>When you are done with designing custom template file, you can push it to your own GitHub Repository and utilize it to convert the eventstorming model into source code.</p>\n<p>Click the CODE button from the board and open change template page.</p>\n<blockquote>\n<p>Change Template Page\n<img src=\"https://github.com/kykim97/google-drive/assets/113568664/938f205e-23c4-4d36-9613-4544acac9fe2\" alt=\"스크린샷 2023-06-08 오후 2 08 30\"></p>\n</blockquote>\n<p>Select Custom Template and put in the github repo URL of the template file you published previously.</p>\n<blockquote>\n<p>Put in the URL\n<img src=\"https://github.com/kykim97/google-drive/assets/113568664/b9561a53-e536-411f-862a-2e1ee81dceef\" alt=\"스크린샷 2023-06-08 오후 2 09 22\"></p>\n</blockquote>\n<p>Then check the result file converted by the template file you applied to the example model.</p>\n<blockquote>\n<p>Result File\n<img src=\"https://github.com/kk-young/google-drive/assets/92732781/41ea7181-2caa-47aa-aff2-b623bfd53b66\" alt=\"스크린샷 2023-06-08 오후 4 35 24\"></p>\n</blockquote>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Developing Custom Template","anchor":"#developing-custom-template"},{"depth":2,"value":"Creating Template File","anchor":"#creating-template-file"},{"depth":3,"value":"Publishing & Applying Template File","anchor":"#publishing--applying-template-file"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}