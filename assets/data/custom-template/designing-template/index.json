{"hash":"a99bfc9bba3ec5b81a294232c44255e84d96bde5","data":{"markdownPage":{"id":"15bf504980d5446888b114aa54017ac0","title":"Developing Custom Template","description":"","path":"/custom-template/designing-template/","timeToRead":4,"content":"<h1 id=\"developing-custom-template\"><a href=\"#developing-custom-template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Developing Custom Template</h1>\n<h2 id=\"creating-template-file\"><a href=\"#creating-template-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating Template File</h2>\n<p>Article below is the way of creating template file to convert eventstorming model into actual source code.</p>\n<p>Following example is a source code of AggregateRoot.java file from axon template.</p>\n<pre class=\"language-text\"><code class=\"language-text\">.forEach: Aggregate\nfileName: {{namePascalCase}}Aggregate.java\npath: {{boundedContext.name}}/{{{options.packagePath}}}/aggregate\n---\npackage {{options.package}}.aggregate;\n\nimport org.axonframework.commandhandling.CommandHandler;\nimport org.axonframework.eventsourcing.EventSourcingHandler;\nimport org.axonframework.modelling.command.AggregateIdentifier;\nimport static org.axonframework.modelling.command.AggregateLifecycle.*;\nimport org.axonframework.spring.stereotype.Aggregate;\n\nimport org.springframework.beans.BeanUtils;\nimport java.util.List;\nimport java.util.UUID;\n\nimport lombok.Data;\nimport lombok.ToString;\n\n{{#checkDateType aggregateRoot.fieldDescriptors}} {{/checkDateType}}\n{{#checkBigDecimal aggregateRoot.fieldDescriptors}} {{/checkBigDecimal}}\n\nimport {{options.package}}.command.*;\nimport {{options.package}}.event.*;\nimport {{options.package}}.query.*;</code></pre>\n<p>For the first, the type of eventstorming sticker must be declared(Aggregate, Command, Policy, ...).</p>\n<p>Then you need to set the name and the path of the file by using {{ Mustache engine }}.</p>\n<p>And the package name must be declared, and all required libraries must be imported to each files.</p>\n<pre class=\"language-text\"><code class=\"language-text\">@Aggregate\n@Data\n@ToString\npublic class {{namePascalCase}}Aggregate {\n\n    {{#aggregateRoot.fieldDescriptors}}\n    {{#isKey}}\n    @AggregateIdentifier\n    {{/isKey}}\n    private {{{className}}} {{nameCamelCase}};\n    {{/aggregateRoot.fieldDescriptors}}\n\n    public {{namePascalCase}}Aggregate(){}\n\n    {{#commands}}\n    @CommandHandler\n    {{#if (isRepositoryPost this)}}\n    public {{../namePascalCase}}Aggregate({{namePascalCase}}Command command){\n    {{else}}\n    public void handle({{namePascalCase}}Command command){\n    {{/if}}\n\n        {{#triggerByCommand}}\n        {{eventValue.namePascalCase}}Event event = new {{eventValue.namePascalCase}}Event();\n        BeanUtils.copyProperties(command, event);     \n\n        {{#if (isRepositoryPost ../this)}}\n        //TODO: check key generation is properly done\n        if(event.get{{@root.aggregateRoot.keyFieldDescriptor.namePascalCase}}()==null)\n            event.set{{@root.aggregateRoot.keyFieldDescriptor.namePascalCase}}(createUUID());\n        {{/if}}\n\n        apply(event);\n\n        {{#relationCommandInfo}}\n        {{#commandValue}}\n        //Following code causes dependency to external APIs\n        // it is NOT A GOOD PRACTICE. instead, Event-Policy mapping is recommended.\n\n        {{options.package}}.external.{{aggregate.namePascalCase}} {{aggregate.nameCamelCase}} = new {{options.package}}.external.{{aggregate.namePascalCase}}();\n        // mappings goes here\n        {{relationCommandInfo.boundedContext.namePascalCase}}Application.applicationContext.getBean({{options.package}}.external.{{aggregate.namePascalCase}}Service.class)\n        .{{nameCamelCase}}({{aggregate.nameCamelCase}});\n        {{/commandValue}}\n        {{/relationCommandInfo}}\n        {{/triggerByCommand}}\n    }\n\n    {{/commands}}</code></pre>\n<p>The first annotation @Aggregate indicates that the file is a template that converts aggregate stickers, and @Data &#x26; @ToString receive data from the model and convert it into String form.</p>\n<p>Next comes the class declaration. The template creates the class name based on the name of Aggregate sticker and gets the attributes saved in it.</p>\n<p>{{#aggregateRoot.fieldDescriptors}} plays the role of bringing attributes from the Aggregate, {{#isKey}} turns the key value of the attributes and by the annotation @AggregateIdentifier, the whole group of attributes turn into constructors of the source code.</p>\n<p>Then the @CommandHandler appears. It takes the role of collecting informations from command stickers and convert them into methods to request domain events.</p>\n<p>Each commands turns into methods and they work as a trigger to run the service.</p>\n<pre class=\"language-text\"><code class=\"language-text\">//&lt;&lt;&lt; Etc / ID Generation\n    private String createUUID() {\n        return UUID.randomUUID().toString();\n    }\n//&gt;&gt;&gt; Etc / ID Generation\n\n    {{#policies}}\n\n//&lt;&lt;&lt; Clean Arch / Port Method\n    \n    @CommandHandler\n    public void handle({{namePascalCase}}Command command){\n        {{#triggerByCommand}}\n        {{eventValue.namePascalCase}}Event event = new {{eventValue.namePascalCase}}Event();\n        BeanUtils.copyProperties(this, event);     \n        apply(event);\n\n        {{#relationCommandInfo}}\n        {{#commandValue}}\n        //Following code causes dependency to external APIs\n        // it is NOT A GOOD PRACTICE. instead, Event-Policy mapping is recommended.\n\n        {{options.package}}.external.{{aggregate.namePascalCase}} {{aggregate.nameCamelCase}} = new {{options.package}}.external.{{aggregate.namePascalCase}}();\n        // mappings goes here\n        {{relationCommandInfo.boundedContext.namePascalCase}}Application.applicationContext.getBean({{options.package}}.external.{{aggregate.namePascalCase}}Service.class)\n        .{{nameCamelCase}}({{aggregate.nameCamelCase}});\n        {{/commandValue}}\n        {{/relationCommandInfo}}\n        {{/triggerByCommand}}\n    }\n//&gt;&gt;&gt; Clean Arch / Port Method\n\n    {{/policies}}</code></pre>\n<p>For the key values of each aggregates, the template randomly creates their own UUID in string type.</p>\n<p>Or if there are any rules for creating id declared as policy, the template brings the information and create an id to be used in handlers.</p>\n<p>The Annotation @CommandHandler calls the command stickers and turns the action into events to run the service.</p>\n<pre class=\"language-text\"><code class=\"language-text\">//&lt;&lt;&lt; EDA / Event Sourcing\n\n    {{#events}}\n    \n    @EventSourcingHandler\n    public void on({{namePascalCase}}Event event) {\n\n        {{#isCreationEvent}}\n        BeanUtils.copyProperties(event, this);\n        {{/isCreationEvent}}\n\n        //TODO: business logic here\n\n    }\n\n    {{/events}}\n//&gt;&gt;&gt; EDA / Event Sourcing</code></pre>\n<p>The final step starts with the annotation @EventSourcingHandler.</p>\n<p>It handles the domain events from eventstorming model and it brings on method for each events.</p>\n<p>You can add any business logics for the domain events you want to include at your application inside @EventSourcingHandler.</p>\n<h3 id=\"publishing--applying-template-file\"><a href=\"#publishing--applying-template-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Publishing &#x26; Applying Template File</h3>\n<p>When you are done with designing custom template file, you can push it to your own GitHub Repository and utilize it to convert the eventstorming model into source code.</p>\n<p>Click the CODE button from the board and open change template page.</p>\n<blockquote>\n<p>Change Template Page\n<img src=\"https://github.com/kykim97/google-drive/assets/113568664/938f205e-23c4-4d36-9613-4544acac9fe2\" alt=\"스크린샷 2023-06-08 오후 2 08 30\"></p>\n</blockquote>\n<p>Select Custom Template and put in the github repo URL of the template file you published previously.</p>\n<blockquote>\n<p>Put in the URL\n<img src=\"https://github.com/kykim97/google-drive/assets/113568664/b9561a53-e536-411f-862a-2e1ee81dceef\" alt=\"스크린샷 2023-06-08 오후 2 09 22\"></p>\n</blockquote>\n<p>Then check the result file converted by the template file you applied to the example model.</p>\n<blockquote>\n<p>Result File\n<img src=\"https://github.com/kk-young/google-drive/assets/92732781/41ea7181-2caa-47aa-aff2-b623bfd53b66\" alt=\"스크린샷 2023-06-08 오후 4 35 24\"></p>\n</blockquote>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Developing Custom Template","anchor":"#developing-custom-template"},{"depth":2,"value":"Creating Template File","anchor":"#creating-template-file"},{"depth":3,"value":"Publishing & Applying Template File","anchor":"#publishing--applying-template-file"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/pbc-marketplace/","title":"Composable Enterprise Implementation for PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/model-driven/","title":"Code Generation"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/event-monitoring/","title":"Event Monitoring"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/info/pricing/","title":"Pricing"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/info/partnership/","title":"Partner Program"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"Creating Custom Templates in MSAEZ"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/info/company/","title":"Cases"}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"Loop & Conditional Statement"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/contact/question/","title":"CONTACT"}}]}},"context":{}}