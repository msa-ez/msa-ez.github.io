{"hash":"799d49d91b9eb2003137b6c9615ec372358e5987","data":{"markdownPage":{"id":"82b0cdfcd830aa75deb79618e8ecfa0e","title":"Template File Structure","description":"","path":"/custom-template/template-structure/","timeToRead":3,"content":"<h2 id=\"template-file-structure\"><a href=\"#template-file-structure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Template File Structure</h2>\n<p>A template file consists of metadata that sets essential options and template code that declares dynamically changing data. </p>\n<p>Using the Aggregate.java file as a reference, let's explore how to structure a template file.</p>\n<h2 id=\"1-defining-metadata\"><a href=\"#1-defining-metadata\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Defining Metadata</h2>\n<p>Metadata refers to the way the template iterates through data, the type and location of the generated files, and other configuration options. At the top of the template file, you can set options as follows:</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">forEach: Aggregate\nfileName: {{namePascalCase}}.java\npath: {{boundedContext.name}}/{{{options.packagePath}}}/domain\n---</code></pre>\n<h3 id=\"11-setting-file-type\"><a href=\"#11-setting-file-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1 Setting File Type</h3>\n<p>Use the forEach to define the type of file the template will generate. The value of forEach can be stickers modeled, and in this case, it is set to Aggregate.</p>\n<h3 id=\"12-setting-file-name\"><a href=\"#12-setting-file-name\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.2 Setting File Name</h3>\n<p>Use fileName to set the name of the generated file. Since the file is generated based on the number of stickers corresponding to forEach, dynamically generate the file name based on the specified conventions. </p>\n<p>In this example, it is set to {{namePascalCase}}.java, where the result will be dynamically replaced with the value of namePascalCase from each Aggregate.</p>\n<h3 id=\"13-setting-file-path\"><a href=\"#13-setting-file-path\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.3 Setting File Path</h3>\n<p>Finally, use path to set the path where the Order.java will be generated. The current Company.java should be generated under the domain subdirectory. </p>\n<p>Therefore, by referencing the data in the 'Model Explorer', set the paths so that the files specified by fileName are created under the domain.</p>\n<p>Once the metadata options are set, input a hyphen ('---') at the bottom of the last metadata to separate it from the template code.</p>\n<h2 id=\"2-template-code\"><a href=\"#2-template-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Template Code</h2>\n<h3 id=\"21-mustache\"><a href=\"#21-mustache\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.1 Mustache</h3>\n<p>In the template file, you can use Mustache ('{{}}') to structure the template code using data generated through modeling. Mustache allows you to input the modeled data within the template.</p>\n<p>For example, using the name from the Aggregate sticker, you can create a Java class as follows:</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class {{name}} {\n\n}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public class Company {\n\n}</code></pre>\n<h3 id=\"22-accessing-inner-attributes\"><a href=\"#22-accessing-inner-attributes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.2 Accessing Inner Attributes</h3>\n<p>Typically, when accessing attributes of the base sticker, you can use the {{attribute}} format.</p>\n<p>However, when accessing attributes within a specific attribute, you use a period ('.'). </p>\n<p>This is written as {{attribute.innerAttribute}}.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{keyFieldDescriptor.name}}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">id</code></pre>\n<p>Among the fields of the Aggregate sticker, the current id field is set as the keyField. To retrieve the name of the id field, you access the name attribute inside keyFieldDescriptor.</p>\n<h3 id=\"23-accessing-outer-attributes\"><a href=\"#23-accessing-outer-attributes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.3 Accessing Outer Attributes</h3>\n<p>In contrast to accessing inner attributes, there are situations where you need to access attributes outside the current scope.</p>\n<p>To access attributes in the outer scope, use '../', and it's written as {{../outerAttribute}}.</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#aggregateRoot}}\n    {{../name}}\n{{/aggregateRoot}}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">Company</code></pre>\n<p>In the example, to retrieve the name of the Aggregate sticker while within the aggregateRoot attribute, </p>\n<p>you need to access the outer attribute using {{../name}}.</p>\n<h3 id=\"24-naming-conventions\"><a href=\"#24-naming-conventions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.4 Naming Conventions</h3>\n<p>Data related to names within stickers is generated using various naming conventions. You can leverage these conventions to access event attributes and create methods, as shown below:</p>\n<p>Template</p>\n<pre class=\"language-text\"><code class=\"language-text\">{{#lifeCycles}}\n    public void on{{trigger}}(){\n        {{#events}}\n            {{namePascalCase}} {{nameCamelCase}} = new{{namePascalCase}}(this);\n        {{/events}}\n    }\n{{/lifrCycles}}</code></pre>\n<p>Template Result</p>\n<pre class=\"language-text\"><code class=\"language-text\">public void onPostPersist() {\n    OrderPlaced orderPlaced = new OrderPlaced(this);\n    orderPlaced.publishAfterCommit();\n}</code></pre>\n<p>In this example, methods are created by accessing the event stickers within the lifeCycles attribute and utilizing the naming conventions generated for the event stickers.</p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":2,"value":"Template File Structure","anchor":"#template-file-structure"},{"depth":2,"value":"1. Defining Metadata","anchor":"#1-defining-metadata"},{"depth":3,"value":"1.1 Setting File Type","anchor":"#11-setting-file-type"},{"depth":3,"value":"1.2 Setting File Name","anchor":"#12-setting-file-name"},{"depth":3,"value":"1.3 Setting File Path","anchor":"#13-setting-file-path"},{"depth":2,"value":"2. Template Code","anchor":"#2-template-code"},{"depth":3,"value":"2.1 Mustache","anchor":"#21-mustache"},{"depth":3,"value":"2.2 Accessing Inner Attributes","anchor":"#22-accessing-inner-attributes"},{"depth":3,"value":"2.3 Accessing Outer Attributes","anchor":"#23-accessing-outer-attributes"},{"depth":3,"value":"2.4 Naming Conventions","anchor":"#24-naming-conventions"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/tool/model-driven/","title":"Automatic Code Generation"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/custom-template/helper/","title":""}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/custom-template/template-editor/","title":""}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":""}},{"node":{"path":"/custom-template/global-helper/","title":""}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"1. Creating a Repository"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}}]}},"context":{}}