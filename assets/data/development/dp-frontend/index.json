{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"500672013292f6e0e2d2bd918746dae4","title":"Data Projection with Frontend and HATEOAS","description":"","path":"/development/dp-frontend/","timeToRead":2,"content":"<h1 id=\"data-projection-with-frontend-and-hateoas\"><a href=\"#data-projection-with-frontend-and-hateoas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Projection with Frontend and HATEOAS</h1>\n<h3 id=\"frontend-based-data-projection\"><a href=\"#frontend-based-data-projection\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Frontend-based Data Projection</h3>\n<p>The first way of Data Projection: Aggregate data from UI(utilizing Vue.js-based Frontend)</p>\n<h4 id=\"frontend-test\"><a href=\"#frontend-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Frontend Test</h4>\n<ul>\n<li>Run every microservices(Order, Inventory)</li>\n<li>Run Kafka local server.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose up</code></pre>\n<ul>\n<li>Run the Frontend service.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd frontend\nnpm i\nnpm run serve</code></pre>\n<ul>\n<li>Run gateway to get access to frontend service on browser.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd gateway\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Make the gateway into public so it can be accessed from outside.</li>\n<li>When you access to gateway routing Rule by '/', it's forwarding to  Frontend server.</li>\n<li>Access through gateway(8088).</li>\n<li>API can be called only through the gateway(CORS: Cross-Origin-Resource-Sharing Issue).</li>\n<li>Register stock before making an order:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># First, install http Client.\npip install httpie\nhttp :8082/inventories id=1 stock=10</code></pre>\n<ul>\n<li>\n<p>Access to UI and make an order:</p>\n<blockquote>\n<p>Click '+' of Order UI.</p>\n</blockquote>\n</li>\n</ul>\n<img width=\"574\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/191061282-9cba3a28-219e-4fde-baa9-f9713b3f889a.png\">\n<img width=\"574\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/191061179-211ff733-b7c7-4d26-9c33-e146ed565bf5.png\">\n<img width=\"574\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/191061043-c9796f3f-4758-4052-aff4-71171f0c14fe.png\">\n<h4 id=\"integrate-the-information-of-delivery-and-inventory-through-order-ui\"><a href=\"#integrate-the-information-of-delivery-and-inventory-through-order-ui\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Integrate the information of Delivery and Inventory through Order UI</h4>\n<ul>\n<li>Add Inventory tag on Order.vue's template to call Inventory:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">        &lt;v-card-text&gt;\n            &lt;String label=&quot;ProductId&quot; v-model=&quot;value.productId&quot; :editMode=&quot;editMode&quot;/&gt;\n            &lt;Number label=&quot;Qty&quot; v-model=&quot;value.qty&quot; :editMode=&quot;editMode&quot;/&gt;\n            &lt;String label=&quot;CustomerId&quot; v-model=&quot;value.customerId&quot; :editMode=&quot;editMode&quot;/&gt;\n            &lt;Number label=&quot;Amount&quot; v-model=&quot;value.amount&quot; :editMode=&quot;editMode&quot;/&gt;\n            &lt;String label=&quot;Status&quot; v-model=&quot;value.status&quot; :editMode=&quot;editMode&quot;/&gt;\n            &lt;String label=&quot;Address&quot; v-model=&quot;value.address&quot; :editMode=&quot;editMode&quot;/&gt;\n\n            &lt;Inventory v-model=&quot;inventory&quot;&gt;&lt;/Inventory&gt;\n\n        &lt;/v-card-text&gt;</code></pre>\n<ul>\n<li>Declare inventory, a variable connected by v-model and give basic data: (line 98)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">        data: () =&gt; ({\n            snackbar: {\n                status: false,\n                timeout: 5000,\n                text: &#39;&#39;\n            },\n            inventory: {stock: 5}\n        }),</code></pre>\n<ul>\n<li>Check if the result is same as the image below:</li>\n</ul>\n<img width=\"462\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/191063786-aa08928e-eda9-41a4-9c21-bcb9ccdddef5.png\">\n<ul>\n<li>Filling in Inventory data by loading dynamically.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">        data: () =&gt; ({\n            snackbar: {\n                status: false,\n                timeout: 5000,\n                text: &#39;&#39;\n            },\n            inventory: null\n        }),\n        async created(){\n            var result = await axios.get(&#39;/inventories/&#39; + this.value.productId);\n            this.inventory = result.data;\n        },\n    ...</code></pre>\n<h4 id=\"handling-dynamic-data-relationship-through-hateoas-link\"><a href=\"#handling-dynamic-data-relationship-through-hateoas-link\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Handling dynamic data relationship through HATEOAS Link</h4>\n<ul>\n<li>order/../infra/OrderHateoasProcessor.java:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@Component\npublic class OrderHateoasProcessor implements RepresentationModelProcessor&lt;EntityModel&lt;Order&gt;&gt;  {\n\n    @Override\n    public EntityModel&lt;Order&gt; process(EntityModel&lt;Order&gt; model) {\n        model.add(Link.of(&quot;/inventories/&quot; + model.getContent().getProductId()).withRel(&quot;inventory&quot;));\n        \n        return model;\n    }\n    \n}</code></pre>\n<ul>\n<li>Re-run order service.</li>\n<li>Make an order by http.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders productId=1 qty=3 customerId=gdhong address=Seoul</code></pre>\n<ul>\n<li>Check HATEOAS Link created:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">&gt; http :8081/orders\n{\n    &quot;_links&quot;: {\n        &quot;inventory&quot;: {\n            &quot;href&quot;: &quot;/inventories/1&quot;\n        },\n        &quot;order&quot;: {\n            &quot;href&quot;: &quot;http://localhost:8081/orders/1&quot;\n        },\n        &quot;self&quot;: {\n            &quot;href&quot;: &quot;http://localhost:8081/orders/1&quot;\n        }\n    },\n    &quot;address&quot;: &quot;Everland&quot;,\n    &quot;amount&quot;: null,\n    &quot;customerId&quot;: &quot;jjy&quot;,\n    &quot;productId&quot;: &quot;1&quot;,\n    &quot;qty&quot;: 1,\n    &quot;status&quot;: null\n}</code></pre>\n<ul>\n<li>Edit Order.vue to get the URI address of Inventory data indirectly through HATEOAS Link:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">        async created(){\n            var result = await axios.get(this.value._links.inventory.href);\n            this.inventory = result.data;\n        },</code></pre>\n<ul>\n<li>As a result, we can notice that the same result comes out through Frontend.</li>\n</ul>\n<h4 id=\"we-can-composite-scattered-data-of-microservices-on-frontend-ui-but-the-backend-service-must-be-alive-and-if-there-are-too-many-data-performance-problems-can-happen\"><a href=\"#we-can-composite-scattered-data-of-microservices-on-frontend-ui-but-the-backend-service-must-be-alive-and-if-there-are-too-many-data-performance-problems-can-happen\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>We can composite scattered data of microservices on Frontend UI, but the Backend service must be alive and if there are too many data, performance problems can happen.</h4>\n<h3 id=\"scenario-expansion-output-of-the-integrated-delivery-information\"><a href=\"#scenario-expansion-output-of-the-integrated-delivery-information\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scenario Expansion: Output of the integrated delivery information</h3>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Data Projection with Frontend and HATEOAS","anchor":"#data-projection-with-frontend-and-hateoas"},{"depth":3,"value":"Frontend-based Data Projection","anchor":"#frontend-based-data-projection"},{"depth":4,"value":"Frontend Test","anchor":"#frontend-test"},{"depth":4,"value":"Integrate the information of Delivery and Inventory through Order UI","anchor":"#integrate-the-information-of-delivery-and-inventory-through-order-ui"},{"depth":4,"value":"Handling dynamic data relationship through HATEOAS Link","anchor":"#handling-dynamic-data-relationship-through-hateoas-link"},{"depth":4,"value":"We can composite scattered data of microservices on Frontend UI, but the Backend service must be alive and if there are too many data, performance problems can happen.","anchor":"#we-can-composite-scattered-data-of-microservices-on-frontend-ui-but-the-backend-service-must-be-alive-and-if-there-are-too-many-data-performance-problems-can-happen"},{"depth":3,"value":"Scenario Expansion: Output of the integrated delivery information","anchor":"#scenario-expansion-output-of-the-integrated-delivery-information"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}