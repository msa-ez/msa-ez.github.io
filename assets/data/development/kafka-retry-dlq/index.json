{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"619eb74e8e698ab73e1563bb4a597398","title":"Kafka Retry & Dead Letter Queue ","description":"","path":"/development/kafka-retry-dlq/","timeToRead":2,"content":"<h1 id=\"kafka-retry--dead-letter-queue\"><a href=\"#kafka-retry--dead-letter-queue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Retry &#x26; Dead Letter Queue</h1>\n<h3 id=\"retry--dlq\"><a href=\"#retry--dlq\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Retry &#x26; DLQ</h3>\n<h4 id=\"kafka-retry\"><a href=\"#kafka-retry\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Retry</h4>\n<ul>\n<li>If error occurs when the Consumer is handling the message, it should be polled again.</li>\n<li>This process is Retry, and it could be working by a simple Kafka setting.</li>\n<li>Release the annotation of cloud.stream.bindings.event-in from application.yml of Inventory microservice and save it.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">bindings:\n  event-in:\n    group: product\n    destination: kafkatest\n    contentType: application/json\n    consumer:\n      max-attempts: 3\n      back-off-initial-interval: 1000\n      back-off-max-interval: 1000\n      back-off-multiplier: 1.0\n      defaultRetryable: false  </code></pre>\n<ul>\n<li>Perform 3 retries: the initial Back-off period is 1 second, and run retry in max-period of 1 second.</li>\n<li>Put in the error occurring code below at PolicyHandler.java of Inventory service:</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaProcessor</span><span class=\"token punctuation\">.</span>INPUT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wheneverOrderPlaced_DecreaseStock</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">OrderPlaced</span> orderPlaced<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t\t\t\t\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//always fail</span>\n\n    <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Run Order and Product microservices.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> order\nmvn spring-boot:run</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Register an order</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1 stock=1000</code></pre>\n<ul>\n<li>Publish Kafka Event by posting at Order service.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders productId=1 qty=3</code></pre>\n<ul>\n<li>Subscribe the Message at Inventory and pull out the content.</li>\n<li>Check if Kafka retry performs by throw new Runtime Texception by the log of Console.</li>\n<li>But, </li>\n<li>The message cannot be handled, so the partition Lag always remains.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">./kafka-consumer-groups --bootstrap-server localhost:9092 --group inventory --describe</code></pre>\n<ul>\n<li>This is an object that must be saved at separate Topic and handled by back office.</li>\n</ul>\n<h4 id=\"kafka-dead-letter-queuedlq\"><a href=\"#kafka-dead-letter-queuedlq\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Dead Letter Queue(DLQ)</h4>\n<ul>\n<li>The message cannot be handled by Kafka retry is called Poison pill.</li>\n<li>In Kafka, Poison pil is being sent to DLQ, the separate message storage.</li>\n<li>DLQ is another topic, and the messages those couldn't be handled normally from consumers are stacked in there.</li>\n<li>To set DLQ, modify application.yml of Inventory as below.</li>\n<li>Remove the annotation of the setting below under cloud.stream.kafka:</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">bindings</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">event-in</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">consumer</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">enableDlq</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token key atrule\">dlqName</span><span class=\"token punctuation\">:</span> dlq<span class=\"token punctuation\">-</span>kafkatest\n      <span class=\"token key atrule\">dlqPartitions</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre>\n<ul>\n<li>Save it and re-run Inventory microservice.</li>\n</ul>\n<blockquote>\n<p>Retry repeats as the service is running, and we can check on Console that the unhandled messages are being sent to DLQ.\nSent to DLQ  a message with key='null' and payload='{123, 34, 101, 118, 101, 110, 116, 84, 121, 112, 1...' received from 0</p>\n</blockquote>\n<ul>\n<li>Check if the DLQ topic specified in settings has been created.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin\n./kafka-topics --bootstrap-server http://localhost:9092  --list</code></pre>\n<h4 id=\"kafka-dlq-test\"><a href=\"#kafka-dlq-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka DLQ Test</h4>\n<ul>\n<li>Publish additional Kafka Event by posting to Order service.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST :8081/orders productId=1 qty=1</code></pre>\n<ul>\n<li>Try 3 retries at Product and automatically send it to DLQ.</li>\n<li>Check if the message has been stacked at DLQ by the command below.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">./kafka-console-consumer --bootstrap-server http://localhost:9092 --topic dlq-kafkatest --from-beginning</code></pre>\n<ul>\n<li>Send unhandled message to DLQ when commit mode is automatic, then increase Offset automatically so the Lag won't stack up.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">./kafka-consumer-groups --bootstrap-server localhost:9092 --group inventory --describe</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Kafka Retry & Dead Letter Queue","anchor":"#kafka-retry--dead-letter-queue"},{"depth":3,"value":"Retry & DLQ","anchor":"#retry--dlq"},{"depth":4,"value":"Kafka Retry","anchor":"#kafka-retry"},{"depth":4,"value":"Kafka Dead Letter Queue(DLQ)","anchor":"#kafka-dead-letter-queuedlq"},{"depth":4,"value":"Kafka DLQ Test","anchor":"#kafka-dlq-test"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}