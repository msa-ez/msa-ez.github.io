{"hash":"8f60c6826c0abf6213c6c83bc55287d9a570dfbb","data":{"markdownPage":{"id":"4de31dfa5698f32875e6accbe2d1c75b","title":"Running Unit Microservices","description":"","path":"/development/cna-start/","timeToRead":2,"content":"<h1 id=\"running-unit-microservices\"><a href=\"#running-unit-microservices\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Running Unit Microservices</h1>\n<p>We will practice compiling and running Spring Boot to execute unit microservices. </p>\n<p>The generated applications provide RESTful services, and we will use the httpie tool to make calls to these services. </p>\n<p>We'll explore the operational structure using a debugger and extend the service by adding attributes to aggregate objects and database properties.</p>\n<h2 id=\"eventstorming-model-preparation\"><a href=\"#eventstorming-model-preparation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EventStorming Model Preparation</h2>\n<ul>\n<li>Open the model in a new tab using the link below:\n<a href=\"https://www.msaez.io/#/storming/7b59c53f12e372251cc3c83da8b2fd09\" target=\"_blank\" rel=\"noopener noreferrer\">Model Link : https://www.msaez.io/#/storming/7b59c53f12e372251cc3c83da8b2fd09</a></li>\n<li>If the model doesn't load, click on the avatar icon (person shape) in the upper right, log in with your Github account, and then reload.</li>\n<li>Verify that the model, as needed for the level, is displayed.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/277a434c-c6fa-49aa-a05e-3a7249865ca4\" alt=\"image\"></li>\n</ul>\n<h2 id=\"running-microservices\"><a href=\"#running-microservices\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Running Microservices</h2>\n<p>Compile and run the microservices created with Spring Boot.</p>\n<ul>\n<li>Select CODE > ProjectIDE from the menu to run the connected browser IDE.</li>\n<li>In the browser IDE, right-click on the monolith folder in the left explorer and click on \"Open In Integrated Terminal.\"</li>\n<li>Confirm that the terminal opens in the subfolder.</li>\n</ul>\n<h3 id=\"starting-the-created-services\"><a href=\"#starting-the-created-services\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Starting the Created Services</h3>\n<p>Run the microservices in the terminal using mvn.</p>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run</code></pre>\n<br>\n<ul>\n<li>Install the httpie tool.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">pip install httpie</code></pre>\n<br>\n<h3 id=\"service-testing\"><a href=\"#service-testing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Testing</h3>\n<ul>\n<li>1번  Register product information (stock of 10).</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/inventories id=1 stock=10</code></pre>\n<br>\n<ul>\n<li>Place an order for 3 items.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3</code></pre>\n<br>\n<ul>\n<li>Verify that the stock decreased by 3.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/inventories/1</code></pre>\n<br>\n<ul>\n<li>View the ordered product.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http GET localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders</code></pre>\n<br>\n<ul>\n<li>Modify the ordered product.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http PATCH localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders<span class=\"token operator\">/</span><span class=\"token number\">1</span> qty<span class=\"token operator\">=</span><span class=\"token number\">10</span></code></pre>\n<br>\n<h2 id=\"types-of-occurring-errors\"><a href=\"#types-of-occurring-errors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Types of Occurring Errors</h2>\n<ol>\n<li>Web server failed to start. Port 8081 was already in use: Another process is using the same port number. Terminate the process holding the port (close the terminal or use Ctrl + C or the command fuser -k portNumber/tcp).</li>\n<li>No plugin found for prefix 'spring-boot': Check if there is a pom.xml in the current folder. If yes, check for typos in the mvn spring-boot:run command.</li>\n<li>ConnectionError: HTTPConnectionPool(host='localhost', port=8081): Max retries: The server itself is not running.</li>\n</ol>\n<h3 id=\"debugging-in-ide\"><a href=\"#debugging-in-ide\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Debugging in IDE</h3>\n<ol>\n<li>Find Application.java and locate the main function.</li>\n<li>Activate the circular breakpoint on the left of the first line of source code in the main function.</li>\n<li>Click on the link \"Debug\" above the main function (takes about 10 seconds, please wait).</li>\n<li>Once the debugger is active and stops at the breakpoint, click the \"Continue\" arrow button.</li>\n<li>Next, set a debug point in Order.java at the first execution point:</li>\n<li>Then, debug the point by placing an order:</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostPersist</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPostPersist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/// Add this part</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/inventories id=1 stock=10\nhttp POST localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3</code></pre>\n<ul>\n<li>After confirming that the debugger is paused, check the contents of variables under local > this object.\n<br></li>\n</ul>\n<h3 id=\"extending-order-aggregate\"><a href=\"#extending-order-aggregate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Extending Order Aggregate</h3>\n<ul>\n<li>Add the following field to Order.java:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    String address;</code></pre>\n<br>\n<h3 id=\"restart-the-service\"><a href=\"#restart-the-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Restart the Service</h3>\n<ul>\n<li>Restart the service with the added field.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3 address=&quot;my home&quot;</code></pre>\n<br>\n<h3 id=\"checking-and-killing-running-processes\"><a href=\"#checking-and-killing-running-processes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Checking and Killing Running Processes</h3>\n<pre class=\"language-java\"><code class=\"language-java\">netstat <span class=\"token operator\">-</span>lntp <span class=\"token operator\">|</span> grep <span class=\"token operator\">:</span><span class=\"token number\">808</span> \nkill <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>process id<span class=\"token punctuation\">></span></span></code></pre>\n<p>or</p>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8081/tcp</code></pre>\n<br>\n<h4 id=\"detailed-explanation\"><a href=\"#detailed-explanation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Detailed Explanation</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/J6yqEJrQUyk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Running Unit Microservices","anchor":"#running-unit-microservices"},{"depth":2,"value":"EventStorming Model Preparation","anchor":"#eventstorming-model-preparation"},{"depth":2,"value":"Running Microservices","anchor":"#running-microservices"},{"depth":3,"value":"Starting the Created Services","anchor":"#starting-the-created-services"},{"depth":3,"value":"Service Testing","anchor":"#service-testing"},{"depth":2,"value":"Types of Occurring Errors","anchor":"#types-of-occurring-errors"},{"depth":3,"value":"Debugging in IDE","anchor":"#debugging-in-ide"},{"depth":3,"value":"Extending Order Aggregate","anchor":"#extending-order-aggregate"},{"depth":3,"value":"Restart the Service","anchor":"#restart-the-service"},{"depth":3,"value":"Checking and Killing Running Processes","anchor":"#checking-and-killing-running-processes"},{"depth":4,"value":"Detailed Explanation","anchor":"#detailed-explanation"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/model-driven/","title":"Automatic Code Generation"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/custom-template/template-editor/","title":"1. What is Template Editor?"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/template-structure/","title":"Template Structure"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/custom-template/for-loop/","title":"For-Loop"}},{"node":{"path":"/custom-template/conditional-statement/","title":"Conditional Statements"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}