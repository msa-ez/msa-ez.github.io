{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"4de31dfa5698f32875e6accbe2d1c75b","title":"Running Microservice Units","description":"","path":"/development/cna-start/","timeToRead":2,"content":"<h1 id=\"running-microservice-units\"><a href=\"#running-microservice-units\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Running Microservice Units</h1>\n<h2 id=\"compiling--running-service\"><a href=\"#compiling--running-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compiling &#x26; Running Service</h2>\n<p>Compile &#x26; run SpringBoot-based Microservice</p>\n<ul>\n<li>Run IDE Tool :  Eventstorming Tool > CODE > Click Project IDE</li>\n<li>Right click on the monolith folder(single service) from the explorer on the left side, and then click on \"Open in Integrated Terminal\"</li>\n<li>Check if the terminal is opened from the folder.</li>\n</ul>\n<h3 id=\"running-the-created-service\"><a href=\"#running-the-created-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Running the created service</h3>\n<h5 id=\"how-to-run-microservice-by-mvn-on-terminal\"><a href=\"#how-to-run-microservice-by-mvn-on-terminal\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How to run Microservice by mvn on terminal</h5>\n<pre class=\"language-java\"><code class=\"language-java\">mvn spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">:</span>run</code></pre>\n<ul>\n<li>Install httpie tool</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">pip install httpie</code></pre>\n<h3 id=\"service-test\"><a href=\"#service-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Test</h3>\n<ul>\n<li>Register product no.1's information(stock)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/inventories id=1 stock=10</code></pre>\n<ul>\n<li>Request an order.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http POST localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders productId<span class=\"token operator\">=</span><span class=\"token number\">1</span> productName<span class=\"token operator\">=</span><span class=\"token string\">\"TV\"</span> qty<span class=\"token operator\">=</span><span class=\"token number\">3</span></code></pre>\n<ul>\n<li>Check if the stock has decreased by 3.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/inventories/1</code></pre>\n<ul>\n<li>Inquire the ordered product.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http GET localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders</code></pre>\n<ul>\n<li>Edit informations of the ordered product.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http PATCH localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders<span class=\"token operator\">/</span><span class=\"token number\">1</span> qty<span class=\"token operator\">=</span><span class=\"token number\">10</span></code></pre>\n<h3 id=\"debugging-on-ide\"><a href=\"#debugging-on-ide\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Debugging on IDE</h3>\n<ol>\n<li>Find Application.java and find the main function.</li>\n<li>Find and activate a round breakpoint on the left side of the first source line of main function. </li>\n<li>Click a small link above the main function(wait for about 10 seconds).</li>\n<li>Soon, the debugger activates and it stops on the breakpoint.</li>\n<li>Click on the arrow button 'Continue' and proceed the debugger.</li>\n<li>Next, set the debug point at the first execution point of Order.java :</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostPersist</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPostPersist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">OrderPlaced</span> orderPlaced <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderPlaced</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// this point</span>\n        orderPlaced<span class=\"token punctuation\">.</span><span class=\"token function\">publishAfterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<ol>\n<li>Next, place a previous order.</li>\n<li>After checking if the debugger stops at Order.java, check the content of the object 'local > this' from the variables.</li>\n</ol>\n<h3 id=\"expand-order-aggregate\"><a href=\"#expand-order-aggregate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Expand Order aggregate</h3>\n<p>Add the following field on Order.java :</p>\n<pre class=\"language-text\"><code class=\"language-text\">    String address;</code></pre>\n<p>Right click on the variable 'address' > Source Action > Generate Setters/Getters.\nCheck if the setter/getter has been created as below.</p>\n<pre class=\"language-text\"><code class=\"language-text\">    String address;\n \n    public String getAddress() {\n        return address;\n    }\n    public void setAddress(String address) {\n        this.address = address;\n    }</code></pre>\n<p>Re-run the service.</p>\n<ul>\n<li>Register the fields you added.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3 address=&quot;my home&quot;</code></pre>\n<h3 id=\"check--delete-the-running-process\"><a href=\"#check--delete-the-running-process\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Check &#x26; Delete the Running Process</h3>\n<pre class=\"language-java\"><code class=\"language-java\">netstat <span class=\"token operator\">-</span>lntp <span class=\"token operator\">|</span> grep <span class=\"token operator\">:</span><span class=\"token number\">808</span> \nkill <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>process id<span class=\"token punctuation\">></span></span></code></pre>\n<p>or</p>\n<pre class=\"language-java\"><code class=\"language-java\">fuser <span class=\"token operator\">-</span>k <span class=\"token number\">8081</span><span class=\"token operator\">/</span>tcp</code></pre>\n<h4 id=\"for-more-specifics-\"><a href=\"#for-more-specifics-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>for more specifics :</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/J6yqEJrQUyk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Running Microservice Units","anchor":"#running-microservice-units"},{"depth":2,"value":"Compiling & Running Service","anchor":"#compiling--running-service"},{"depth":3,"value":"Running the created service","anchor":"#running-the-created-service"},{"depth":5,"value":"How to run Microservice by mvn on terminal","anchor":"#how-to-run-microservice-by-mvn-on-terminal"},{"depth":3,"value":"Service Test","anchor":"#service-test"},{"depth":3,"value":"Debugging on IDE","anchor":"#debugging-on-ide"},{"depth":3,"value":"Expand Order aggregate","anchor":"#expand-order-aggregate"},{"depth":3,"value":"Check & Delete the Running Process","anchor":"#check--delete-the-running-process"},{"depth":4,"value":"for more specifics :","anchor":"#for-more-specifics-"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}