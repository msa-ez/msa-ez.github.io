{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"b6ee9c1c33c72b014629b6acafed1edf","title":"Pub/Sub Communication - Compensation & Correlation","description":"","path":"/development/compensation-correlation/","timeToRead":2,"content":"<h1 id=\"pubsub-communication---compensation--correlation\"><a href=\"#pubsub-communication---compensation--correlation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub Communication - Compensation &#x26; Correlation</h1>\n<h3 id=\"compensation-and-correlation\"><a href=\"#compensation-and-correlation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compensation and Correlation</h3>\n<p>Compensation is a process to rollback or compensate the customer for any changes that have occurred from an event or if the transaction is to be cancelled for any technical reason. </p>\n<p>And Correlation is a relationship between data of microservices which has to be cancelled by connecting their key values.</p>\n<h3 id=\"scenario\"><a href=\"#scenario\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scenario</h3>\n<p>We published an event called OrderPlaced, which creates an order.\nIn this lab, we'll publish an event called OrderCancelled to cancel an order from Order service, and carry out a Compensation from Inventory to rollback the stock for the order.\nFor the inventory, the rollback is made by adding the quantity of stock that were initially ordered by having the productId as a Correlation Key.</p>\n<h3 id=\"working-process\"><a href=\"#working-process\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Working Process</h3>\n<h4 id=\"eventstorming\"><a href=\"#eventstorming\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Eventstorming</h4>\n<ul>\n<li>Attach the Command \"cancel\". This command must be attached on the left side of Order Aggregate.</li>\n<li>Double click on cancel command and select \"DELETE\" for http method.</li>\n<li>Attach an Event \"OrderCancelled\" on the right side of Order Aggregate, so the event could be published following the cancel command.</li>\n<li>Click Sync Attributes on OrderCancelled event to duplicate the attributes from the Aggregate.</li>\n<li>Connect a line between cancel command and OrderCancelled event.</li>\n<li>Add a Policy at inventory bounded context and name it \"increase stock\"</li>\n<li>Connect a line between OrderCancelled Event and \"increase stock\" Policy.</li>\n</ul>\n<h4 id=\"code-generation\"><a href=\"#code-generation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code Generation</h4>\n<ul>\n<li>order/../ Order.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">   @PreRemove\n    public void onPreRemove() {\n        OrderCancelled orderCancelled = new OrderCancelled(this);\n        orderCancelled.publishAfterCommit();\n    }</code></pre>\n<ul>\n<li>order/../   OrderCancelled.java &#x26; inventory/../ OrderCancelled.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package labshopcompensation.domain;\n\nimport java.util.*;\nimport labshopcompensation.domain.*;\nimport labshopcompensation.infra.AbstractEvent;\nimport lombok.*;\n\n@Data\n@ToString\npublic class OrderCancelled extends AbstractEvent {\n\n    private Long id;\n    private String productId;\n    private Integer qty;\n    private String customerId;\n    private Double amount;\n    private String status;\n    private String address;\n\n    public OrderCancelled(Order aggregate) {\n        super(aggregate);\n    }\n\n    public OrderCancelled() {\n        super();\n    }\n    // keep\n\n}</code></pre>\n<ul>\n<li>wheneverOrderCancelled_increaseStock method from inventory/../ PolicyHandler.java </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    @StreamListener(\n        value = KafkaProcessor.INPUT,\n        condition = &quot;headers[&#39;type&#39;]==&#39;OrderCancelled&#39;&quot;\n    )\n    public void wheneverOrderCancelled_IncreaseStock(\n        @Payload OrderCancelled orderCancelled\n    ) {\n        OrderCancelled event = orderCancelled;\n        System.out.println(\n            &quot;\\n\\n##### listener IncreaseStock : &quot; + orderCancelled + &quot;\\n\\n&quot;\n        );\n\n        // Sample Logic //\n        Inventory.increaseStock(event);\n    }</code></pre>\n<ul>\n<li>increaseStock method from inventory/../ Inventory.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public static void increaseStock(OrderCancelled orderCancelled) {\n\n        /** fill out following code  */\n\n    }</code></pre>\n<h4 id=\"cancel-an-order--check-the-event\"><a href=\"#cancel-an-order--check-the-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Cancel an Order &#x26; Check the Event</h4>\n<ul>\n<li>Save the generated codes and re-run order service.</li>\n<li>Set the initial amount of stock.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1  stock=10</code></pre>\n<ul>\n<li>Create an order by the command below.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 productName=TV qty=3</code></pre>\n<ul>\n<li>Check the left amount of stock after the order.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories/1    # stock=7</code></pre>\n<ul>\n<li>Cancel the order.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http DELETE localhost:8081/orders/1</code></pre>\n<ul>\n<li>Check the left amount of stock after cancelling the order.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories/1    # stock=10</code></pre>\n<ul>\n<li>Use Kafka consumer to check if OrderCancelled event is being published.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin\n\n./kafka-console-consumer --bootstrap-server localhost:9092 --topic labshopcompensation --from-beginning</code></pre>\n<h4 id=\"implementing-inventory-service\"><a href=\"#implementing-inventory-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Implementing Inventory Service</h4>\n<ul>\n<li>Implement increaseStock method at Inventory.java, the Aggregate of inventory service:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public static void increaseStock(OrderCancelled orderCancelled) {\n\n        repository().findById(Long.valueOf(orderCancelled.getProductId())).ifPresent(inventory-&gt;{\n            \n            inventory.setStock(inventory.getStock() - orderCancelled.getQty()); \n            repository().save(inventory);\n\n\n         });\n\n    }</code></pre>\n<h3 id=\"scenario-extension-cancel-an-order-when-the-order-has-been-deleted-from-delivery-service\"><a href=\"#scenario-extension-cancel-an-order-when-the-order-has-been-deleted-from-delivery-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scenario Extension: Cancel an order when the order has been deleted from delivery service</h3>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Pub/Sub Communication - Compensation & Correlation","anchor":"#pubsub-communication---compensation--correlation"},{"depth":3,"value":"Compensation and Correlation","anchor":"#compensation-and-correlation"},{"depth":3,"value":"Scenario","anchor":"#scenario"},{"depth":3,"value":"Working Process","anchor":"#working-process"},{"depth":4,"value":"Eventstorming","anchor":"#eventstorming"},{"depth":4,"value":"Code Generation","anchor":"#code-generation"},{"depth":4,"value":"Cancel an Order & Check the Event","anchor":"#cancel-an-order--check-the-event"},{"depth":4,"value":"Implementing Inventory Service","anchor":"#implementing-inventory-service"},{"depth":3,"value":"Scenario Extension: Cancel an order when the order has been deleted from delivery service","anchor":"#scenario-extension-cancel-an-order-when-the-order-has-been-deleted-from-delivery-service"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}