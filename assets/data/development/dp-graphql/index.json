{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"f49669fffa01e020ab34c63bb8736b40","title":"Data Projection with GraphQL","description":"","path":"/development/dp-graphql/","timeToRead":4,"content":"<h1 id=\"data-projection-with-graphql\"><a href=\"#data-projection-with-graphql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Projection with GraphQL</h1>\n<h3 id=\"integrate-back-end-data-with-graphql\"><a href=\"#integrate-back-end-data-with-graphql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Integrate Back-End Data with GraphQL</h3>\n<p>BFF pattern is a second way of Data Projection, which implemented as a dedicated server to project data from Backend: (Using Apollo server)</p>\n<ul>\n<li>Fork the eventstorming model and name it 'lab-shop-graphql'.</li>\n<li>Select \"Apollo GraphQL\" at CODE Preview > TOPPINGS to create Apollo Server for GraphQL</li>\n</ul>\n<img width=\"697\"  src=\"https://user-images.githubusercontent.com/487999/191050930-bca7a84e-ab92-4c41-a746-a4b40da3e58d.png\">\n<ul>\n<li>Check if the apollo microservice has been created and push the code to your Git.</li>\n<li>Open Project IDE.</li>\n<li>After Gitpod is loaded, check the source codes of the model committed:</li>\n</ul>\n<ul>\n<li>Run order, inventory, and delivery service.</li>\n<li>Run order service(8081)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Run inventory service(8082)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Run delivery service(8083)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd delivery\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Register product and make an order for the product.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8082/inventories id=1 stock=10\n\nhttp localhost:8081/orders productId=1 qty=1 customerId=&quot;1@uengine.org&quot;</code></pre>\n<ul>\n<li>Run GraphQL(8089)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd apollo_graphql\nnpm install\nyarn start</code></pre>\n<ul>\n<li>\n<p>GraphQL Playground </p>\n<blockquote>\n<p>A workbench for Resolver specifications, data request and testing written GraphQL type</p>\n</blockquote>\n</li>\n<li>Access to WebUI through Remote Explorer.</li>\n</ul>\n<img width=\"1161\" alt=\"스크린샷 2022-09-23 오후 3 48 53\" src=\"https://user-images.githubusercontent.com/58163635/191912194-88d4b4a0-44fd-4f13-a014-73fc0b503797.png\">\n<p>** It could be only inquired when the service is \"Public\"</p>\n<h3 id=\"inquire-the-service\"><a href=\"#inquire-the-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inquire the Service</h3>\n<ul>\n<li>total order service</li>\n</ul>\n<pre class=\"language-gql\"><code class=\"language-gql\">query getOrders {\n  orders {\n    productId\n    qty\n  }\n}</code></pre>\n<ul>\n<li>single order service( id=1 )</li>\n</ul>\n<pre class=\"language-gql\"><code class=\"language-gql\">query getOrderById {\n  order(id: 1) {\n    productId\n    qty\n  }\n}</code></pre>\n<ul>\n<li>Inquiring complex service</li>\n</ul>\n<p>Fill in the Resolver strategy about subquery to inquire complex service:</p>\n<ul>\n<li>resolver.ts</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">const resolvers = {\n    Order: {\n        delivery: async (root, {deliveryId}, {dataSources}) =&gt; {\n            try {\n                if (root &amp;&amp; root._links.self.href) {\n                    var parseLink = root._links.self.href.split(&#39;/&#39;)\n                    var getOrderId = parseLink[parseLink.length - 1]\n                    var deliveries = await dataSources.deliveryRestApi.getDeliveries();\n\n                    if(deliveries){\n                        var rtnVal = null\n                        Object.values(deliveries).forEach(function (delivery) {\n                            if(delivery &amp;&amp; delivery.orderId == getOrderId){\n                                rtnVal = delivery\n                            }\n                        })\n                        return rtnVal\n                    }\n                }\n                return null;\n            } catch (e) {\n                return null;\n            }\n        },\n        \n        inventory: async (root, {productId}, {dataSources}) =&gt; {\n            if (!productId) productId = root.productId\n\n            if (productId) {\n                return await dataSources.inventoryRestApi.getInventory(productId);\n            }\n            return null;\n        }\n    },\n    Inventory: {\n        // set Query\n    },\n    Delivery: {\n        // set Query\n    },\n\n    Query: {\n        order : async (_, { id }, { dataSources }) =&gt; {\n            return dataSources.orderRestApi.getOrder(id);\n        },\n        orders : async (_, __, { dataSources }) =&gt; {\n            return dataSources.orderRestApi.getOrders();\n        },\n        inventory : async (_, { id }, { dataSources }) =&gt; {\n            return dataSources.inventoryRestApi.getInventory(id);\n        },\n        inventories : async (_, __, { dataSources }) =&gt; {\n            return dataSources.inventoryRestApi.getInventories();\n        },\n        delivery : async (_, { id }, { dataSources }) =&gt; {\n            return dataSources.deliveryRestApi.getDelivery(id);\n        },\n        deliveries : async (_, __, { dataSources }) =&gt; {\n            return dataSources.deliveryRestApi.getDeliveries();\n        },\n    }\n};\n\nexport default resolvers;</code></pre>\n<ul>\n<li>Add attributes at Type :  typeDefs.ts</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    type Order {\n    \tid: Long! \n\t\t\tproductId: String \n\t\t\tqty: Integer \n\t\t\tcustomerId: String \n\t\t\tamount: Double \n\t\t\tstatus: String \n\t\t\taddress: String\n      delivery: Delivery\n      inventory: Inventory\n    }</code></pre>\n<p>Inquire the informations of product and delivery related to order service</p>\n<pre class=\"language-gql\"><code class=\"language-gql\">query {\n  orders {\n    qty\n    customerId\n    \n    delivery {\n      orderId\n    }\n\n    inventory{\n      stock\n    }\n  }\n\n}</code></pre>\n<ul>\n<li>A Result</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;data&quot;: {\n    &quot;orders&quot;: [\n      {\n        &quot;qty&quot;: 1,\n        &quot;customerId&quot;: &quot;1@uengine.org&quot;,\n        &quot;delivery&quot;: {\n          &quot;orderId&quot;: 1\n        },\n        &quot;inventory&quot;: {\n          &quot;stock&quot;: 9\n        }\n      }\n    ]\n  }\n}</code></pre>\n<h4 id=\"refer-graphql-file\"><a href=\"#refer-graphql-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Refer GraphQL file</h4>\n<ol>\n<li>src/graphql/resolvers.js </li>\n</ol>\n<ul>\n<li>Implement the specific process of getting data  </li>\n<li>Designate the action of service as a function, return data at the request(Query), fill in the Query or Implementation which is mutating(write, edit, delete)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">ex)\nconst resolvers = {\n  //Declare to call the information of object type from typeDefs(Order, Query, Product)\n  \n  Query: {\n     //...\n  } \n  Order: {\n      deliveries: (root, args, {dataSources}) =&gt; {}\n\n      //  function: (parent, args, context, info) =&gt; {}\n      //  * parent  : the return value of resolver about path.\n      //  * args    : args or {parameter} when calling function.\n      //  * context : \n            an entity delivered to every resolvers running for specific work,\n            sharing same context with DB connection.\n          {dataSources}: calling data connected to xxx-rest-api.js.\n      //  * info    : working status such as field name, a path from route to field.\n  }\n}</code></pre>\n<ol start=\"2\">\n<li>\n<p>src/graphql/typeDefs.js</p>\n<ul>\n<li>Type of data and requests for GraphQL specification (created by gql)</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>Type Definitions</li>\n<li>Declare object type and field name</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">type Delivery {\n        id: Long!\n        orderId: Long \n        productId: Long \n        customerId: String \n        deliveryAddress: String \n        deliveryState: String \n        orders: [Order]\n        order(orderId: Long): Order\n    }\n  \n    type Order {\n        id: Long! \n        productId: Long\n        customerId: String\n        state: String\n        deliveries: [Delivery]\n        delivery(deliveryId: Long): Delivery\n    }\n\n    // []: list\n    //  !: required value</code></pre>\n<ol start=\"3\">\n<li>\n<p>src/restApiServer/xxx-rest-api.js</p>\n<ul>\n<li>Set calling route and function for the service of apollo-datasource-rest.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">import {RESTDataSource} from &#39;apollo-datasource-rest&#39;;\n// apollo-datasource-rest module\n\nclass orderRestApi extends RESTDataSource {\n    constructor() {\n        super();\n        this.baseURL = &#39;http://order:8080&#39;;\n        // call address info of the service.\n    }\n\n    // function name() \n    async getOrders() {\n        const data = await this.get(&#39;/orders&#39;, {})\n        // url call info after baseURL.\n\n        var value = this.stringToJson(data);\n        // Change call info : String to Json. \n        \n        return value\n        // return call info.\n    }\n\n    async getOrder(id) {\n        // ...\n    }\n\n    stringToJson(str){\n        if(typeof str == &#39;string&#39;){\n            str = JSON.parse(str);\n        }\n        return str;\n    }\n}</code></pre>\n<ol start=\"4\">\n<li>\n<p>src/index.js</p>\n<ul>\n<li>Mapping declaration call.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">import {ApolloServer} from &#39;apollo-server&#39;;\nimport resolvers from &#39;./graphql/resolvers.js&#39;;\nimport typeDefs from &#39;./graphql/typeDefs.js&#39;;\nimport orderRestApi from &#39;./restApiServer/order-rest-api.js&#39;\nimport deliveryRestApi from &#39;./restApiServer/delivery-rest-api.js&#39;\n\nconst server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    dataSources: () =&gt; ({\n        orderRestApi: new orderRestApi(),\n        deliveryRestApi: new deliveryRestApi()\n    }),\n    // declare dataSources xxxRestApi call info.\n});\n\nserver.listen({\n    port: 8089,\n}).then(({url}) =&gt; {\n    console.log(`🚀  Server ready at ${url}`);\n});</code></pre>\n<h3 id=\"mission-make-resolver-more-efficient-to-inquire-delivery\"><a href=\"#mission-make-resolver-more-efficient-to-inquire-delivery\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mission: Make resolver more efficient to inquire delivery</h3>\n<p>For now, the logic of finding delivery for an order is comparing all deliveries with orderId, which is inefficient. Improve the codes from data source and delivery service to make it get the result inquired from Backend DB through findByOrderId:</p>\n<pre class=\"language-text\"><code class=\"language-text\">const resolvers = {\n    Order: {\n        delivery: async (root, {deliveryId}, {dataSources}) =&gt; {\n            var parseLink = root._links.self.href.split(&#39;/&#39;)\n            var orderId = parseLink[parseLink.length - 1]\n            var deliveries = await dataSources.deliveryRestApi.findByOrderId(orderId);\n\n            if(deliveries &amp;&amp; deliveries.length&gt;0)\n                return deliveries[0];\n\n            return null;\n        },\n      ...</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Data Projection with GraphQL","anchor":"#data-projection-with-graphql"},{"depth":3,"value":"Integrate Back-End Data with GraphQL","anchor":"#integrate-back-end-data-with-graphql"},{"depth":3,"value":"Inquire the Service","anchor":"#inquire-the-service"},{"depth":4,"value":"Refer GraphQL file","anchor":"#refer-graphql-file"},{"depth":3,"value":"Mission: Make resolver more efficient to inquire delivery","anchor":"#mission-make-resolver-more-efficient-to-inquire-delivery"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}