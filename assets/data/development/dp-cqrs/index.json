{"hash":"764270c9cde89f2821682f29cb99e4f3fffdc351","data":{"markdownPage":{"id":"252f6ccdbd5666d2c445a17485eb48d0","title":"Data Projection with CQRS","description":"","path":"/development/dp-cqrs/","timeToRead":2,"content":"<h1 id=\"data-projection-with-cqrs\"><a href=\"#data-projection-with-cqrs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Projection with CQRS</h1>\n<p>We will design a Query Model (Materialized View) based on the detailed models of the Order Service and Delivery Service.</p>\n<h2 id=\"eventstorming-model-preparation\"><a href=\"#eventstorming-model-preparation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EventStorming Model Preparation</h2>\n<ul>\n<li>Open the model in a new tab using the link :\n<strong><a href=\"https://www.msaez.io/#/storming/labcqrs-231022\" target=\"_blank\" rel=\"noopener noreferrer\">Model Link</a></strong></li>\n<li>If the model doesn't load, click on the avatar icon (person shape) in the upper right, log in with your <strong>Github</strong> account, and then reload.</li>\n<li>Verify that the model, as needed for the level, is displayed.</li>\n<li>If the loaded model doesn't show the sticker list in the right palette, click the FORK icon in the top menu to clone the given model.</li>\n</ul>\n<p><img src=\"https://github.com/acmexii/demo/assets/35618409/c9a4575c-d8e2-424b-9587-7ca789dca2e1\" alt=\"image\"></p>\n<ul>\n<li>Confirm that the sticker list is now visible in the right palette.</li>\n</ul>\n<h2 id=\"cqrs-modeling\"><a href=\"#cqrs-modeling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CQRS Modeling</h2>\n<ul>\n<li>Assume the establishment of a new Customer Center team launching the <strong>MyPage</strong> service.</li>\n<li>Design a Query Model (Materialized View) based on the detailed models of the Order Service and Delivery Service.</li>\n</ul>\n<h3 id=\"modeling\"><a href=\"#modeling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Modeling</h3>\n<ul>\n<li>Add the <strong>customercenter</strong> BC.</li>\n<li>Add a green sticker (<strong>MyPage</strong>) for the Read Model.</li>\n<li>\n<p>Define Read Model attributes:</p>\n<blockquote>\n<p>Long orderId\nString productId\nString deliveryStatus\nString orderStatus</p>\n</blockquote>\n</li>\n</ul>\n<img width=\"982\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/191055790-5d6a529f-e2f7-49ab-8ee0-74d371f06090.png\">\n<ul>\n<li>Detailed design for Read Model CRUD</li>\n</ul>\n<img width=\"434\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/191056403-fbdec62b-42ea-4261-8e4e-b631c6c6779a.png\">\n<h3 id=\"code-preview\"><a href=\"#code-preview\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code Preview</h3>\n<ul>\n<li>Review the View Model code after the detailed design.</li>\n<li>Push to my GitHub and load it into the GitPod environment.</li>\n</ul>\n<h3 id=\"complete-service-codes\"><a href=\"#complete-service-codes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Complete Service codes</h3>\n<ul>\n<li>Complete the domain code for the Delivery microservice.</li>\n<li>Delivery.java > addToDeliveryList Port method</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">Delivery delivery = new Delivery();\ndelivery.setAddress(orderPlaced.getAddress());\ndelivery.setQuantity(orderPlaced.getQty());\ndelivery.setCustomerId(orderPlaced.getCustomerId());\nrepository().save(delivery);</code></pre>\n<ul>\n<li>For the Customer microservice, configure automatic ID generation in MyPage.java:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"> @GeneratedValue(strategy=GenerationType.AUTO)  // Uncomment this line</code></pre>\n<h3 id=\"run-microservices\"><a href=\"#run-microservices\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Run Microservices</h3>\n<ul>\n<li>Run the Order, Delivery, and Customer Center microservices individually:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run</code></pre>\n<ul>\n<li>If there's an error in the customer center, check the implementation of ViewHandler.java (findByOrderId --> findById):</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@StreamListener(KafkaProcessor.INPUT)\npublic void whenDeliveryStarted_then_UPDATE_1(@Payload DeliveryStarted deliveryStarted) {\n    try {\n        if (!deliveryStarted.validate()) return;\n            // View object lookup\n        Optional&lt;MyPage&gt; myPageOptional = myPageRepository.findById(deliveryStarted.getOrderId());\n\n        if( myPageOptional.isPresent()) {\n                MyPage myPage = myPageOptional.get();\n        // Set the eventDirectValue of the event to the view object\n            myPage.setDeliveryStatus(&quot;Started&quot;);    \n            // Save to the view repository\n                myPageRepository.save(myPage);\n            }\n\n\n    }catch (Exception e){\n        e.printStackTrace();\n    }\n}</code></pre>\n<ul>\n<li>After registering one order, check the contents of MyPage:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/orders productId=1 qty=1\nhttp :8085/myPages</code></pre>\n<ul>\n<li>Shut down the Delivery service (8084) and verify that the service remains stable by checking the contents of MyPage.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Data Projection with CQRS","anchor":"#data-projection-with-cqrs"},{"depth":2,"value":"EventStorming Model Preparation","anchor":"#eventstorming-model-preparation"},{"depth":2,"value":"CQRS Modeling","anchor":"#cqrs-modeling"},{"depth":3,"value":"Modeling","anchor":"#modeling"},{"depth":3,"value":"Code Preview","anchor":"#code-preview"},{"depth":3,"value":"Complete Service codes","anchor":"#complete-service-codes"},{"depth":3,"value":"Run Microservices","anchor":"#run-microservices"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/pbc-marketplace/","title":"PBCs(Packaged Business Capabilities) for Composable Enterprise Implementation"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"On-Premises Installation Guide"}},{"node":{"path":"/tool/model-driven/","title":"Code Generation"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/event-monitoring/","title":"Event Monitoring"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/bc-domain-gen/","title":"Natural Language-based Bounded Context & Domain Design AI"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/tool/aggregate-design/","title":"Aggregate Design"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/info/pricing/","title":"Pricing"}},{"node":{"path":"/info/partnership/","title":"Partner Program"}},{"node":{"path":"/info/consulting/","title":"Consulting"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/info/company/","title":"Cases"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"Creating Custom Templates in MSAEZ"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"Loop & Conditional Statement"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}