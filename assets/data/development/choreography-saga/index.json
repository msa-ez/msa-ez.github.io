{"hash":"a12e502c9392790ed2b6909ce3e2f6ba93e467c2","data":{"markdownPage":{"id":"f6cee4eb7a576512959970274e4db3b7","title":"Choreography Saga","description":"","path":"/development/choreography-saga/","timeToRead":5,"content":"<h1 id=\"choreography-saga\"><a href=\"#choreography-saga\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Choreography Saga</h1>\n<p>We will go through the process of implementing the 12st Mall using Axon, a specialized framework supporting Event Sourcing, Domain-Driven Development, and CQRS.</p>\n<p>Specifically, we'll learn about framework-level code that orchestrates commands based on domain events.</p>\n<h3 id=\"eventstorming-model-preparation\"><a href=\"#eventstorming-model-preparation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EventStorming Model Preparation</h3>\n<ul>\n<li>Open the model in a new tab using the link :\n<strong><a href=\"https://www.msaez.io/#/storming/axon-mallorchestrationsaga:v1.5\" target=\"_blank\" rel=\"noopener noreferrer\">Model Link</a></strong></li>\n<li>If the model doesn't load, click on the avatar icon (person shape) in the upper right, log in with your <strong>Github</strong> account, and then reload.</li>\n<li>Verify that the stickers appear in the right palette area.</li>\n<li>Click on the Fork icon in the top menu to clone the model.</li>\n</ul>\n<h3 id=\"orchestration-saga-scenario\"><a href=\"#orchestration-saga-scenario\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Orchestration Saga Scenario</h3>\n<ul>\n<li>An OrderPlaced event is generated in response to an order command.</li>\n<li>The Order Saga process is triggered by the OrderPlaced event.</li>\n<li>The Saga Process invokes the start delivery command and generates a DeliveryStarted event.</li>\n<li>Subsequently, a stock deduction command is invoked, leading to the creation of a StockDecreased event.</li>\n<li>The Saga Process concludes with the procedure to update the final order status.</li>\n<li>If an error occurs during any command invocation, Compensation Logic is executed for each.</li>\n</ul>\n<h3 id=\"saga-modeling\"><a href=\"#saga-modeling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Saga Modeling</h3>\n<ul>\n<li>Click on the Fork menu at the top.</li>\n<li>Orchestrate the cloned model as follows:</li>\n</ul>\n<h3 id=\"process-orchestration\"><a href=\"#process-orchestration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Process Orchestration</h3>\n<p>The rules for orchestrating the Saga model are as follows:</p>\n<blockquote>\n<ol>\n<li>Connect stickers with lines: 'From Sticker' > 'To Sticker'</li>\n<li>Click on mapping relations to label them. Labels indicate the execution order.</li>\n<li>Among the labels, processes marked with '가' are Compensation Trx processes.</li>\n</ol>\n<ul>\n<li>OrderPlaced > Order Saga, (1.start)</li>\n<li>Order Saga > start delivery, (2)</li>\n<li>DeliveryStarted > Order Saga, (3)</li>\n<li>Order Saga > decrease stock, (4)</li>\n<li>StockDecreased > Order Saga, (5)</li>\n<li>Order Saga > update status, (6)</li>\n<li>OrderCompleted > Order Saga, (7.end)</li>\n<li>Order Saga > order cancel, (2')</li>\n<li>Order Saga > cancel delivery, (4')</li>\n</ul>\n</blockquote>\n<h4 id=\"the-orchestrated-saga-model-looks-like-this\"><a href=\"#the-orchestrated-saga-model-looks-like-this\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The orchestrated Saga model looks like this:</h4>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/229645326-3a24d5e3-81f3-4ecb-9e6f-2101302eb697.png\" alt=\"image\"></p>\n<h3 id=\"code-generation-and-push-to-my-git-repository\"><a href=\"#code-generation-and-push-to-my-git-repository\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code Generation and Push to My Git Repository</h3>\n<ul>\n<li>Click on Git icon in Code Preview to push the generated code to your repository.\n<img src=\"https://user-images.githubusercontent.com/35618409/229663138-ec1a8a2c-a50f-4c3c-ba4c-75c1ea9057ad.png\" alt=\"image\"></li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/229649084-15d388b9-3246-43b2-956c-d1012f47ce12.png\" alt=\"image\"></p>\n<ul>\n<li>GitPod 환경에서 로딩한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/229649200-cd48e7fb-54bb-46af-9806-0f893d9375bb.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"verify-axon-server\"><a href=\"#verify-axon-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Verify Axon Server</h3>\n<h4 id=\"infra--docker-composeyml\"><a href=\"#infra--docker-composeyml\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>infra > docker-compose.yml</h4>\n<ul>\n<li>Axon Server uses port 8024 for the dashboard and 8124 for gRPC messaging.</li>\n<li>A Token Store (MySQL) for managing offset tokens is created during Lab execution.</li>\n</ul>\n<h2 id=\"orchestration-saga-code-completion\"><a href=\"#orchestration-saga-code-completion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Orchestration Saga Code Completion</h2>\n<h3 id=\"product-service\"><a href=\"#product-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Product Service</h3>\n<p>Complete the business logic in the product domain code.</p>\n<ul>\n<li>Add code to throw a domain error if there is insufficient stock in the @DecreaseStockCommand.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># ProductAggregate - @DecreaseStockCommand throw an exception for insufficient stock\n\tif(this.getStock() &lt; command.getStock()) throw new IllegalStateException(&quot;Out of Stock. !&quot;);  // Add this line</code></pre>\n<ul>\n<li>Add the following code to ProductAggregate.java in the product service:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># @EventSourcingHandler :: StockIncreasedEvent : \n    setStock(getStock() + event.getStock());  // Add this line\n\n#  @EventSourcingHandler :: StockDecreasedEvent : \n    setStock(getStock() - event.getStock());  // Add this line</code></pre>\n<h3 id=\"order-service\"><a href=\"#order-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order Service</h3>\n<p>Complete the business logic in the order domain code.</p>\n<ul>\n<li>Add the following code to OrderAggregate.java in the order service:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># @EventSourcingHandler :: OrderPlacedEvent :\n     setStatus(&quot;OrderPlaced&quot;); \t\t\t// Add this line\n# @EventSourcingHandler :: OrderCompletedEvent : \n     setStatus(&quot;OrderCompleted&quot;); \t\t// Add this line\n# @EventSourcingHandler :: OrderCancelledEvent :      \n      setStatus(&quot;OrderCancelled&quot;);\t\t// Add this line</code></pre>\n<h3 id=\"delivery-service\"><a href=\"#delivery-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Delivery Service</h3>\n<p>Complete the business logic in the delivery domain code.</p>\n<ul>\n<li>Add the following code to DeliveryAggregate.java in the delivery service:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># @EventSourcingHandler :: DeliveryStartedEvent :\n      setStatus(&quot;DeliveryStarted&quot;); \t\t// Add this line\n# @EventSourcingHandler :: DeliveryCancelledEvent : \n      setStatus(&quot;DeliveryCancelled&quot;); \t\t// Add this line</code></pre>\n<h3 id=\"ordersaga\"><a href=\"#ordersaga\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OrderSaga</h3>\n<p>Complete the OrderSaga code to perform the order orchestration.</p>\n<h4 id=\"1-saga-start\"><a href=\"#1-saga-start\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Saga Start</h4>\n<ul>\n<li>Set correlation key from the OrderPlaced event: Line 24</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@SagaEventHandler(associationProperty = &quot;orderId&quot;)</code></pre>\n<h4 id=\"2-generate-and-invoke-start-delivery-command-line-27\"><a href=\"#2-generate-and-invoke-start-delivery-command-line-27\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Generate and Invoke Start Delivery Command: Line 27</h4>\n<pre class=\"language-text\"><code class=\"language-text\">command.setOrderId(event.getOrderId());\ncommand.setProductId(event.getProductId());\ncommand.setQty(event.getQty());\ncommand.setUserId(event.getUserId());\n\n# If delivery fails, handle compensation: OrderCancelCommand\norderCancelCommand.setOrderId(event.getOrderId());  \t// Add this line</code></pre>\n<h4 id=\"3-set-correlation-key-from-deliverystartedevent\"><a href=\"#3-set-correlation-key-from-deliverystartedevent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Set Correlation Key from DeliveryStartedEvent</h4>\n<pre class=\"language-text\"><code class=\"language-text\">@SagaEventHandler(associationProperty = &quot;orderId&quot;)</code></pre>\n<h4 id=\"4-generate-and-invoke-decrease-stock-command\"><a href=\"#4-generate-and-invoke-decrease-stock-command\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Generate and Invoke Decrease Stock Command</h4>\n<pre class=\"language-text\"><code class=\"language-text\">command.setProductId(event.getProductId());\ncommand.setStock(event.getQty());\t\ncommand.setOrderId(event.getOrderId());\n\n# If stock deduction fails, handle compensation: CancelDeliveryCommand\ncancelDeliveryCommand.setDeliveryId(event.getDeliveryId());\t// Add this line</code></pre>\n<h4 id=\"5-set-correlation-key-from-stockdecreasedevent\"><a href=\"#5-set-correlation-key-from-stockdecreasedevent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Set Correlation Key from StockDecreasedEvent</h4>\n<pre class=\"language-text\"><code class=\"language-text\">@SagaEventHandler(associationProperty = &quot;orderId&quot;)</code></pre>\n<h4 id=\"6-generate-and-invoke-order-completed-command\"><a href=\"#6-generate-and-invoke-order-completed-command\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. Generate and Invoke Order Completed Command</h4>\n<pre class=\"language-text\"><code class=\"language-text\">command.setOrderId(event.getOrderId());</code></pre>\n<h4 id=\"7-saga-end\"><a href=\"#7-saga-end\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7. Saga End</h4>\n<ul>\n<li>Set Correlation Key from OrderCompletedEvent</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@SagaEventHandler(associationProperty = &quot;orderId&quot;)</code></pre>\n<ul>\n<li>End Saga Process</li>\n</ul>\n<h2 id=\"12st-mall-test\"><a href=\"#12st-mall-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12st Mall Test</h2>\n<ul>\n<li>Test the Axon Saga-based mall using Rest API.</li>\n<li>First, build the Common API:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd common-api\nmvn clean install</code></pre>\n<ul>\n<li>Run each microservice:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># new terminal\ncd order\nmvn clean spring-boot:run\n\n# new terminal\ncd product\nmvn clean spring-boot:run\n\n# new terminal\ncd delivery\nmvn clean spring-boot:run</code></pre>\n<ul>\n<li>Register a test product in the product service (:8082):</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># new terminal\nhttp POST :8082/products productName=TV stock=100</code></pre>\n<ul>\n<li>Copy the product ID.\n<img src=\"https://user-images.githubusercontent.com/35618409/229345799-6a86743c-d3b1-43b7-9a94-91c4e50cfd9b.png\" alt=\"image\"></li>\n<li>Create an order for purchasing 10 TVs using the copied product ID:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST :8081/orders productId=[상품 Id] productName=TV qty=10 userId=1001</code></pre>\n<ul>\n<li>Copy the order ID.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/229346264-89d2c227-5dc8-454d-acb0-1c24bc0da63d.png\" alt=\"image\"></p>\n<h2 id=\"12st-mall-saga-compensation-verification\"><a href=\"#12st-mall-saga-compensation-verification\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12st Mall Saga Compensation Verification</h2>\n<h3 id=\"create-an-order\"><a href=\"#create-an-order\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Create an Order</h3>\n<ul>\n<li>Create an order to purchase 100 TVs using the product ID, and copy the order number:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST :8081/orders productId=[상품 Id] productName=TV qty=100 userId=1001</code></pre>\n<ul>\n<li>The product service returns an error since the quantity exceeds the available stock.</li>\n</ul>\n<ul>\n<li>Check the final status and event history of the created order using the order number:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http GET :8081/orders/[Order Number]\nhttp GET :8081/orders/[Order Number]/events</code></pre>\n<ul>\n<li>Check the delivery status in the delivery service:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http GET :8083/deliveries</code></pre>\n<h3 id=\"extension-mission---order-service-debugging\"><a href=\"#extension-mission---order-service-debugging\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Extension Mission] - Order Service Debugging</h3>\n<ul>\n<li>Stop the order service.</li>\n<li>Add breakpoints for each SagaEventHandler in OrderSaga.</li>\n<li>Run the order service in debug mode.</li>\n<li>Create a new order and observe the orchestration flow by checking the Debug Points.</li>\n<li>Test by placing an order with a quantity greater than the available stock.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Choreography Saga","anchor":"#choreography-saga"},{"depth":3,"value":"EventStorming Model Preparation","anchor":"#eventstorming-model-preparation"},{"depth":3,"value":"Orchestration Saga Scenario","anchor":"#orchestration-saga-scenario"},{"depth":3,"value":"Saga Modeling","anchor":"#saga-modeling"},{"depth":3,"value":"Process Orchestration","anchor":"#process-orchestration"},{"depth":4,"value":"The orchestrated Saga model looks like this:","anchor":"#the-orchestrated-saga-model-looks-like-this"},{"depth":3,"value":"Code Generation and Push to My Git Repository","anchor":"#code-generation-and-push-to-my-git-repository"},{"depth":3,"value":"Verify Axon Server","anchor":"#verify-axon-server"},{"depth":4,"value":"infra > docker-compose.yml","anchor":"#infra--docker-composeyml"},{"depth":2,"value":"Orchestration Saga Code Completion","anchor":"#orchestration-saga-code-completion"},{"depth":3,"value":"Product Service","anchor":"#product-service"},{"depth":3,"value":"Order Service","anchor":"#order-service"},{"depth":3,"value":"Delivery Service","anchor":"#delivery-service"},{"depth":3,"value":"OrderSaga","anchor":"#ordersaga"},{"depth":4,"value":"1. Saga Start","anchor":"#1-saga-start"},{"depth":4,"value":"2. Generate and Invoke Start Delivery Command: Line 27","anchor":"#2-generate-and-invoke-start-delivery-command-line-27"},{"depth":4,"value":"3. Set Correlation Key from DeliveryStartedEvent","anchor":"#3-set-correlation-key-from-deliverystartedevent"},{"depth":4,"value":"4. Generate and Invoke Decrease Stock Command","anchor":"#4-generate-and-invoke-decrease-stock-command"},{"depth":4,"value":"5. Set Correlation Key from StockDecreasedEvent","anchor":"#5-set-correlation-key-from-stockdecreasedevent"},{"depth":4,"value":"6. Generate and Invoke Order Completed Command","anchor":"#6-generate-and-invoke-order-completed-command"},{"depth":4,"value":"7. Saga End","anchor":"#7-saga-end"},{"depth":2,"value":"12st Mall Test","anchor":"#12st-mall-test"},{"depth":2,"value":"12st Mall Saga Compensation Verification","anchor":"#12st-mall-saga-compensation-verification"},{"depth":3,"value":"Create an Order","anchor":"#create-an-order"},{"depth":3,"value":" - Order Service Debugging","anchor":"#extension-mission---order-service-debugging"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/pbc-marketplace/","title":"Composable Enterprise Implementation for PBCs(Packaged Business Capabilities)"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"on-prem 설치 설명서"}},{"node":{"path":"/tool/model-driven/","title":"Code Generation"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/event-monitoring/","title":"Event Monitoring"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/bc-domain-gen/","title":"자연어 기반 Bounded Context & 도메인 설계 AI"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/aggregate-design/","title":"애그리거트(Aggregate) 설계"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/info/pricing/","title":"Pricing"}},{"node":{"path":"/info/partnership/","title":"Partner Program"}},{"node":{"path":"/info/company/","title":"Cases"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"Creating Custom Templates in MSAEZ"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"Loop & Conditional Statement"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}