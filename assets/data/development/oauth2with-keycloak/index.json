{"hash":"663eaccb63b0f6c919ea51a2d168db8f92add159","data":{"markdownPage":{"id":"4cf4209d2325d07d12f0b8752dd5411b","title":"JWT Token-based Authentication and Authorization","description":"","path":"/development/oauth2with-keycloak/","timeToRead":5,"content":"<h1 id=\"jwt-token-based-authentication-and-authorization\"><a href=\"#jwt-token-based-authentication-and-authorization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token-based Authentication and Authorization</h1>\n<p>In this hands-on exercise, we will implement Single Sign-On using microservices and the OAuth2 components: Authorization Server, Client, and Resource Server. The Gateway serves as the single entry point, acting as both the Client and Resource Server. We will utilize Keycloak as the Authorization Server.</p>\n<h2 id=\"jwt-based-authentication-with-keycloak\"><a href=\"#jwt-based-authentication-with-keycloak\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT-based Authentication with Keycloak</h2>\n<ul>\n<li>We will practice OAuth2.0-based Spring Security with interactions between the Resource Owner, Client, Authorization Server, and Resource Server.</li>\n<li>JWT-based Access Tokens will be used.</li>\n<li>Keycloak (<a href=\"https://www.keycloak.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.keycloak.org/</a>) will serve as the Authentication and Authorization Server.</li>\n</ul>\n<h2 id=\"event-storming-model-preparation\"><a href=\"#event-storming-model-preparation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event Storming Model Preparation</h2>\n<ul>\n<li>Load the model from the following link in a new tab\n<a href=\"https://www.msaez.io/#/storming/labshopoauthkeycloak-0821\" target=\"_blank\" rel=\"noopener noreferrer\">Model Link</a></li>\n<li>If the model doesn't load in the browser, click the avatar icon in the upper right corner, log in with your GitHub account, and reload.</li>\n<li>Ensure the necessary Event Storming basic model is displayed in the right palette.</li>\n<li>Clone the loaded model by clicking the FORK icon in the top menu.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/08eb03f8-c7e3-42e8-a13c-4d473de56f1a\" alt=\"image\"></li>\n<li>Confirm that the stickers list appears in the right palette.</li>\n</ul>\n<h3 id=\"keycloak-topping-configuration-and-code-push\"><a href=\"#keycloak-topping-configuration-and-code-push\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak Topping Configuration and Code Push</h3>\n<ul>\n<li>Click the \"CODE\" button in the upper right corner and select \"TOPPINGS.\"</li>\n<li>Make sure 'Oauth by Keycloak' is checked.</li>\n<li>\n<p>Click on the 'Push to Git' menu in the top menu. In the dialog box that appears, select 'Create New Repository' and click 'CREATE.'</p>\n<blockquote>\n<p>Since you logged in with your GitHub account initially, your Git information is automatically displayed.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/557f256e-9949-4546-bcde-d3d405f448df\" alt=\"image\"></p>\n</blockquote>\n</li>\n<li>The model-based code will be pushed to your GitHub.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/6581f400-adb8-4963-bf03-511d459c5e32\" alt=\"image\"></li>\n<li>Click on 'IDE' in the left menu, then click 'Open GitPod' from the Cloud IDE list.</li>\n</ul>\n<h3 id=\"run-keycloak-server\"><a href=\"#run-keycloak-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Run Keycloak Server</h3>\n<ul>\n<li>Move to the keycloak folder in the Cloud IDE terminal, create the container, and start the Keycloak server.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token builtin class-name\">cd</span> keycloak\n<span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></code></pre>\n<ul>\n<li>The Keycloak server's 9090 port should appear in the list.</li>\n</ul>\n<h4 id=\"open-and-connect-to-keycloak-server\"><a href=\"#open-and-connect-to-keycloak-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Open and Connect to Keycloak Server</h4>\n<ul>\n<li>Click the port list at the bottom right to open the 9090 port used by Keycloak (second lock icon).\n<img src=\"https://user-images.githubusercontent.com/35618409/215235038-8e362605-75b5-4271-923d-d2c0cd3fffbf.png\" alt=\"image\"></li>\n<li>Click the first icon to copy the full URL of Keycloak to the clipboard.</li>\n<li>Open a web browser, paste the URL, and log in with the configured administrator information (admin / admin).\n<img src=\"https://user-images.githubusercontent.com/35618409/190956899-9c7efca3-04ac-4f11-851c-1e199debaa02.png\" alt=\"image\"></li>\n<li>The Keycloak main screen should appear as shown below.\n<img src=\"https://user-images.githubusercontent.com/35618409/190957013-3a6669d9-0928-498b-9529-cbac6fad8cd5.png\" alt=\"image\"></li>\n</ul>\n<h2 id=\"oauth-client-configuration\"><a href=\"#oauth-client-configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth Client Configuration</h2>\n<h3 id=\"keycloak-configuration\"><a href=\"#keycloak-configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak Configuration</h3>\n<ul>\n<li>In the Master Realm, click on the 'Tokens' tab and set the Access Token Lifespan to 1 hour.</li>\n<li>After modification, click 'Save' at the bottom.</li>\n</ul>\n<h3 id=\"oauth-client-configuration-1\"><a href=\"#oauth-client-configuration-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth Client Configuration</h3>\n<ul>\n<li>In the Keycloak server's left menu, click on Clients and add a new client named '12stmall.'\n<img src=\"https://user-images.githubusercontent.com/35618409/190959198-145da6e6-f82d-412c-843c-9f5caf47c09e.png\" alt=\"image\">\n</li>\n<li>Set the Access Type of the registered client to 'confidential.'\n<img src=\"https://user-images.githubusercontent.com/35618409/190959505-5adf84bf-cda5-4cd9-ba90-e8c7d806a8dc.png\" alt=\"image\">\n</li>\n<li>In the Valid Redirect URIs settings below, enter the following:</li>\n<li>Rule: Gateway Endpoint URL + /login/oauth2/code/ + ClientId(12stmall)</li>\n<li>Click the copy icon of the first URL of the 9090 port at the bottom right (replace 9090 with the Gateway port, 8088, in GitPod).\n<img src=\"https://user-images.githubusercontent.com/35618409/191009706-1033fa72-194b-4806-b9e7-33cffcffcf42.png\" alt=\"image\"></li>\n<li>Add the Valid Redirect URIs information to the Gateway later.</li>\n<li>After saving, check the Credentials tab. The Secret (password) will be used in the Gateway.\n<img src=\"https://user-images.githubusercontent.com/35618409/190960454-9348d122-30d3-49b0-b63d-6389107a305e.png\" alt=\"image\">\n</li>\n</ul>\n<h3 id=\"gateway-client-configuration\"><a href=\"#gateway-client-configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gateway Client Configuration</h3>\n<ul>\n<li>Set the required template environment information for Keycloak Client configuration.</li>\n<li>In the Gateway's applicaion.yml, set the KeyCloak SSO server's endpoint.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">keycloak-client:\n  server-url: https://9090-acmexii-labshopoauthkey-sgn5ady40al.ws-us94.gitpod.io\n  realm: master</code></pre>\n<blockquote>\n<p>Be careful not to have a trailing slash in the server-url value.</p>\n</blockquote>\n<ul>\n<li>Complete the Spring OAuth2 Security configuration.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  security:\n    oauth2:\n      client:\n        provider:\n          keycloak:\n            issuer-uri: ${keycloak-client.server-url}/realms/${keycloak-client.realm}\n            user-name-attribute: preferred_username\n        registration:\n          keycloak:\n            client-id: &quot;&lt;client-id&gt;&quot;\n            client-secret: \n            redirect-uri: &quot;gateway-path/login/oauth2/code/client-name&quot;\n            authorization-grant-type: authorization_code\n            scope: openid\n      resourceserver:\n        jwt:\n          jwk-set-uri: ${keycloak-client.server-url}/realms/${keycloak-client.realm}/protocol/openid-connect/certs</code></pre>\n<blockquote>\n<p>Enter '12stmall' as the OAuth Client value on line 51.\nInput the client-secret generated in KeyCloak on line 52.\nProvide the redirect-uri configured in KeyCloak on line 53.</p>\n</blockquote>\n<h3 id=\"test-user-creation\"><a href=\"#test-user-creation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test User Creation</h3>\n<ul>\n<li>In the Keycloak server, go to 'Manage' > 'Users' and create a new user (e.g., user@naver.com).\n<img src=\"https://user-images.githubusercontent.com/35618409/190961205-3c69d45e-2705-4ba2-af18-edbff2f57bf4.png\" alt=\"image\"></li>\n<li>Set a password for the user and disable the temporary status.\n<img src=\"https://user-images.githubusercontent.com/35618409/190961449-1acc3c93-f448-42be-8b6e-dd6f4c99ac20.png\" alt=\"image\"></li>\n<li>Create another user, e.g., admin@naver.com, using the same process.</li>\n</ul>\n<h3 id=\"keycloak-sso-test\"><a href=\"#keycloak-sso-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak SSO Test</h3>\n<ul>\n<li>Restart the Gateway and microservices.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd gateway\nmvn clean spring-boot:run</code></pre>\n<ul>\n<li>Open the Gateway service for external access (click on the 'Ports' and select the first URL).\n<img src=\"https://user-images.githubusercontent.com/35618409/190962087-a82b9e08-0cde-4d28-8e10-05cd89c938ea.png\" alt=\"image\"></li>\n<li>Start the microservices (e.g., order service).</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn clean spring-boot:run</code></pre>\n<ul>\n<li>If an error occurs, start Kafka in a new terminal.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">Broker may not be available.\n2022-09-19 06:43:53.548  WARN [monolith,,,] 5204 --- [| adminclient-2] org.apache.kafka.clients.NetworkClient   : [AdminClient clientId=adminclient-2] Connection to node -1 (localhost/127.0.0.1:9092) could not be established. Broker may not be available.</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose up -d</code></pre>\n<h2 id=\"token-based-authentication-test\"><a href=\"#token-based-authentication-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Token-based Authentication Test</h2>\n<ul>\n<li>Access the Order resource through the Gateway URL.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/orders\n(Gateway URL need to be modified)</code></pre>\n<ul>\n<li>Since it's an unauthorized resource, the Keycloak SSO login window will appear.\n<img src=\"https://user-images.githubusercontent.com/35618409/190966067-a39781e6-87bc-47e6-9688-eea7f7f7cd86.png\" alt=\"image\"></li>\n<li>Authenticate with the previously created user (user@naver.com / 1).</li>\n<li>After successful authentication, the response from the order service will be displayed.</li>\n</ul>\n<h2 id=\"token-based-authorization-test\"><a href=\"#token-based-authorization-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Token-based Authorization Test</h2>\n<ul>\n<li>Create roles (CUSTOMER, ADMIN) to restrict access to specific APIs.\n<img src=\"https://user-images.githubusercontent.com/35618409/236124984-ce3f8568-bded-4bf8-b6cd-27baa11f0452.png\" alt=\"image\"></li>\n<li>Map roles to the created users.</li>\n<li>For the user admin@naver.com, assign the ADMIN role.\n<img src=\"https://user-images.githubusercontent.com/35618409/236125504-a42fb63f-8c95-450c-b275-036e815a0630.png\" alt=\"image\"></li>\n<li>Similarly, assign the CUSTOMER role to the user user@naver.com.</li>\n</ul>\n<h3 id=\"check-order-resources-authorization\"><a href=\"#check-order-resources-authorization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Check Order Resources Authorization</h3>\n<ul>\n<li>Try accessing the Order resource with the user@naver.com user.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/orders/placeOrder</code></pre>\n<ul>\n<li>Then, try accessing the order management resource.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/orders/manageOrder</code></pre>\n<p>Access will be denied for the user@naver.com account with insufficient privileges, resulting in a 403 error.\n<img src=\"https://user-images.githubusercontent.com/35618409/236128025-33798965-23ae-4922-87a0-32435b0a2597.png\" alt=\"image\"></p>\n<h3 id=\"user-jwt-token-verification\"><a href=\"#user-jwt-token-verification\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>User JWT Token Verification</h3>\n<ul>\n<li>Access the following URL to check user token information and copy the full token.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/test/token</code></pre>\n<ul>\n<li>Open <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://jwt.io/</a>, paste the copied token into the Encoded Token section.\n<img src=\"https://user-images.githubusercontent.com/35618409/236128936-454e2550-8c74-4dd2-b31f-39014ab856da.png\" alt=\"image\"></li>\n<li>Verify the Role claim in the User Claim section of the decoded token's payload.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"JWT Token-based Authentication and Authorization","anchor":"#jwt-token-based-authentication-and-authorization"},{"depth":2,"value":"JWT-based Authentication with Keycloak","anchor":"#jwt-based-authentication-with-keycloak"},{"depth":2,"value":"Event Storming Model Preparation","anchor":"#event-storming-model-preparation"},{"depth":3,"value":"Keycloak Topping Configuration and Code Push","anchor":"#keycloak-topping-configuration-and-code-push"},{"depth":3,"value":"Run Keycloak Server","anchor":"#run-keycloak-server"},{"depth":4,"value":"Open and Connect to Keycloak Server","anchor":"#open-and-connect-to-keycloak-server"},{"depth":2,"value":"OAuth Client Configuration","anchor":"#oauth-client-configuration"},{"depth":3,"value":"Keycloak Configuration","anchor":"#keycloak-configuration"},{"depth":3,"value":"OAuth Client Configuration","anchor":"#oauth-client-configuration-1"},{"depth":3,"value":"Gateway Client Configuration","anchor":"#gateway-client-configuration"},{"depth":3,"value":"Test User Creation","anchor":"#test-user-creation"},{"depth":3,"value":"Keycloak SSO Test","anchor":"#keycloak-sso-test"},{"depth":2,"value":"Token-based Authentication Test","anchor":"#token-based-authentication-test"},{"depth":2,"value":"Token-based Authorization Test","anchor":"#token-based-authorization-test"},{"depth":3,"value":"Check Order Resources Authorization","anchor":"#check-order-resources-authorization"},{"depth":3,"value":"User JWT Token Verification","anchor":"#user-jwt-token-verification"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/model-driven/","title":"Automatic Code Generation"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"1. Creating a Repository"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/helper/","title":""}},{"node":{"path":"/custom-template/template-editor/","title":""}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":""}},{"node":{"path":"/custom-template/global-helper/","title":""}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/contact/question/","title":"CONTACT"}}]}},"context":{}}