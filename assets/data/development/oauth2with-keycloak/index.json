{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"4cf4209d2325d07d12f0b8752dd5411b","title":"JWT Token-based Authorization - Advanced","description":"","path":"/development/oauth2with-keycloak/","timeToRead":3,"content":"<h1 id=\"jwt-token-based-authorization---advanced\"><a href=\"#jwt-token-based-authorization---advanced\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token-based Authorization - Advanced</h1>\n<h3 id=\"jwt-token-based-authorization-w-keycloak\"><a href=\"#jwt-token-based-authorization-w-keycloak\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token-based Authorization w/ Keycloak</h3>\n<h4 id=\"oauth2-stackholders\"><a href=\"#oauth2-stackholders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Stackholders</h4>\n<ul>\n<li>We are gonna use Spring Security and Spring oauth2, and practice the authorization between Resource Owner, Client, Authorization Server and Resource Server.</li>\n<li>Use JWT-based Access_Token.</li>\n<li>Use Standalone Keycloak(<a href=\"https://www.keycloak.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.keycloak.org/</a>) server for authorization server.</li>\n</ul>\n<h3 id=\"apply-keycloak-sso-topping\"><a href=\"#apply-keycloak-sso-topping\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Apply Keycloak SSO Topping</h3>\n<ul>\n<li>Click Code > Code Preview to open window of model-based template codes.</li>\n<li>Click TOPPINGS at the upper-right side and apply Keycloak SSO.\n<img src=\"https://user-images.githubusercontent.com/35618409/190953029-6f27e3ec-2ad8-4101-b223-6ffe5675af48.png\" alt=\"image\"></li>\n<li>\n<p>As a result, the keycloak project and oauth2 settings for application.yml of Gateway has been added.\n<img src=\"https://user-images.githubusercontent.com/35618409/190953662-d6b127f8-b532-4cc8-aa42-5b64ea47842f.png\" alt=\"image\"></p>\n<h3 id=\"accessset-keycloak-server\"><a href=\"#accessset-keycloak-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Access/Set Keycloak Server</h3>\n</li>\n</ul>\n<h4 id=\"update-keycloak-applied-model-code\"><a href=\"#update-keycloak-applied-model-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Update Keycloak-applied Model Code</h4>\n<ul>\n<li>Create and push eventstorming result code and update them.</li>\n<li>Merge main branch and template branch where the model code is pushed from Gitpod.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">git pull &amp;&amp; git merge origin/template</code></pre>\n<h4 id=\"run-keycloak-server\"><a href=\"#run-keycloak-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Run Keycloak Server</h4>\n<ul>\n<li>Move to keycloak folder and create a container and run Keycloak Server.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd keycloak\ndocker-compose up -d\n# check\ndocker container ls </code></pre>\n<h4 id=\"open-and-access-to-keycloak-server\"><a href=\"#open-and-access-to-keycloak-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Open and access to Keycloak server</h4>\n<ul>\n<li>Open the port used by keycloak(9090) and click the lock icon.\n<img src=\"https://user-images.githubusercontent.com/35618409/190956537-056d6f0a-6b46-45c0-9df8-55d7a3cb7fc4.png\" alt=\"image\"></li>\n<li>Click the Browser icon and get access to the web browser. </li>\n<li>Click Administration Console and login with admin info(admin / admin).\n<img src=\"https://user-images.githubusercontent.com/35618409/190956899-9c7efca3-04ac-4f11-851c-1e199debaa02.png\" alt=\"image\"></li>\n<li>The main page of Keycloak comes out.\n<img src=\"https://user-images.githubusercontent.com/35618409/190957013-3a6669d9-0928-498b-9529-cbac6fad8cd5.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"setting-security-between-keycloak--server-and-clientgateway\"><a href=\"#setting-security-between-keycloak--server-and-clientgateway\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Setting security between Keycloak  Server and Client(Gateway)</h3>\n<ul>\n<li>Click 'Tokens' at Master Realm and change Access Token Lifespan into 1 hour.</li>\n<li>Click 'save' below.</li>\n<li>Click Endpoints from Master Realm and open window for Endpoint.\n<img src=\"https://user-images.githubusercontent.com/35618409/190969570-2a75868c-2b68-44e1-b69c-2bfa4dcfe54b.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"register-issuer\"><a href=\"#register-issuer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Register Issuer</h4>\n<ul>\n<li>Register a value searched by issuer from Endpoint to Gateway application.yml(line 39).\n<img src=\"https://user-images.githubusercontent.com/35618409/190958542-d700f666-f889-49a9-8fde-62fc92267bdc.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"register-jwk-uri\"><a href=\"#register-jwk-uri\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Register jwk-uri</h4>\n<ul>\n<li>Register a value searched by jwk from Endpoint to Gateway application.yml(line 50).\n<img src=\"https://user-images.githubusercontent.com/35618409/190958759-036c3ffd-8fba-42af-905e-a971291557ac.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"register-oauth-client\"><a href=\"#register-oauth-client\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Register OAuth Client</h4>\n<ul>\n<li>Click Clients from left-side menu of Keycloak server and add 12stmall.\n<img src=\"https://user-images.githubusercontent.com/35618409/190959198-145da6e6-f82d-412c-843c-9f5caf47c09e.png\" alt=\"image\"></li>\n<li>Add Client id to client-id: of Gateway application.yml settings</li>\n<li>Set Access Type confidential from the registered Client Settings.\n<img src=\"https://user-images.githubusercontent.com/35618409/190959505-5adf84bf-cda5-4cd9-ba90-e8c7d806a8dc.png\" alt=\"image\"></li>\n<li>Fill in Valid Redirect URIs settings below as followings:</li>\n<li>Rules : Gateway Endpoint URL + /login/oauth2/code/ + Client ID(12stmall)\n<img src=\"https://user-images.githubusercontent.com/35618409/191009706-1033fa72-194b-4806-b9e7-33cffcffcf42.png\" alt=\"image\"></li>\n<li>Add the information of Valid Redirect URIs at redirect-uri: of Gateway application.yml settings.</li>\n<li>Secret would be set when you check the Credentials tab after saving, add this at client-secret: of Gateway application.yml settings.\n<img src=\"https://user-images.githubusercontent.com/35618409/190960454-9348d122-30d3-49b0-b63d-6389107a305e.png\" alt=\"image\">\n</li>\n<li>Final settings for Application.yml</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  security:\n    oauth2:\n      client:\n        provider:\n          keycloak:\n            issuer-uri: https://9090-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/realms/master\n            user-name-attribute: preferred_username\n        registration:\n          keycloak:\n            client-id: 12stmall\n            client-secret: 7cic1U8ZS7ZOGruyBNlPY0BHzeeUinXj\n            redirect-uri: https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/login/oauth2/code/12stmall\n            authorization-grant-type: authorization_code\n            scope: openid\n      resourceserver:\n        jwt:\n          jwk-set-uri: https://9090-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/realms/master/protocol/openid-connect/certs</code></pre>\n<h3 id=\"register-test-user\"><a href=\"#register-test-user\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Register Test User</h3>\n<ul>\n<li>Click Users from the left-side menu of Keycloak server and register the user.\n<img src=\"https://user-images.githubusercontent.com/35618409/190961205-3c69d45e-2705-4ba2-af18-edbff2f57bf4.png\" alt=\"image\"></li>\n<li>Save: user@naver.com</li>\n<li>Set passwords at Credentials tab of registered user and set Temporary OFF.\n<img src=\"https://user-images.githubusercontent.com/35618409/190961449-1acc3c93-f448-42be-8b6e-dd6f4c99ac20.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"keycloak-sso-test\"><a href=\"#keycloak-sso-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak SSO Test</h3>\n<ul>\n<li>Restart Gateway and Microservices.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd gateway\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Open Liten Port of Gateway as well.\n<img src=\"https://user-images.githubusercontent.com/35618409/190962087-a82b9e08-0cde-4d28-8e10-05cd89c938ea.png\" alt=\"image\"></li>\n<li>Setting is also available at 'Remote Explorer' on the left.</li>\n<li>Run Microservice.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd monolith\nmvn spring-boot:run</code></pre>\n<ul>\n<li>When this error occurs, run kafka.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">Broker may not be available.\n2022-09-19 06:43:53.548  WARN [monolith,,,] 5204 --- [| adminclient-2] org.apache.kafka.clients.NetworkClient   : [AdminClient clientId=adminclient-2] Connection to node -1 (localhost/127.0.0.1:9092) could not be established. Broker may not be available.</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose up -d</code></pre>\n<ul>\n<li>Access to Order microservice through Gateway on the new tab.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://8088-acmexii-labshopmonolith-orw1glcgvae.ws-us65.gitpod.io/orders\n(Gateway URL need to be modified)</code></pre>\n<ul>\n<li>Keycloak SSO login page comes out(Unauthorized Resource Access)\n<img src=\"https://user-images.githubusercontent.com/35618409/190966067-a39781e6-87bc-47e6-9688-eea7f7f7cd86.png\" alt=\"image\"></li>\n<li>Authorize with the user registered on managing console(user@naver.com / 1).</li>\n<li>Response of Order service comes out properly after the authorization.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"JWT Token-based Authorization - Advanced","anchor":"#jwt-token-based-authorization---advanced"},{"depth":3,"value":"JWT Token-based Authorization w/ Keycloak","anchor":"#jwt-token-based-authorization-w-keycloak"},{"depth":4,"value":"OAuth2 Stackholders","anchor":"#oauth2-stackholders"},{"depth":3,"value":"Apply Keycloak SSO Topping","anchor":"#apply-keycloak-sso-topping"},{"depth":3,"value":"Access/Set Keycloak Server","anchor":"#accessset-keycloak-server"},{"depth":4,"value":"Update Keycloak-applied Model Code","anchor":"#update-keycloak-applied-model-code"},{"depth":4,"value":"Run Keycloak Server","anchor":"#run-keycloak-server"},{"depth":4,"value":"Open and access to Keycloak server","anchor":"#open-and-access-to-keycloak-server"},{"depth":3,"value":"Setting security between Keycloak  Server and Client(Gateway)","anchor":"#setting-security-between-keycloak--server-and-clientgateway"},{"depth":4,"value":"Register Issuer","anchor":"#register-issuer"},{"depth":4,"value":"Register jwk-uri","anchor":"#register-jwk-uri"},{"depth":4,"value":"Register OAuth Client","anchor":"#register-oauth-client"},{"depth":3,"value":"Register Test User","anchor":"#register-test-user"},{"depth":3,"value":"Keycloak SSO Test","anchor":"#keycloak-sso-test"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}