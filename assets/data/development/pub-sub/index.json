{"hash":"663eaccb63b0f6c919ea51a2d168db8f92add159","data":{"markdownPage":{"id":"166a4da01c641639f8ec8ba30e89c13f","title":"Pub/Sub Integration","description":"","path":"/development/pub-sub/","timeToRead":2,"content":"<h1 id=\"pubsub-integration\"><a href=\"#pubsub-integration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub Integration</h1>\n<p>In this hands-on exercise, we will practice the Pub/Sub pattern for event messaging between microservices. Specifically, when an order event (OrderPlaced) is triggered in the Order service, the Inventory service will subscribe to this event and adjust (decrease) the inventory level accordingly.</p>\n<h3 id=\"event-storming-model-preparation\"><a href=\"#event-storming-model-preparation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event Storming Model Preparation</h3>\n<ul>\n<li>Load the model from the following link in a new tab:\n<a href=\"https://www.msaez.io/#/storming/labshoppubsub-2:2023-pubsub2\" target=\"_blank\" rel=\"noopener noreferrer\">Model Link</a></li>\n<li>If the model doesn't load in the browser, click the avatar icon in the upper right corner, log in with your GitHub account, and reload.</li>\n<li>Confirm that the required Event Storming basic model is displayed.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/39ccf71e-3977-4093-9bae-7c2a1254d710\" alt=\"image\"></li>\n</ul>\n<h3 id=\"order-service-event-publishing\"><a href=\"#order-service-event-publishing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order Service Event Publishing</h3>\n<p>Open the GitPod IDE by selecting CODE > ProjectIDE from the menu.</p>\n<ul>\n<li>\n<p>Run the Order microservice.</p>\n<blockquote>\n<p>Navigate to the order folder > Open In Terminal > Execute the following command.\nThe order service will run on port 8081.</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run</code></pre>\n<ul>\n<li>\n<p>Make a request to the running order service to place an order.</p>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 productName=TV qty=3</code></pre>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">- Add a new terminal in GitPod.\n- Enter the Kafka utility with Docker to get a shell in the Kafka location:</code></pre>\n<p>cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin</p>\n<pre class=\"language-text\"><code class=\"language-text\">- kafka Consumer에서 이벤트 확인한다</code></pre>\n<p>./kafka-console-consumer --bootstrap-server localhost:9092 --topic labshoppubsub  --from-beginning</p>\n<pre class=\"language-text\"><code class=\"language-text\">### Inventory Service Event Subscription\n- Examine the PolicyHandler.java code in the Inventory service.\n- PolicyHandler.java calls the Port method (decreaseStock) of Inventory.java (Aggregate).\n- The logic we need to implement in decreaseStock is as follows:</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">    repository().findById(Long.valueOf(orderPlaced.getProductId())).ifPresent(inventory-&gt;{\n        \n        inventory.setStock(inventory.getStock() - orderPlaced.getQty()); // do something\n        repository().save(inventory);\n\n\n     });\n  </code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">- Run the inventory service.</code></pre>\n<p>mvn spring-boot:run</p>\n<pre class=\"language-text\"><code class=\"language-text\">- Confirm that the inventory service is running on port 8082.\n- Observe the inventory level decreasing in response to the OrderPlaced event:</code></pre>\n<p>http :8082/inventories id=1 stock=10\nhttp :8081/orders productId=1 qty=5\nhttp :8082/inventories/1</p>\n<pre class=\"language-text\"><code class=\"language-text\">Result:</code></pre>\n<p>{\n\"_links\": {\n\"inventory\": {\n\"href\": \"<a href=\"http://localhost:8082/inventories/1\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8082/inventories/1</a>\"\n},\n\"self\": {\n\"href\": \"<a href=\"http://localhost:8082/inventories/1\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8082/inventories/1</a>\"\n}\n},\n\"stock\": 5\n}</p>\n<pre class=\"language-text\"><code class=\"language-text\">### Extension Mission\n- Create a Delivery Bounded Context, model and implement a policy to add one delivery for each order.</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Pub/Sub Integration","anchor":"#pubsub-integration"},{"depth":3,"value":"Event Storming Model Preparation","anchor":"#event-storming-model-preparation"},{"depth":3,"value":"Order Service Event Publishing","anchor":"#order-service-event-publishing"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/model-driven/","title":"Automatic Code Generation"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"1. Creating a Repository"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/helper/","title":""}},{"node":{"path":"/custom-template/template-editor/","title":""}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":""}},{"node":{"path":"/custom-template/global-helper/","title":""}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/contact/question/","title":"CONTACT"}}]}},"context":{}}