{"hash":"11fdac7e6ac4a786375b1b2dfa4b0593f05f644b","data":{"markdownPage":{"id":"166a4da01c641639f8ec8ba30e89c13f","title":"Pub/Sub Integration","description":"","path":"/development/pub-sub/","timeToRead":2,"content":"<h1 id=\"pubsub-integration\"><a href=\"#pubsub-integration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub Integration</h1>\n<div style = \"height:400px; object-fit: cover;\">\n<iframe style = \"width:100%; height:100%;\" src=\"https://www.youtube.com/embed/QvRiuKCZUmM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div><br>\n<p>In this hands-on exercise, we will practice the Pub/Sub pattern for event messaging between microservices. </p>\n<p>Specifically, when an order event (OrderPlaced) is triggered in the Order service, the Inventory service will subscribe to this event and adjust (decrease) the inventory level accordingly.</p>\n<h3 id=\"event-storming-model-preparation\"><a href=\"#event-storming-model-preparation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Event Storming Model Preparation</h3>\n<ul>\n<li>Load the model from the following link in a new tab:\n<strong><a href=\"https://www.msaez.io/#/storming/labshoppubsub-2:2023-pubsub2\" target=\"_blank\" rel=\"noopener noreferrer\">Model Link</a></strong></li>\n<li>If the model doesn't load in the browser, click the avatar icon in the upper right corner, log in with your <strong>GitHub</strong> account, and reload.</li>\n<li>Confirm that the required Event Storming basic model is displayed.</li>\n</ul>\n<p><img src=\"https://github.com/kykim97/shop-sigpt/assets/113568664/4608619d-005f-4164-9be7-5730fce17f85\" alt=\"image\"></p>\n<h3 id=\"order-service-event-publishing\"><a href=\"#order-service-event-publishing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order Service Event Publishing</h3>\n<p>Open the GitPod IDE by selecting CODE > ProjectIDE from the menu.</p>\n<ul>\n<li>\n<p>Run the Order microservice.</p>\n<blockquote>\n<p>Navigate to the order folder > Open In Terminal > Execute the following command.\nThe order service will run on port 8081.</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run</code></pre>\n<ul>\n<li>Add a new terminal and make a request to the running order service to place an order.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 productName=TV qty=3</code></pre>\n<ul>\n<li>AAdd a new terminal and enter the Kafka utility with Docker to get a shell in the Kafka location:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin</code></pre>\n<ul>\n<li>Check the Event from kafka Consumer.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">./kafka-console-consumer --bootstrap-server localhost:9092 --topic labshoppubsub  --from-beginning</code></pre>\n<ul>\n<li>Result of the event :</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">{&quot;eventType&quot;:&quot;OrderPlaced&quot;,&quot;timestamp&quot;:1717047846007,&quot;id&quot;:1,&quot;productId&quot;:&quot;1&quot;,&quot;qty&quot;:3,&quot;customerId&quot;:null}</code></pre>\n<h3 id=\"inventory-service-event-subscription\"><a href=\"#inventory-service-event-subscription\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inventory Service Event Subscription</h3>\n<ul>\n<li>Examine the PolicyHandler.java code in the Inventory service.</li>\n<li>PolicyHandler.java calls the Port method (decreaseStock) of Inventory.java (Aggregate).</li>\n<li>The logic we need to implement in decreaseStock of Inventory.java is as follows:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">repository().findById(Long.valueOf(orderPlaced.getProductId())).ifPresent(inventory-&gt;{\n    \n    inventory.setStock(inventory.getStock() - orderPlaced.getQty()); // do something\n    repository().save(inventory);\n\n\n    });</code></pre>\n<ul>\n<li>Add a new terminal and run the inventory service.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run</code></pre>\n<ul>\n<li>Confirm that the inventory service is running on port 8082.</li>\n<li>Observe the inventory level decreasing in response to the OrderPlaced event:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1 stock=10\nhttp :8081/orders productId=1 qty=5\nhttp :8082/inventories/1</code></pre>\n<p>Result:</p>\n<pre class=\"language-text\"><code class=\"language-text\">{\n    &quot;_links&quot;: {\n        &quot;inventory&quot;: {\n            &quot;href&quot;: &quot;http://localhost:8082/inventories/1&quot;\n        },\n        &quot;self&quot;: {\n            &quot;href&quot;: &quot;http://localhost:8082/inventories/1&quot;\n        }\n    },\n    &quot;stock&quot;: 5\n}</code></pre>\n<h3 id=\"extension-mission\"><a href=\"#extension-mission\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Extension Mission</h3>\n<ul>\n<li>Create a Delivery Bounded Context, model and implement a policy to add one delivery for each order.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Pub/Sub Integration","anchor":"#pubsub-integration"},{"depth":3,"value":"Event Storming Model Preparation","anchor":"#event-storming-model-preparation"},{"depth":3,"value":"Order Service Event Publishing","anchor":"#order-service-event-publishing"},{"depth":3,"value":"Inventory Service Event Subscription","anchor":"#inventory-service-event-subscription"},{"depth":3,"value":"Extension Mission","anchor":"#extension-mission"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/plsql-2-java/","title":"Legacy Modernizer"}},{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/tool/pbc-marketplace/","title":"PBCs(Packaged Business Capabilities) for Composable Enterprise Implementation"}},{"node":{"path":"/tool/setup-on-prem/","title":"Running on Docker Compose (with Github)"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/tool/model-driven/","title":"Code Generation"}},{"node":{"path":"/tool/on-prem-inst-gitea/","title":"On-Premises Installation Guide"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/ddl-to-eventstorming/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/event-monitoring/","title":"Event Monitoring"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/ddl-to-eventstorming2/","title":"DDL To EventStorming"}},{"node":{"path":"/tool/deepseek-ai/","title":""}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/aggregate-design/","title":"Aggregate Design"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/tool/bc-domain-gen/","title":"Natural Language-based Bounded Context & Domain Design AI"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/started/vibe-coding/","title":"Vibe Coding"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/info/company/","title":"Cases"}},{"node":{"path":"/info/pricing/","title":"Pricing"}},{"node":{"path":"/info/partnership/","title":"Partner Program"}},{"node":{"path":"/info/consulting/","title":"Consulting"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"Creating Custom Templates in MSAEZ"}},{"node":{"path":"/custom-template/template-editor/","title":"Template Editor"}},{"node":{"path":"/custom-template/global-helper/","title":"Global Helper"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":"Loop & Conditional Statement"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/custom-template/helper/","title":"Helper"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}