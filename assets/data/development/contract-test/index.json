{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"e2cdaa0d231956c07fab172754ae8c9a","title":"Contract Test (Consumer Driven Test)","description":"","path":"/development/contract-test/","timeToRead":2,"content":"<h1 id=\"contract-test-consumer-driven-test\"><a href=\"#contract-test-consumer-driven-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Contract Test (Consumer Driven Test)</h1>\n<h3 id=\"contract-test\"><a href=\"#contract-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>contract test</h3>\n<h4 id=\"contract-test-scenario\"><a href=\"#contract-test-scenario\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>contract test scenario</h4>\n<ul>\n<li>Check if the service works properly.</li>\n<li>Open terminal and run product service(8085) &#x26; order service(8081).</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd contract-test\n\ncd orders\nmvn clean\nmvn spring-boot:run\n\ncd products\nmvn clean\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Make an order.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://localhost:8081/orders productId=2 quantity=3 customerId=1@uengine.org</code></pre>\n<ul>\n<li>Make Contract Violations\n- Call api of product service when making order at order service.\n- Check restTemplate.getForEntity from Order.java.\n- <a href=\"http://product_service/product/productId\" target=\"_blank\" rel=\"noopener noreferrer\">http://product_service/product/productId</a></li>\n<li>\n<p>Change the api into item from product service.</p>\n<blockquote>\n<ul>\n<li>Check ProductController.java from product service.</li>\n<li>Change @GetMapping(\"/product/{productId}\") into @GetMapping(\"/item/{productId}\")</li>\n</ul>\n</blockquote>\n</li>\n<li>Restart product service and make an order.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://localhost:8081/orders productId=2 quantity=3 customerId=1@uengine.org</code></pre>\n<ul>\n<li>404 error occurred!</li>\n</ul>\n<h4 id=\"make-cdcconsumer-driven-contract\"><a href=\"#make-cdcconsumer-driven-contract\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Make CDC(Consumer Driven Contract)</h4>\n<ul>\n<li>Apply Contract that prevents Provider to edit the codes Consumer refers to.</li>\n<li>Order service developer(Consumer) takes charge of preparing a contract(CDC).</li>\n<li>Refer to productGet.groovy file from the top root of order service.</li>\n<li>\n<p>Copy productGet.groovy file and paste it at test/resources/contracts/rest of product service.</p>\n<blockquote>\n<ul>\n<li>In reality, we pull request at Git environment and product team accepts it.</li>\n<li>(There are no contracts/rest folder, so we must make it.)</li>\n<li>(The reason why we make contracts/rest folder is we declared package contracts.rest at productGet.groovy file.)</li>\n</ul>\n</blockquote>\n</li>\n<li>The error occurs on Test or Package step from product service by contract.</li>\n<li>Call package command of product service.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd products\nmvn package</code></pre>\n<ul>\n<li>\n<p>test fail error occurred!</p>\n<blockquote>\n<p>As violating the Contract with Consumer, product team fails from the build level.</p>\n</blockquote>\n</li>\n<li>To solve the contract violation, product service must keep the api '/product'.</li>\n<li>Change ProductController.java of product service to add new API in accordance with  existing API as below.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">   @GetMapping(&quot;/v2/item/{productId}&quot;)\n    Product productStockCheck_v2(@PathVariable(value = &quot;productId&quot;) Long productId) {\n        return productStockCheck(productId);\n    }\n\n    @GetMapping(&quot;/product/{productId}&quot;)\n    Product productStockCheck(@PathVariable(value = &quot;productId&quot;) Long productId) {\n\n        return  this.productService.getProductById(productId);\n    }</code></pre>\n<ul>\n<li>Call the package command of product service.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd products\nmvn package</code></pre>\n<ul>\n<li>Test successful and jar file creation completed!!</li>\n</ul>\n<h4 id=\"test-at-order-service\"><a href=\"#test-at-order-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test at Order Service</h4>\n<ul>\n<li>Order service can test if product service is deploying with applying the test normally.</li>\n<li>To make order service to test api of product service, stub file must be provided from product service.\n- Put in comand 'mvn install' at product service and create stub file at Local(.m2 folder).</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd products\nmvn install</code></pre>\n<ul>\n<li>At order service, test by watching created stub file(Mock Server).\n- Refer to from test/java/com.example.template/ProductContractTest.java order service.\n- @AutoConfigureStubRunner watches the stub of order service.\n- Call api '/product/1' by TestRestTemplate and compare the result.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Contract Test (Consumer Driven Test)","anchor":"#contract-test-consumer-driven-test"},{"depth":3,"value":"contract test","anchor":"#contract-test"},{"depth":4,"value":"contract test scenario","anchor":"#contract-test-scenario"},{"depth":4,"value":"Make CDC(Consumer Driven Contract)","anchor":"#make-cdcconsumer-driven-contract"},{"depth":4,"value":"Test at Order Service","anchor":"#test-at-order-service"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}