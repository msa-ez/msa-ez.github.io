{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"5c632d4918e603d1bb6fcab1e22183d8","title":"Understanding JPA Based Single Microservice","description":"","path":"/development/understanding-jpa-based-single-microservice/","timeToRead":10,"content":"<h1 id=\"understanding-jpa-based-single-microservice\"><a href=\"#understanding-jpa-based-single-microservice\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Understanding JPA Based Single Microservice</h1>\n<h2 id=\"마이크로서비스-구현-및-동작원리-이해\"><a href=\"#%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%ED%98%84-%EB%B0%8F-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC-%EC%9D%B4%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마이크로서비스 구현 및 동작원리 이해</h2>\n<p>이벤트스토밍 결과를 Cloud Native Application(CNA) 구축 시 많이 적용되는 Spring Boot(스프링 부트)와 Event-Driven 방식을 사용하여, 온-사이트에 적용가능한 코드 구현을 진행한다.\n모델기반 Demo 예제를 통해서 본교육에 활용되는 마이크로서비스가 어떻게 구현되고 동작되는지 확인한다. </p>\n<ul>\n<li>스프링 부트를 처음 시작할 때 <a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://start.spring.io/</a> 에서 시작할 수 있다. 브라우저에서 접속해 보자.</li>\n<li>\n<p>Lab들은 Maven Project,Java, 그리고 디펜던시(Dependencies)에 아래 3개가 추가 구성된다.</p>\n<ul>\n<li>Rest Repositories : 레파지토리 패턴을 통해 CRUD Rest API를 생성해 줍니다.</li>\n<li>Spring Data JPA : Java Persistence API의 약어, 자바 ORM 기술에 대한 표준 명세로 API 기반 영속성 관리 도구</li>\n<li>H2 : Java 기반 오픈소스 인메모리 DB</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"대상-모델\"><a href=\"#%EB%8C%80%EC%83%81-%EB%AA%A8%EB%8D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>대상 모델</h3>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/191653973-4f83ca3c-a01e-474c-b986-7ced9f1233bc.png\" alt=\"image\"></p>\n<h4 id=\"메뉴-code--project-ide를-클릭하여-해당-모델의-준비된-gitpod-환경으로-진입한다\"><a href=\"#%EB%A9%94%EB%89%B4-code--project-ide%EB%A5%BC-%ED%81%B4%EB%A6%AD%ED%95%98%EC%97%AC-%ED%95%B4%EB%8B%B9-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EC%A4%80%EB%B9%84%EB%90%9C-gitpod-%ED%99%98%EA%B2%BD%EC%9C%BC%EB%A1%9C-%EC%A7%84%EC%9E%85%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메뉴 CODE > Project IDE를 클릭하여 해당 모델의 준비된 GitPod 환경으로 진입한다.</h4>\n<ul>\n<li>시간이 지나 오픈됀 GitPod의 Explorer 영역에서 demo 폴더를 사용한다. </li>\n<li>아래는 이벤트스토밍 모델 기반 Sprinb-boot 템플릿 코드의 구현체를 설명하고 있다. </li>\n</ul>\n<h3 id=\"1-먼저-aggregate를-생성합니다\"><a href=\"#1-%EB%A8%BC%EC%A0%80-aggregate%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 먼저, Aggregate를 생성합니다.</h3>\n<ul>\n<li>Aggregate 는 Doamin State를 저장하는 리파지토리 기능을 포함하고 있습니다. </li>\n<li>Product Class 를 생성 합니다.</li>\n<li>상품 Entity 를 id, name, stock 맴버 변수를 가진 정의하고 get,set 메서드를 생성하여 줍니다.</li>\n<li>클레스 상단에 @Entity 어노테이션을 달아서 Aggregate 선언을 하여 줍니다.</li>\n<li>@Entity 어노테이션은 JPA 방식을 사용합니다. 이는 Id 값이 필수입니다.</li>\n<li>id 로 선언한 변수에 @Id @GeneratedValue 를 선언하여 줍니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entity</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">GeneratedValue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Id</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> stock<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> stock<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> stock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stock <span class=\"token operator\">=</span> stock<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"2-command를-생성합니다\"><a href=\"#2-command%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Command를 생성합니다.</h3>\n<ul>\n<li>ProductRepository interface를 CrudRepository&#x3C;Product, Long> 를 extends 하여 생성합니다.</li>\n<li>CrudRepository&#x3C;> 의 두개의 변수는 Entity Type과 Primary Key(Entity Id) Type 입니다.</li>\n<li>아래와 같이 선언하면, Entity 의 Repository 패턴으로 Product 엔터티의 CRUD에 준하는 Rest API가 자동으로 생성됩니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>repository</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">CrudRepository</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CrudRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"3-rest-api로-커맨드command를-실행해-보자\"><a href=\"#3-rest-api%EB%A1%9C-%EC%BB%A4%EB%A7%A8%EB%93%9Ccommand%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%B4-%EB%B3%B4%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. REST API로 커맨드(Command)를 실행해 보자.</h3>\n<ul>\n<li>스프링부트 기반 마이크로서비스를 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run</code></pre>\n<ul>\n<li>메이븐 명령어로 spring-boot 라는 플러그인의 run 명령어를 실행 합니다.</li>\n<li>spring-boot 플러그인은 pom.xml 파일에 설정되어 있습니다.</li>\n<li>실행시 기본 포트인 8080 으로 실행됩니다.</li>\n<li>http 명령으로 localhost:8080 을 호출하여 봅니다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">http GET localhost:8080\nhttp GET http://localhost:8080/products\nhttp POST localhost:8080/products <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>TV <span class=\"token assign-left variable\">stock</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>\nhttp GET http://localhost:8080/products/1\nhttp PATCH http://localhost:8080/products/1 <span class=\"token assign-left variable\">stock</span><span class=\"token operator\">=</span><span class=\"token number\">20</span>\nhttp DELETE http://localhost:8080/products/1\nhttp GET http://localhost:8080/products/1</code></pre>\n<ul>\n<li>파일 두개만 만들었지만 Aggregate 와 CRUD가 가능한 Command 가 실행되는 것을을 확인할 수 있습니다.</li>\n</ul>\n<h3 id=\"4-event를-생성합니다\"><a href=\"#4-event%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Event를 생성합니다.</h3>\n<ul>\n<li>이벤트는 일어난 사실에 대한 결과이기 때문에 과거분사(PP, Past Participle) 형으로 작성 합니다.</li>\n<li>상품 정보가 변경 되었을 때 변경 사실을 알리는 ProductChanged 이벤트를 만들어 봅니다.</li>\n<li>ProductChanged 클레스를 생성하고, 변수를 설정합니다.</li>\n<li>이벤트는 다른 서비스에서 받아보는 정보입니다. 그렇기 때문에 자세하게 적어주어야 할 필요가 있습니다. json 으로 데이터를 보내기 때문에 eventType 이라는 변수를 만들고, 생성자에서 이벤트 이름을 적어 줍니다.</li>\n<li>세부 정보도 다른 서비스에서 명확히 이해하기 쉽도록 그냥 name 이 아닌 productName 처럼 구체적으로 작성 합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductChanged</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> eventType<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> productName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> productStock<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProductChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventType <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> eventType<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setEventType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> eventType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventType <span class=\"token operator\">=</span> eventType<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getProductId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> productId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setProductId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>productId <span class=\"token operator\">=</span> productId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getProductName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> productName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setProductName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> productName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>productName <span class=\"token operator\">=</span> productName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getProductStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> productStock<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setProductStock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> productStock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>productStock <span class=\"token operator\">=</span> productStock<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-생성된-event를-발송합니다\"><a href=\"#5-%EC%83%9D%EC%84%B1%EB%90%9C-event%EB%A5%BC-%EB%B0%9C%EC%86%A1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. 생성된 Event를 발송합니다.</h3>\n<ul>\n<li>이벤트는 Aggregate 내의 상태 변화에 의해서 발생하기 때문에, 이벤트를 보내는 로직은 Entity의 lifecycle 에 작성하게 됩니다.</li>\n<li>Product.java 에 데이터가 입력되었을때의 Lifecycle 인 @PostPersist 어노테이션에 이벤트를 생성하여 값을 셋팅 합니다.</li>\n<li>ObjectMapper 를 사용하여 json 으로 변환 합니다.</li>\n<li>어그리게잇(Product.java) 코드 수정</li>\n<li>import 문 추가 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">import javax.persistence.*;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostPersist</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eventPublish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ProductChanged</span> productChanged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductStock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            json <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>productChanged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON format exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>서비스를 재시작 후 Aggregate 에 커맨드를 실행하여 정상적으로 json이 생성되는지 콘솔을 통해 확인합니다.</li>\n<li>http POST localhost:8080/products name=TV stock=10</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">{&quot;eventType&quot;:&quot;ProductChanged&quot;,&quot;productId&quot;:1,&quot;productName&quot;:&quot;TV&quot;,&quot;productStock&quot;:10}</code></pre>\n<ul>\n<li>어그리게이트 내의 라이프사이클을 수정 적용해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@PostPersist &gt; @PostUpdate</code></pre>\n<h3 id=\"6-서비스에-카프카-연결하기\"><a href=\"#6-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. 서비스에 카프카 연결하기</h3>\n<ul>\n<li>Spring Cloud Stream Application 모델\n<img src=\"https://user-images.githubusercontent.com/43136526/119310820-4354ea00-bcab-11eb-8309-7f8431ad1715.png\" alt=\"image\"></li>\n<li>Spring Cloud Streams Application에서 Kafka 바인더를 사용하기 위한 Kafka 라이브러리를 pom.xml에서 확인한다.</li>\n</ul>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- kafka streams --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-stream-kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li>stream 을 kafka 와 연결하기 위하여 application.yaml 파일에 아래 설정을 추가 합니다.</li>\n<li>kafka brokers로 localhost:9092 를 사용한다는 의미입니다. 카프카 설치시 기본 포트가 9092 입니다.</li>\n<li>destination 은 목적지라는 뜻인데, kafka 에서는 topic 이름이 됩니다.</li>\n<li>즉, 해당 설정은 shop 이라는 토픽에 메세지를 주고 받겠다는 의미입니다.</li>\n<li>환경정보 파일인 resouces/applications.properties를 application.yml로 변경 후, 아래 내용을 추가합니다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">stream</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">kafka</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">binder</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">brokers</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span>\n      <span class=\"token key atrule\">bindings</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">input</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> product\n          <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> shop\n          <span class=\"token key atrule\">contentType</span><span class=\"token punctuation\">:</span> application/json\n        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> shop\n          <span class=\"token key atrule\">contentType</span><span class=\"token punctuation\">:</span> application/json   </code></pre>\n<h3 id=\"7-이벤트를-kafka-에-퍼블리시-하기\"><a href=\"#7-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A5%BC-kafka-%EC%97%90-%ED%8D%BC%EB%B8%94%EB%A6%AC%EC%8B%9C-%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7. 이벤트를 kafka 에 퍼블리시 하기</h3>\n<ul>\n<li>7번에서 추가한  Product.java 리소스의 @PostPersist 라이프사이클을  스트림에 메세지를 발송하는 코드로 수정합니다.</li>\n<li>어그리게잇(Product.java) 코드 수정</li>\n<li>import 문 추가 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">import org.springframework.cloud.stream.messaging.Processor;\nimport org.springframework.messaging.MessageChannel;\nimport org.springframework.messaging.MessageHeaders;\nimport org.springframework.messaging.support.MessageBuilder;\nimport org.springframework.util.MimeTypeUtils;</code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostPersist</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eventPublish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">ProductChanged</span> productChanged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tproductChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tproductChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tproductChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductStock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\njson <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>productChanged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON format exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token class-name\">Processor</span> processor <span class=\"token operator\">=</span> <span class=\"token class-name\">DemoApplication</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">MessageChannel</span> outputChannel <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\toutputChannel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageBuilder</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageHeaders</span><span class=\"token punctuation\">.</span>CONTENT_TYPE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MimeTypeUtils</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>수정 후 서비스를 재시작한 다음 REST API로 상품 등록 시, 카프카에 이벤트 메시지가 도달하는지 확인 합니다.</li>\n<li>메시지는 Kafka Consumer로써 shop 토픽(topic) 모니터링으로 확인 가능합니다.</li>\n</ul>\n<h3 id=\"8-카프카-토픽-모니터링\"><a href=\"#8-%EC%B9%B4%ED%94%84%EC%B9%B4-%ED%86%A0%ED%94%BD-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>8. 카프카 토픽 모니터링</h3>\n<ul>\n<li>kafka 유틸리티가 포함된 위치에 접속하기 위하여 새 터미널에서 docker 를 통하여 shell 에 진입한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash \ncd /bin</code></pre>\n<ul>\n<li>kafka Consumer에서 이벤트 확인한다</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">./kafka-console-consumer --bootstrap-server localhost:9092 --topic shop  --from-beginning</code></pre>\n<ul>\n<li>다른 터미널에서 이벤트 발행해 본다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http POST localhost:8080/products name=TV stock=10</code></pre>\n<h3 id=\"9-이벤트를-수신하는-policy를-생성\"><a href=\"#9-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A5%BC-%EC%88%98%EC%8B%A0%ED%95%98%EB%8A%94-policy%EB%A5%BC-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. 이벤트를 수신하는 Policy를 생성</h3>\n<ul>\n<li>Event에 대응되는 Policy(폴리시)는 다른 마이크로서비스(팀)에서 수신 합니다.\n즉, 상품 서비스에서 ProductChanged 이벤트가 발생하면 주문이나 배송 서비스에서 이를 수신 후 각 서비스에 맞는 Biz-Logic을 처리하지만, 편의상 Kafka로부터 메세지 수신만 확인합니다.</li>\n<li>PolicyHandler.java 를 생성하고 @StreamListener(Processor.INPUT) 를 추가하여 스트림을 수신합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">StreamListener</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Payload</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>messaging</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PolicyHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span>INPUT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onEventByString</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">ProductChanged</span> productChanged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">getProductName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">getProductStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>String 이 아닌 객체 자체를 받아도 StreamListener 에서 객체 변환을 하여 줍니다.</li>\n<li>위의 카프카에 데이터를 보내는 명령을 호출하여 메세지를 수신하는지 확인 합니다</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Understanding JPA Based Single Microservice","anchor":"#understanding-jpa-based-single-microservice"},{"depth":2,"value":"마이크로서비스 구현 및 동작원리 이해","anchor":"#마이크로서비스-구현-및-동작원리-이해"},{"depth":3,"value":"대상 모델","anchor":"#대상-모델"},{"depth":4,"value":"메뉴 CODE > Project IDE를 클릭하여 해당 모델의 준비된 GitPod 환경으로 진입한다.","anchor":"#메뉴-code--project-ide를-클릭하여-해당-모델의-준비된-gitpod-환경으로-진입한다"},{"depth":3,"value":"1. 먼저, Aggregate를 생성합니다.","anchor":"#1-먼저-aggregate를-생성합니다"},{"depth":3,"value":"2. Command를 생성합니다.","anchor":"#2-command를-생성합니다"},{"depth":3,"value":"3. REST API로 커맨드(Command)를 실행해 보자.","anchor":"#3-rest-api로-커맨드command를-실행해-보자"},{"depth":3,"value":"4. Event를 생성합니다.","anchor":"#4-event를-생성합니다"},{"depth":3,"value":"5. 생성된 Event를 발송합니다.","anchor":"#5-생성된-event를-발송합니다"},{"depth":3,"value":"6. 서비스에 카프카 연결하기","anchor":"#6-서비스에-카프카-연결하기"},{"depth":3,"value":"7. 이벤트를 kafka 에 퍼블리시 하기","anchor":"#7-이벤트를-kafka-에-퍼블리시-하기"},{"depth":3,"value":"8. 카프카 토픽 모니터링","anchor":"#8-카프카-토픽-모니터링"},{"depth":3,"value":"9. 이벤트를 수신하는 Policy를 생성","anchor":"#9-이벤트를-수신하는-policy를-생성"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}