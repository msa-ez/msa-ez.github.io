{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"b2fa5c35f7075870713cce9474fb70f0","title":"Conteact Test by Message-based CDC","description":"","path":"/development/conteact-messaging/","timeToRead":3,"content":"<h1 id=\"conteact-test-by-message-based-cdc\"><a href=\"#conteact-test-by-message-based-cdc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conteact Test by Message-based CDC</h1>\n<h2 id=\"messaging-contract-test\"><a href=\"#messaging-contract-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Messaging Contract Test</h2>\n<ul>\n<li>주문서비스와 상품서비스간 메시징 기반 EDA 통신을 Contract Testing하는 방법을 실습한다.</li>\n<li>Producer와 Consumer만 있는 REST Contract Test와는 달리, Message Broker 요소가 Contract Test에 추가된다.</li>\n<li>CDC Messaging Contract에는 Producer의 Biz 로직이 Message Broker에 이벤트를 제대로 Pubish하는지 확인하는 테스트가 추가로 수행된다.</li>\n</ul>\n<h3 id=\"dependencies-for-messaging-contract\"><a href=\"#dependencies-for-messaging-contract\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dependencies for Messaging Contract</h3>\n<ul>\n<li>products > pom.xml을 열어본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;!-- Support testing your microservice without connecting to a messaging system. --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n\t&lt;artifactId&gt;spring-cloud-stream-test-support&lt;/artifactId&gt;\n\t&lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Auto generating test Client based on CDC. --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n\t&lt;artifactId&gt;spring-cloud-starter-contract-verifier&lt;/artifactId&gt;\n\t&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;\n\t&lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;</code></pre>\n<h3 id=\"cdc-messaging-contract\"><a href=\"#cdc-messaging-contract\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDC Messaging Contract</h3>\n<h4 id=\"contract-파일을-살펴보자\"><a href=\"#contract-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Contract 파일을 살펴보자.</h4>\n<ul>\n<li>products > src > test > resources > contract > messaging > productChaged.groovy</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package contracts.messaging\nimport org.springframework.cloud.contract.spec.Contract\n\nContract.make {\n    // The Identifier which can be used to identify it later.\n    label &#39;ProductChanged&#39;\n    input {\n        // Contract will be triggered by the following method.\n        triggeredBy(&#39;productChanged()&#39;)\n    }\n    outputMessage {\n        sentTo &#39;eventTopic&#39;\n        // Consumer Expected Payload spec. that a JSON message must have, \n        // If the Producer-side test is OK, then send the following msg to event-out channel.\n        body(\n                eventType: &quot;ProductChanged&quot;,\n                productId: 1,\n                productName: &quot;TV&quot;,\n                productPrice: 10000,\n                productStock: 10,\n                imageUrl: &quot;tv.jpg&quot;\n        )\n        bodyMatchers {\n            jsonPath(&#39;$.eventType&#39;, byRegex(&quot;ProductChanged&quot;))\n            jsonPath(&#39;$.productId&#39;, byRegex(nonEmpty()).asLong())\n            jsonPath(&#39;$.productName&#39;, byRegex(nonEmpty()).asString())\n            jsonPath(&#39;$.productPrice&#39;, byRegex(nonEmpty()).asLong())\n            jsonPath(&#39;$.productStock&#39;, byRegex(nonEmpty()).asLong())\n            jsonPath(&#39;$.imageUrl&#39;, byRegex(nonEmpty()).asString())\n        }\n        headers {\n            messagingContentType(applicationJson())\n        }\n    }\n}</code></pre>\n<h4 id=\"test-base-코드를-살펴보자\"><a href=\"#test-base-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test Base 코드를 살펴보자.</h4>\n<ul>\n<li>\n<p>products > src > test > java/com/example/template > MessagingBase.java</p>\n<blockquote>\n<p>상품서비스 비즈니스 로직 ProductController를 사용해 테스트 메시지를 생성한다.\n메시지는 Kafka Mock Server에 MessageVerifier 인터페이스를 통해 퍼블리쉬한다.</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>이후, 생성될 테스트 코드에서 이를 수신해, 비즈니스 로직이 제대로 수행되었는지 검증한다.  </p>\n</blockquote>\n<h3 id=\"contract-test-실행\"><a href=\"#contract-test-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Contract Test 실행</h3>\n<ul>\n<li>성공적인 계약테스트를 확인해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd products\nmvn clean test</code></pre>\n<ul>\n<li>아래처럼 상품서비스 로직실행 결과 도메인 이벤트가 정상적으로 Publish되었음이 Console 로그상에 확인되고, Message 테스트가 성공적으로 실행된다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/628813c5-855b-4f2a-9971-aea6f48a1fbd\" alt=\"event-sent\">\n<img src=\"https://user-images.githubusercontent.com/35618409/232287767-36048901-7b2c-4996-8c9b-92432860939c.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"계약-위반-테스트\"><a href=\"#%EA%B3%84%EC%95%BD-%EC%9C%84%EB%B0%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>계약 위반 테스트</h3>\n<ul>\n<li>상품팀에서 ProductChanged 도메인 이벤트명을 임의로 \"ProductModified\"로 바꾼다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">ProductService.java &gt; 103라인 주석해제 \nmvn clean test</code></pre>\n<ul>\n<li>계약 위반에 따라 빌드오류로 배포가 진행되지 않는다.\n<img src=\"https://user-images.githubusercontent.com/35618409/232288290-20db278d-413e-4df8-bef4-0dfbd25dc062.png\" alt=\"image\"></li>\n<li>다시 빌드 후 Stub을 생성 해 Maven 라이브러리에 배포한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">ProductService.java &gt; 103라인 주석처리 \nmvn clean install</code></pre>\n<h3 id=\"consumer-주문서비스-테스트\"><a href=\"#consumer-%EC%A3%BC%EB%AC%B8%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Consumer (주문서비스) 테스트</h3>\n<ul>\n<li>\n<p>주문서비스의 테스트를 위한 디펜던시와 테스트 코드(ProductChangedContactTest)를 확인한다.</p>\n<ul>\n<li>orders > pom.xml</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;!-- test --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n\t&lt;artifactId&gt;spring-cloud-stream-test-support&lt;/artifactId&gt;\n\t&lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n\n&lt;!-- tag::stubrunner[] --&gt;\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n\t&lt;artifactId&gt;spring-cloud-starter-contract-stub-runner&lt;/artifactId&gt;\n\t&lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;</code></pre>\n<ul>\n<li>주문 컨슈머의 최종 메시지 테스트를 수행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd orders\nmvn clean test</code></pre>\n<ul>\n<li>메시지 테스트가 성공적으로 수행됨이 확인된다.\n<img src=\"https://user-images.githubusercontent.com/35618409/232289407-a6119401-b132-4661-9c60-621d640c2ea3.png\" alt=\"image\"></li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Conteact Test by Message-based CDC","anchor":"#conteact-test-by-message-based-cdc"},{"depth":2,"value":"Messaging Contract Test","anchor":"#messaging-contract-test"},{"depth":3,"value":"Dependencies for Messaging Contract","anchor":"#dependencies-for-messaging-contract"},{"depth":3,"value":"CDC Messaging Contract","anchor":"#cdc-messaging-contract"},{"depth":4,"value":"Contract 파일을 살펴보자.","anchor":"#contract-파일을-살펴보자"},{"depth":4,"value":"Test Base 코드를 살펴보자.","anchor":"#test-base-코드를-살펴보자"},{"depth":3,"value":"Contract Test 실행","anchor":"#contract-test-실행"},{"depth":3,"value":"계약 위반 테스트","anchor":"#계약-위반-테스트"},{"depth":3,"value":"Consumer (주문서비스) 테스트","anchor":"#consumer-주문서비스-테스트"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}