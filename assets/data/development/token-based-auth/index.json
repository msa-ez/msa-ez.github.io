{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"6e72743611a8c175cb47001816904f5e","title":"JWT Token-based Authorization","description":"","path":"/development/token-based-auth/","timeToRead":3,"content":"<h1 id=\"jwt-token-based-authorization\"><a href=\"#jwt-token-based-authorization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token-based Authorization</h1>\n<h3 id=\"jwt-token-based-authorization-w-keycloak\"><a href=\"#jwt-token-based-authorization-w-keycloak\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token-based Authorization w/ Keycloak</h3>\n<h4 id=\"oauth2-stackholders\"><a href=\"#oauth2-stackholders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Stackholders</h4>\n<ul>\n<li>Use Spring Security and Spring oauth2, and practice the authorization between Resource Owner, Client, Authorization Server and Resource Server.</li>\n<li>Resource here means the Rest APIs which transfer the Gateway.</li>\n<li>Use JWT-based Access_Token.</li>\n<li>In this lab, set Gateway in the role of Client &#x26; Resource Server.</li>\n<li>Use Standalone Keycloak(<a href=\"https://www.keycloak.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.keycloak.org/</a>) server for authorization server.</li>\n</ul>\n<h4 id=\"set-oauth2-authorizationkeycloak-endpoint\"><a href=\"#set-oauth2-authorizationkeycloak-endpoint\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Set OAuth2 Authorization(Keycloak) Endpoint</h4>\n<p>Move to the directory of this example:</p>\n<pre class=\"language-text\"><code class=\"language-text\"> cd token-based-auth-Keycloak/</code></pre>\n<ul>\n<li>Open application.yml file of Gateway service.</li>\n<li>The Endpoint of Authorization Server for authorization would be registered.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">oauth2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">my-keycloak-provider</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">issuer-uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8080/realms/my_realm</code></pre>\n<ul>\n<li>The Credential informations(client-id, client-secret) of the Client(Gateway) registered on KeyCloak is set.</li>\n<li>Set the Grant Type of OAuth2 into password type.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">keycloak-spring-gateway-client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>keycloak<span class=\"token punctuation\">-</span>provider\n    <span class=\"token key atrule\">client-id</span><span class=\"token punctuation\">:</span> my_client\n    <span class=\"token key atrule\">client-secret</span><span class=\"token punctuation\">:</span> HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H\n    <span class=\"token key atrule\">authorization-grant-type</span><span class=\"token punctuation\">:</span> password</code></pre>\n<h4 id=\"detail-settings-for-oauth2-security\"><a href=\"#detail-settings-for-oauth2-security\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Detail Settings for OAuth2 Security</h4>\n<ul>\n<li>Open SecurityConfig.java file of Gateway service.</li>\n<li>spring-cloud-gateway runs by webflux: apply @EnableWebFluxSecurity</li>\n<li>Describe Access Control List(ACL) for each resources at ServerHttpSecurity.</li>\n<li>Default login settings of .oauth2Login() OAuth2 would be applied.</li>\n<li>Give the role of .oauth2ResourceServer() and designate the jwt-type Authorization. </li>\n</ul>\n<h4 id=\"run-the-service\"><a href=\"#run-the-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Run the Service</h4>\n<ul>\n<li>First, run Keycloak Server.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd keycloak/bin\nchmod 744 kc.sh\n./kc.sh start-dev</code></pre>\n<ul>\n<li>It runs on the default port of keycloak server, 8080.</li>\n<li>Run Gateway &#x26; Order service.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd gateway\nmvn spring-boot:run\ncd order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>It runs on port 8088 and 8081.</li>\n</ul>\n<h4 id=\"get-access-to-protected-resources\"><a href=\"#get-access-to-protected-resources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Get Access to Protected Resources</h4>\n<ul>\n<li>Get access to Gateway server and order service by following Security ACL Settings(SecurityConfig.java).</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http http://localhost:8088\nhttp http://localhost:8088/orders</code></pre>\n<ul>\n<li>401(Unauthorized)a ccess eroor comes out because we don't have JWT access-token.</li>\n<li>Get access to the authorized resource. (gateway > TestController.java)</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http http://localhost:8088/test/permitAll</code></pre>\n<ul>\n<li>It's accessible. </li>\n</ul>\n<h4 id=\"issue-jwt-access_token\"><a href=\"#issue-jwt-access_token\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Issue JWT access_token</h4>\n<ul>\n<li>Request a token to Autorization Endpoint of Keycloak.</li>\n<li>\n<p>Submit the user information and Client credential which is already registered at Keycloak by OAuth2's 'password' Grant type.</p>\n<blockquote>\n<p>'password' Grant type은 Client(Gateway)의 로그인 Form으로 제출받은 사용자 정보를 인증서버에 Posting하는 방식이다.\nThe 'password' Grant type is the way of Posting user information submitted by login form to the authorizing server.</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">curl -X POST \"http://localhost:8080/realms/my_realm/protocol/openid-connect/token\" \\\n--header \"Content-Type: application/x-www-form-urlencoded\" \\\n--data-urlencode \"grant_type=password\" \\\n--data-urlencode \"client_id=my_client\" \\\n--data-urlencode \"client_secret=HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H\" \\\n--data-urlencode \"username=user@uengine.org\" \\\n--data-urlencode \"password=1\" </code></pre>\n<ul>\n<li>access_token &#x26; refresh_token comes out for the response.</li>\n<li>\n<p>Copy the access_token and access to <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://jwt.io/</a> then decode it.</p>\n<blockquote>\n<p>It is being parsed by Header, Payload and Signature.</p>\n</blockquote>\n</li>\n<li>Check if the Role of user@uengine.org is ROLE_USER.</li>\n</ul>\n<h4 id=\"get-access-to-protected-resources-with-access_token\"><a href=\"#get-access-to-protected-resources-with-access_token\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Get Access to Protected Resources with access_token</h4>\n<ul>\n<li>Copy the access_token and put it in Request Header to and get access to Protected Resource.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">export access_token=[ACCESS_TOKEN]\necho $access_token\nhttp localhost:8088/orders \"Authorization: Bearer $access_token\"\nhttp localhost:8088/test/user \"Authorization: Bearer $access_token\"\nhttp localhost:8088/test/authenticated \"Authorization: Bearer $access_token\"\nhttp localhost:8088/test/admin \"Authorization: Bearer $access_token\"</code></pre>\n<ul>\n<li>'/test/admin' resource is forbidden(403), so cannot be acced.</li>\n<li>Request token once again with the account that has manager authority.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">curl -X POST \"http://localhost:8080/realms/my_realm/protocol/openid-connect/token\" \\\n--header \"Content-Type: application/x-www-form-urlencoded\" \\\n--data-urlencode \"grant_type=password\" \\\n--data-urlencode \"client_id=my_client\" \\\n--data-urlencode \"client_secret=HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H\" \\\n--data-urlencode \"username=admin@uengine.org\" \\\n--data-urlencode \"password=1\" </code></pre>\n<ul>\n<li>Copy the access_token and put it in Request Header to and get access to Protected Resource.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">export access_token=[ACCESS_TOKEN]\nhttp localhost:8088/test/admin \"Authorization: Bearer $access_token\"</code></pre>\n<ul>\n<li>Now it is accesible.</li>\n</ul>\n<h4 id=\"wrap-up\"><a href=\"#wrap-up\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrap up</h4>\n<ul>\n<li>Gateway is taking the role of resource server, so the Gateway manages Fine grained access control of each microservice resources.</li>\n<li>ACL information wouldn't be legible or there could be potential conflict.</li>\n<li>We recommend you to separate authorizations to disperse the responsibility of Autonomous ACL for each MSA.</li>\n<li>Gateway is in charge of Coarse grained ACL Policy including authorization, and applies Fine grained ACL Policy on each MSA.</li>\n</ul>\n<h4 id=\"service-clear\"><a href=\"#service-clear\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Clear</h4>\n<ul>\n<li>Kill all running servers for next lab.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8080/tcp\nfuser -k 8081/tcp\nfuser -k 8088/tcp</code></pre>\n<h4 id=\"details\"><a href=\"#details\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Details</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/dsUW_JTvqIA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"JWT Token-based Authorization","anchor":"#jwt-token-based-authorization"},{"depth":3,"value":"JWT Token-based Authorization w/ Keycloak","anchor":"#jwt-token-based-authorization-w-keycloak"},{"depth":4,"value":"OAuth2 Stackholders","anchor":"#oauth2-stackholders"},{"depth":4,"value":"Set OAuth2 Authorization(Keycloak) Endpoint","anchor":"#set-oauth2-authorizationkeycloak-endpoint"},{"depth":4,"value":"Detail Settings for OAuth2 Security","anchor":"#detail-settings-for-oauth2-security"},{"depth":4,"value":"Run the Service","anchor":"#run-the-service"},{"depth":4,"value":"Get Access to Protected Resources","anchor":"#get-access-to-protected-resources"},{"depth":4,"value":"Issue JWT access_token","anchor":"#issue-jwt-access_token"},{"depth":4,"value":"Get Access to Protected Resources with access_token","anchor":"#get-access-to-protected-resources-with-access_token"},{"depth":4,"value":"Wrap up","anchor":"#wrap-up"},{"depth":4,"value":"Service Clear","anchor":"#service-clear"},{"depth":4,"value":"Details","anchor":"#details"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}