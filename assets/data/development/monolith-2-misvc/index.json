{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"ef4d8b57992d63248437c51e699b88c4","title":"MSA Communication by Req/Res","description":"","path":"/development/monolith-2-misvc/","timeToRead":4,"content":"<h1 id=\"msa-communication-by-reqres\"><a href=\"#msa-communication-by-reqres\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA Communication by Req/Res</h1>\n<h3 id=\"check-the-working-process-of-monolith-service\"><a href=\"#check-the-working-process-of-monolith-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Check the Working Process of Monolith Service</h3>\n<p>Requirements of this Lab : Separate inventory service from Monolith-based shopping mall service and making Microservice-based shopping mall by using Feign Client.</p>\n<p>Feign Client is a way of transforming with minimizing the change of the legacy codes by\nfollowing the existing local object interfaces while making it available to communication between services by remote call (Request/Response).</p>\n<ul>\n<li>Running the Monolith Service</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd monolith\nmvn spring-boot:run\n\nhttp localhost:8081</code></pre>\n<ul>\n<li>Check if the delivery is on process through local object 'inventory' at Order.java:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    @PostPersist\n    public void onPostPersist() {\n        inventoryService().decreaseStock(Long.valueOf(getProductId()), new DecreaseStockCommand(getQty()));\n\n    }\n\n    @PrePersist\n    public void checkAvailability(){\n        if(inventoryService().getInventory(Long.valueOf(getProductId())).getStock() &lt; getQty()) throw new RuntimeException(&quot;Out of stock&quot;);\n    }\n\n    public static InventoryService inventoryService(){\n        InventoryService inventoryService = MonolithApplication.applicationContext.getBean(\n            InventoryService.class\n        );\n\n        return inventoryService; // set breakpoint here\n    }</code></pre>\n<ul>\n<li>Place a debug point on the method inventoryService() of Order.java.</li>\n<li>When you click on the left side of \"return inventoryService;\" line's line number, a red circle(breakpoint) comes out.</li>\n<li>Place an order  </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 quantity=3 customerId=&quot;1@uengine.org&quot; customerName=&quot;hong&quot; customerAddr=&quot;seoul&quot;</code></pre>\n<ul>\n<li>Check if it's a Monolith which is being handled by InventoryServiceImpl.java</li>\n</ul>\n<h3 id=\"separating-areas-from-monolith-to-microservices\"><a href=\"#separating-areas-from-monolith-to-microservices\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Separating areas from Monolith to Microservices</h3>\n<p>To edit the base model of this lab, FORK this model and customize it by following the instruction.</p>\n<h4 id=\"eventstorming\"><a href=\"#eventstorming\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Eventstorming</h4>\n<ul>\n<li>Add a bounded context and name it \"inventory\"</li>\n<li>Group the objects of inventory aggregate and move them into inventory bounded context</li>\n</ul>\n<img width=\"874\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896320-72973cf1-c1dc-44f4-a46a-9be87d072284.png\"> \n<ul>\n<li>Add a Command to decrease inventory: Add a Command sticker into inventory BC and name it \"decrease inventory\". The Command sticker should be placed on the left of Inventory Aggregate.</li>\n<li>Setting Command: Double click on \"decrease inventory\" command and select \"Controller\". Add name: qty, type: Integer for Attribute.</li>\n</ul>\n<img width=\"784\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896393-30889e96-6cbc-4e7f-9631-25c0d004635d.png\">\n<ul>\n<li>Link a remote calling line: Link OrderPlaced Event sticker of monolith BC and decrease inventory Command sticker of inventory BC. A mark called Req/res appears.</li>\n</ul>\n<img width=\"859\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896427-f91962cd-f8ab-4113-bd85-5abe1ada3bcd.png\">\n<h4 id=\"check--implement-the-codes-from-the-calling-side\"><a href=\"#check--implement-the-codes-from-the-calling-side\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Check &#x26; implement the codes from the calling side</h4>\n<ul>\n<li>\n<p>Create codes resulted from eventstorming, push them, then update the codes.</p>\n<blockquote>\n<p>Send the code to your GitHub by \"Commit &#x26; Push on Git\" from Code Preview menu.\nIn order to do that, MSAEz must be signed up with your GitHub token.</p>\n</blockquote>\n</li>\n<li>Check the sample codes created inside @PostPersist from monolith/../ Order.java and edit them as the part //here:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    @PostPersist\n    public void onPostPersist() {\n        //Following code causes dependency to external APIs\n        // it is NOT A GOOD PRACTICE. instead, Event-Policy mapping is recommended.\n\n        labshopmonolith.external.DecreaseStockCommand decreaseStockCommand = new labshopmonolith.external.DecreaseStockCommand();\n        decreaseStockCommand.setQty(getQty()); //here\n        \n        // mappings goes here\n        MonolithApplication.applicationContext\n            .getBean(labshopmonolith.external.InventoryService.class)\n            .decreaseStock(Long.valueOf(getProductId()), decreaseStockCommand); //here\n\n        OrderPlaced orderPlaced = new OrderPlaced(this);\n        orderPlaced.publishAfterCommit();\n    }</code></pre>\n<blockquote>\n<p>We are calling decreaseStock stub method as calling a local object, but actually it would be resulted as calling a remote object of inventory.\nTo modify the amount of inventory, deliver productId as the Command object to deliver the value of qty  and the first argument to deliver id of the product by path.</p>\n</blockquote>\n<ul>\n<li>Refer the Stub codes related to FeignClient created inside monolith/../ external package (InventoryService.java, DecreaseStockCommand.java, Inventory.java)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@FeignClient(name = &quot;inventory&quot;, url = &quot;${api.url.inventory}&quot;)\npublic interface InventoryService {\n    @RequestMapping(\n        method = RequestMethod.PUT,\n        path = &quot;/inventories/{id}/decreasestock&quot;\n    )\n    public void decreaseStock(\n        @PathVariable(&quot;id&quot;) Long id,\n        @RequestBody DecreaseStockCommand decreaseStockCommand\n    );\n\n}</code></pre>\n<blockquote>\n<p>FeignClient will create proxy object that calls remote objects of inventory. An implementation of a remote call calling the PUT method to the corresponding path is filled with the url of set value of api.url.inventory from application.yaml.</p>\n</blockquote>\n<h4 id=\"check--implement-the-source-code-from-called-side\"><a href=\"#check--implement-the-source-code-from-called-side\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Check &#x26; implement the source code from called side</h4>\n<ul>\n<li>inventory/.. /infra/InventoryController.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">public class InventoryController {\n\n    @Autowired\n    InventoryRepository inventoryRepository;\n\n    @RequestMapping(\n        value = &quot;inventories/{id}/decreasestock&quot;,\n        method = RequestMethod.PUT,\n        produces = &quot;application/json;charset=UTF-8&quot;\n    )\n    public Inventory decreaseStock(\n        @PathVariable(value = &quot;id&quot;) Long id,\n        @RequestBody DecreaseStockCommand decreaseStockCommand,\n        HttpServletRequest request,\n        HttpServletResponse response\n    ) throws Exception {\n        System.out.println(&quot;##### /inventory/decreaseStock  called #####&quot;);\n        Optional&lt;Inventory&gt; optionalInventory = inventoryRepository.findById(\n            id\n        );\n\n        optionalInventory.orElseThrow(() -&gt; new Exception(&quot;No Entity Found&quot;));\n        Inventory inventory = optionalInventory.get();\n        inventory.decreaseStock(decreaseStockCommand);\n\n        inventoryRepository.save(inventory);\n        return inventory;\n    }\n}</code></pre>\n<blockquote>\n<p>This is a REST Service Mapping that can receive the remote call about decreaseStock.\nWhen it receives a call, it takes the role of input adapter that delivers it to the inventory aggregator's decision stock(hexagonal architecture). The real business logic(inventory decrease) must be implemented with ubiquotous language only inside Aggregate.</p>\n</blockquote>\n<ul>\n<li>Implementing inventory/../Inventory.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public void decreaseStock(DecreaseStockCommand decreaseStockCommand) {\n        setStock(getStock() - decreaseStockCommand.getQty().longValue());\n    }</code></pre>\n<h4 id=\"test-of-inventory-service\"><a href=\"#test-of-inventory-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test of inventory service</h4>\n<ul>\n<li>Run inventory service and test if the service could be called properly by using httpie tool:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd inventory\nmvn spring-boot:run\n\n#New Terminal\nhttp :8082/inventories id=1 stock=10\nhttp PUT :8082/inventories/1/decreasestock qty=3\nhttp :8082/inventories/1  # stock must be 7</code></pre>\n<h4 id=\"calling-test-for-inventory-by-monolith\"><a href=\"#calling-test-for-inventory-by-monolith\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Calling test for inventory by monolith</h4>\n<ul>\n<li>Run the monolith and check if the inventory could be called by ordermonolith:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd monolith\nmvn spring-boot:run\n\n#New Terminal\nhttp :8081/orders productId=1 qty=5\nhttp :8082/inventories/1  # stock must be 2</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"MSA Communication by Req/Res","anchor":"#msa-communication-by-reqres"},{"depth":3,"value":"Check the Working Process of Monolith Service","anchor":"#check-the-working-process-of-monolith-service"},{"depth":3,"value":"Separating areas from Monolith to Microservices","anchor":"#separating-areas-from-monolith-to-microservices"},{"depth":4,"value":"Eventstorming","anchor":"#eventstorming"},{"depth":4,"value":"Check & implement the codes from the calling side","anchor":"#check--implement-the-codes-from-the-calling-side"},{"depth":4,"value":"Check & implement the source code from called side","anchor":"#check--implement-the-source-code-from-called-side"},{"depth":4,"value":"Test of inventory service","anchor":"#test-of-inventory-service"},{"depth":4,"value":"Calling test for inventory by monolith","anchor":"#calling-test-for-inventory-by-monolith"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}