{"hash":"889ed6e0496342fdfc23f7722ab2622a17096921","data":{"markdownPage":{"id":"ef4d8b57992d63248437c51e699b88c4","title":"Request/Response Communication in MSA Integration","description":"","path":"/development/monolith-2-misvc/","timeToRead":4,"content":"<h1 id=\"requestresponse-communication-in-msa-integration\"><a href=\"#requestresponse-communication-in-msa-integration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Request/Response Communication in MSA Integration</h1>\n<p>In this guide, we will follow the steps to separate a specific part from a monolithic service and have the monolith and microservices communicate using a Req/Res (Request/Response) approach.</p>\n<h2 id=\"eventstorming-model-preparation\"><a href=\"#eventstorming-model-preparation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EventStorming Model Preparation</h2>\n<ul>\n<li>Open the model in a new tab using the link below:\n<a href=\"https://www.msaez.io/#/storming/labshopmonolith-230822\" target=\"_blank\" rel=\"noopener noreferrer\">Model Link</a></li>\n<li>If the model doesn't load, click on the avatar icon (person shape) in the upper right, log in with your Github account, and then reload.</li>\n<li>Verify that the model, as needed for the level, is displayed.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/7950c0df-eee8-44e3-a79f-7448a4caa30e\" alt=\"image\"></li>\n<li>Ensure that the model is loaded, and if not, fork it using the Fork icon.</li>\n</ul>\n<h3 id=\"separating-a-part-from-the-existing-monolith\"><a href=\"#separating-a-part-from-the-existing-monolith\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Separating a Part from the Existing Monolith</h3>\n<p>Utilize the given model to guide you through the process of modeling, separating the product service from the monolith.</p>\n<h3 id=\"eventstorming\"><a href=\"#eventstorming\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EventStorming</h3>\n<ul>\n<li>Limit the monolith's bounded context to the order domain sticker only.</li>\n<li>Add a new bounded context and name it \"inventory.\"</li>\n<li>Select and move the aggregate objects of the inventory bounded context.\n<img width=\"874\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896320-72973cf1-c1dc-44f4-a46a-9be87d072284.png\"></li>\n<li>Add a command to decrease the stock: Add the \"decrease stock\" command sticker to the inventory BC, and copy the command name below:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">decrease stock</code></pre>\n<ul>\n<li>Attach the Command sticker to the left of the Inventory Aggregate sticker.</li>\n<li>Configure the \"decrease stock\" command: Double-click on the \"decrease stock\" command sticker, choose \"Extend Verb URI\" for Method Type, and add an attribute with type: Integer and name: qty.</li>\n<li>After adding the attribute, click 'Add Attribute' or press Enter to confirm.\n<img width=\"784\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896393-30889e96-6cbc-4e7f-9631-25c0d004635d.png\"></li>\n<li>Connect the OrderPlaced Event sticker in the monolith to the \"decrease stock\" Command sticker in the inventory. The connection should indicate Req/Res.\n<img width=\"859\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896427-f91962cd-f8ab-4113-bd85-5abe1ada3bcd.png\"></li>\n</ul>\n<h2 id=\"code-generation-and-push-to-git-repository\"><a href=\"#code-generation-and-push-to-git-repository\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code Generation and Push to Git Repository</h2>\n<ul>\n<li>Click on 'CODE' > 'Code Preview' in the modeling menu.</li>\n<li>In the dialog that appears, select 'Create New Repository,' and click 'CREATE.'</li>\n</ul>\n<blockquote>\n<p>Since you logged in with your Github account initially, your Git information is automatically displayed.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/dcb1966e-e0d1-43f3-9920-457660923259\" alt=\"image\"></p>\n<ul>\n<li>The model-based code is pushed to your Github.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/6581f400-adb8-4963-bf03-511d459c5e32\" alt=\"image\"></li>\n<li>Click on 'IDE' in the left menu, and then click 'Open GitPod' in the Cloud IDE list.</li>\n</ul>\n</blockquote>\n<h3 id=\"check-the-source-code-on-the-calling-side\"><a href=\"#check-the-source-code-on-the-calling-side\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Check the Source Code on the Calling Side</h3>\n<ul>\n<li>Check the generated sample code in monolith/../Order.java within the @PostPersist section:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@PostPersist\npublic void onPostPersist() {\n    labshopmonolith.external.DecreaseStockCommand decreaseStockCommand = new labshopmonolith.external.DecreaseStockCommand();\n\n  // Load the order quantity information into the command object.\n    decreaseStockCommand.setQty(getQty()); \n    \n  // Make a remote call through the InventoryService Proxy with the command object.\n    MonolithApplication.applicationContext\n        .getBean(labshopmonolith.external.InventoryService.class)\n        .decreaseStock((Long.valueOf(getProductId())), decreaseStockCommand);\n}</code></pre>\n<blockquote>\n<p>Even though we call the decreaseStock stub method as if we were calling a local object, it will actually result in a remote call to the inventory object.\nWe pass the qty value to the Command object for modifying the stock amount and the product id as the first argument to productId in the path.</p>\n</blockquote>\n<ul>\n<li>Check the generated FeignClient-related stub code in monolith/../external package (InventoryService.java, DecreaseStockCommand.java, Inventory.java):</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@FeignClient(name = &quot;inventory&quot;, url = &quot;${api.url.inventory}&quot;)\npublic interface InventoryService {\n    @RequestMapping(\n        method = RequestMethod.PUT,\n        path = &quot;/inventories/{id}/decreasestock&quot;\n    )\n    public void decreaseStock(\n        @PathVariable(&quot;id&quot;) Long id,\n        @RequestBody DecreaseStockCommand decreaseStockCommand\n    );\n\n}</code></pre>\n<blockquote>\n<p>The FeignClient will actually create a proxy object that calls the inventory remote object. The implementation of the remote call, which sends a PUT method to the specified path using the configured url in application.yaml under api.url.inventory, will be filled.</p>\n</blockquote>\n<h2 id=\"check-and-implement-the-code-on-the-called-side\"><a href=\"#check-and-implement-the-code-on-the-called-side\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Check and Implement the Code on the Called Side</h2>\n<ul>\n<li>inventory/.. /infra/InventoryController.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">public class InventoryController {\n\n    @Autowired\n    InventoryRepository inventoryRepository;\n\n    @RequestMapping(value = &quot;inventories/{id}/decreasestock&quot;, method = RequestMethod.PUT, produces = &quot;application/json;charset=UTF-8&quot;)\n    public Inventory decreaseStock(\n        @PathVariable(value = &quot;id&quot;) Long id,\n        @RequestBody DecreaseStockCommand decreaseStockCommand,\n        HttpServletRequest request,\n        HttpServletResponse response\n    ) throws Exception {\n        System.out.println(&quot;##### /inventory/decreaseStock  called #####&quot;);\n        Optional&lt;Inventory&gt; optionalInventory = inventoryRepository.findById(\n            id\n        );\n\n        optionalInventory.orElseThrow(() -&gt; new Exception(&quot;No Entity Found&quot;));\n        Inventory inventory = optionalInventory.get();\n        inventory.decreaseStock(decreaseStockCommand);\n\n        inventoryRepository.save(inventory);\n        return inventory;\n    }\n}</code></pre>\n<blockquote>\n<p>This is the REST service mapping for receiving the remote call for decreaseStock.\nIt acts as an input adapter, passing the input to the decreaseStock method inside the Inventory aggregate, where the actual business logic (decreasing stock) is implemented using ubiquitous language.</p>\n</blockquote>\n<ul>\n<li>Implement the decreaseStock method in inventory/../Inventory.java:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public void decreaseStock(DecreaseStockCommand decreaseStockCommand) {\n        setStock(getStock() - decreaseStockCommand.getQty().longValue());  // Copy &amp; Paste this code\n    }</code></pre>\n<h3 id=\"test-synchronous-call-via-proxy-object\"><a href=\"#test-synchronous-call-via-proxy-object\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test Synchronous Call via Proxy Object</h3>\n<h4 id=\"test-the-inventory-service\"><a href=\"#test-the-inventory-service\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Test the inventory service</h4>\n<ul>\n<li>Run the inventory service and test whether the service is called correctly using the httpie tool:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Register a test product in the inventory and perform a pre-check:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8083/inventories id=1 stock=10\nhttp PUT :8083/inventories/1/decreasestock qty=3\nhttp :8083/inventories/1  # stock must be 7</code></pre>\n<h4 id=\"call-inventory-synchronously-through-monolith\"><a href=\"#call-inventory-synchronously-through-monolith\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Call inventory synchronously through monolith</h4>\n<ul>\n<li>Run the monolith and verify if inventory is called through an actual order:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd monolith\nmvn spring-boot:run\n\n#In a new terminal\nhttp :8082/orders productId=1 qty=5\nhttp :8083/inventories/1  # stock must be 2</code></pre>\n<h1 id=\"references\"><a href=\"#references\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>References</h1>\n<ol>\n<li>To download files: Open the terminal > zip -r test.zip ./ > Download the generated test.zip by right-clicking.</li>\n</ol>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Request/Response Communication in MSA Integration","anchor":"#requestresponse-communication-in-msa-integration"},{"depth":2,"value":"EventStorming Model Preparation","anchor":"#eventstorming-model-preparation"},{"depth":3,"value":"Separating a Part from the Existing Monolith","anchor":"#separating-a-part-from-the-existing-monolith"},{"depth":3,"value":"EventStorming","anchor":"#eventstorming"},{"depth":2,"value":"Code Generation and Push to Git Repository","anchor":"#code-generation-and-push-to-git-repository"},{"depth":3,"value":"Check the Source Code on the Calling Side","anchor":"#check-the-source-code-on-the-calling-side"},{"depth":2,"value":"Check and Implement the Code on the Called Side","anchor":"#check-and-implement-the-code-on-the-called-side"},{"depth":3,"value":"Test Synchronous Call via Proxy Object","anchor":"#test-synchronous-call-via-proxy-object"},{"depth":4,"value":"Test the inventory service","anchor":"#test-the-inventory-service"},{"depth":4,"value":"Call inventory synchronously through monolith","anchor":"#call-inventory-synchronously-through-monolith"},{"depth":1,"value":"References","anchor":"#references"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/model-driven/","title":"Automatic Code Generation"}},{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/custom-template/template-editor/","title":""}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"1. Creating a Repository"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":""}},{"node":{"path":"/custom-template/helper/","title":""}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/custom-template/global-helper/","title":""}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}