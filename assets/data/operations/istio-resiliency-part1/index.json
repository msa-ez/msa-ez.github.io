{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"b0df06500d5706c288a98bf0ce85574d","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도","description":"","path":"/operations/istio-resiliency-part1/","timeToRead":4,"content":"<h1 id=\"service-mesh-istio-를-통한-서비스-회복성-part1---타임아웃재시도\"><a href=\"#service-mesh-istio-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%9A%8C%EB%B3%B5%EC%84%B1-part1---%ED%83%80%EC%9E%84%EC%95%84%EC%9B%83%EC%9E%AC%EC%8B%9C%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도</h1>\n<h3 id=\"istio-timeout--retry\"><a href=\"#istio-timeout--retry\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio Timeout &#x26; Retry</h3>\n<ul>\n<li>주문서비스와 배송서비스를 활용해 이스티오가 제공하는 Service Resiliency 기능 중, '타임아웃'과 '재시도'에 대해 실습한다.\ntutorial 네임스페이스로부터 이전 Lab에서 사용된 애플리케이션을 먼저 삭제한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete deployment,service --all -n tutorial</code></pre>\n<h3 id=\"1-timeout\"><a href=\"#1-timeout\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Timeout</h3>\n<ul>\n<li>주문서비스로부터 응답시간 임계치를 초과하는 경우, 이를 타임아웃 처리하는 Fault Isolation 기능을 실습한다. </li>\n</ul>\n<h4 id=\"주문서비스를-배포한다\"><a href=\"#%EC%A3%BC%EB%AC%B8%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EB%B0%B0%ED%8F%AC%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문서비스를 배포한다.</h4>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply -f - <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n  apiVersion: apps/v1\n  kind: Deployment\n  metadata:\n    name: order\n    namespace: tutorial\n    labels:\n      app: order\n  spec:\n    replicas: 1\n    selector:\n      matchLabels:\n        app: order\n    template:\n      metadata:\n        labels:\n          app: order\n      spec:\n        containers:\n          - name: order\n            image: jinyoung/order:timeout\n            ports:\n              - containerPort: 8080\n            resources:\n              limits:\n                cpu: 500m\n              requests:\n                cpu: 200m\nEOF</span></code></pre>\n<ul>\n<li>Order 서비스 생성</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl expose deploy order --port=8080 -n tutorial</code></pre>\n<h4 id=\"order-서비스-timeout-설정\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4-timeout-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 서비스 Timeout 설정</h4>\n<ul>\n<li>배포된 order 서비스에 타임아웃 임계치(3초)를 가지는 Istio Policy를 생성한다.</li>\n<li></li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply -f - <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n    apiVersion: networking.istio.io/v1alpha3\n    kind: VirtualService\n    metadata:\n      name: vs-order-network-rule\n      namespace: tutorial\n    spec:\n      hosts:\n      - order\n      http:\n      - route:\n        - destination:\n            host: order\n        timeout: 3s\nEOF</span></code></pre>\n<h4 id=\"siege를-통한-워크로드-생성-및-타임아웃-확인\"><a href=\"#siege%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%9B%8C%ED%81%AC%EB%A1%9C%EB%93%9C-%EC%83%9D%EC%84%B1-%EB%B0%8F-%ED%83%80%EC%9E%84%EC%95%84%EC%9B%83-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Siege를 통한 워크로드 생성 및 타임아웃 확인</h4>\n<ul>\n<li>워크로드 생성기인 Siege Pod를 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: siege\n  namespace: tutorial\nspec:\n  containers:\n  - name: siege\n    image: apexacme/siege-nginx\nEOF</code></pre>\n<ul>\n<li>Siege에 접속하여 워크로드가 잘 전달되는지 테스트해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it siege -c siege -n tutorial -- /bin/bash\nsiege -c1 -t4S -v --content-type &quot;application/json&quot; &#39;http://order:8080/orders POST {&quot;productId&quot;: &quot;1001&quot;, &quot;qty&quot;:5}&#39;</code></pre>\n<h4 id=\"타임아웃timeout-트랜잭션-확인\"><a href=\"#%ED%83%80%EC%9E%84%EC%95%84%EC%9B%83timeout-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타임아웃(Timeout) 트랜잭션 확인</h4>\n<ul>\n<li>적절한 부하를 발생시킨다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c30 -t20S -v --content-type &quot;application/json&quot; &#39;http://order:8080/orders POST {&quot;productId&quot;: &quot;1001&quot;, &quot;qty&quot;:5}&#39;</code></pre>\n<ul>\n<li>Order 서비스에 설정된 Timeout 임계치를 초과하는 쓰레드에 대해, 사이드카에서 차단(Fail-fast)되는 것이 확인된다.</li>\n<li>이로써 구현 단계가 아닌 런타임 시점에 폴리글랏 언어기반 컨테이너에 대해 적용 가능함을 알 수 있다. </li>\n</ul>\n<h3 id=\"2-retry\"><a href=\"#2-retry\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Retry</h3>\n<ul>\n<li>Order 서비스에 대한 'Retry' Rule을 추가한다.</li>\n<li>Retry가 발생하는 상황을 연출하고, Jaeger 화면을 통해 사이드카를 추가 수행한 호출을 확인한다. </li>\n</ul>\n<h4 id=\"order-서비스에-retry-rule-추가\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-retry-rule-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 서비스에 'Retry' Rule 추가</h4>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply -f - <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n  apiVersion: networking.istio.io/v1alpha3\n  kind: VirtualService\n  metadata:\n    name: vs-order-network-rule\n    namespace: tutorial\n  spec:\n    hosts:\n    - order\n    http:\n    - route:\n      - destination:\n          host: order\n      timeout: 3s\n      retries:\n        attempts: 3\n        perTryTimeout: 2s\n        retryOn: 5xx,retriable-4xx,gateway-error,connect-failure,refused-stream\nEOF</span></code></pre>\n<h4 id=\"retry-확인-시나리오\"><a href=\"#retry-%ED%99%95%EC%9D%B8-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Retry 확인 시나리오</h4>\n<ul>\n<li>새로운 주문을 한건 생성한다.</li>\n<li>생성된 주문을 취소(DELETE Order ID)하려할 때, 존재하지 않는 배송서비스를 호출하도록 프로그래밍 되어 있는데</li>\n<li>배송서비스 부재(우리가 배포한 적이 없다)로, '500'오류를 리턴하게 되고,</li>\n<li>이를 수신한 Envoy Proxy가 'attempts' 설정횟수 만큼의 Retry를 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it siege -c siege -n tutorial -- /bin/bash\n\n# 새로운 주문 생성\nhttp POST http://order:8080/orders qty=5\n\n# 생성된 주문 Key를 가지는 주문정보 삭제\nhttp DELETE http://order:8080/orders/[생성된 Order ID]</code></pre>\n<ul>\n<li>이때, 데이터 플레인 엔보이 프락시에서 설정된 정책에 따라 내부적으로 재시도가 일어난다.</li>\n</ul>\n<h4 id=\"재시도retry-결과확인\"><a href=\"#%EC%9E%AC%EC%8B%9C%EB%8F%84retry-%EA%B2%B0%EA%B3%BC%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>재시도(Retry) 결과확인</h4>\n<ul>\n<li>추척 서비스인 예거를 접속해 발생한 주문서비스의 재시도를 확인해 본다.</li>\n<li>검색조건: Service : siege.tutorial</li>\n<li>화면 오른쪽 검색결과에서  총 4번의 추가 호출이 데이터플레인의 사이드카에서 요청되었음을 확인할 수 있다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/135967043-086c621e-c04a-4089-8432-e3db8a999a95.png\" alt=\"image\"></p>\n<ul>\n<li>해당 요청을 클릭하면 상세 요청 명세를 조회할 수 있다.\n<img src=\"https://user-images.githubusercontent.com/35618409/135967305-a6c93ef4-b2f1-48dd-8186-1ac20025b7f7.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"order-서비스에-대해-retry를-1회로-하는-policy를-적용해-보고-반영결과를-확인해-보자\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-retry%EB%A5%BC-1%ED%9A%8C%EB%A1%9C-%ED%95%98%EB%8A%94-policy%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%B4-%EB%B3%B4%EA%B3%A0-%EB%B0%98%EC%98%81%EA%B2%B0%EA%B3%BC%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%B4-%EB%B3%B4%EC%9E%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 서비스에 대해 Retry를 1회로 하는 Policy를 적용해 보고, 반영결과를 확인해 보자.</h4>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":" Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도","anchor":"#service-mesh-istio-를-통한-서비스-회복성-part1---타임아웃재시도"},{"depth":3,"value":"Istio Timeout & Retry","anchor":"#istio-timeout--retry"},{"depth":3,"value":"1. Timeout","anchor":"#1-timeout"},{"depth":4,"value":"주문서비스를 배포한다.","anchor":"#주문서비스를-배포한다"},{"depth":4,"value":"Order 서비스 Timeout 설정","anchor":"#order-서비스-timeout-설정"},{"depth":4,"value":"Siege를 통한 워크로드 생성 및 타임아웃 확인","anchor":"#siege를-통한-워크로드-생성-및-타임아웃-확인"},{"depth":4,"value":"타임아웃(Timeout) 트랜잭션 확인","anchor":"#타임아웃timeout-트랜잭션-확인"},{"depth":3,"value":"2. Retry","anchor":"#2-retry"},{"depth":4,"value":"Order 서비스에 'Retry' Rule 추가","anchor":"#order-서비스에-retry-rule-추가"},{"depth":4,"value":"Retry 확인 시나리오","anchor":"#retry-확인-시나리오"},{"depth":4,"value":"재시도(Retry) 결과확인","anchor":"#재시도retry-결과확인"},{"depth":4,"value":"Order 서비스에 대해 Retry를 1회로 하는 Policy를 적용해 보고, 반영결과를 확인해 보자.","anchor":"#order-서비스에-대해-retry를-1회로-하는-policy를-적용해-보고-반영결과를-확인해-보자"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}