{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"ab7b073309108ce1cbc0814984f9f411","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)","description":"","path":"/operations/ops-persistence-volume-gcp/","timeToRead":5,"content":"<h1 id=\"파일공유를-위한-클라우드-스토리지-활용gcp\"><a href=\"#%ED%8C%8C%EC%9D%BC%EA%B3%B5%EC%9C%A0%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%ED%99%9C%EC%9A%A9gcp\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>파일공유를 위한 클라우드 스토리지 활용(GCP)</h1>\n<h2 id=\"주문서비스에-파일공유를-위한-nfs-연결하기\"><a href=\"#%EC%A3%BC%EB%AC%B8%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%ED%8C%8C%EC%9D%BC%EA%B3%B5%EC%9C%A0%EB%A5%BC-%EC%9C%84%ED%95%9C-nfs-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문서비스에 파일공유를 위한 NFS 연결하기</h2>\n<p>이번 랩에서는 여러 마이크로서비스간 파일 공유를 위해 일반적으로 NAS(Network Attached Storage)로 알려진 GCP 파일시스템을 클라우드에 설정하고, 이를 주문서비스에서 마운트시켜 비정형 정보 저장소로 활용하는 예제를 실습한다.</p>\n<h3 id=\"emptydir-volume\"><a href=\"#emptydir-volume\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EmptyDir Volume</h3>\n<ul>\n<li>한 Pod 내에서 컨테이너들간 공유가능한 볼륨 유형이다.</li>\n<li>먼저, 아래 YAML로 Volume을 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f -&lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: shared-volumes\nspec:\n  containers:\n  - image: redis\n    name: redis\n    volumeMounts:\n    - name: shared-storage\n      mountPath: /data/shared\n  - image: nginx\n    name: nginx\n    volumeMounts:\n    - name: shared-storage\n      mountPath: /data/shared\n  volumes:\n  - name: shared-storage\n    emptyDir: {}\nEOF</code></pre>\n<ul>\n<li>Pod내 한 컨테이너에서 생성한 볼륨이 다른 컨테이너에서 가시적인지 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it shared-volumes --container redis -- /bin/bash\ncd /data/shared\necho test… &gt; test.txt\nexit</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it shared-volumes --container nginx -- /bin/bash\ncd /data/shared\nls</code></pre>\n<h3 id=\"hostpath-volume\"><a href=\"#hostpath-volume\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HostPath Volume</h3>\n<ul>\n<li>예제는 컨테이너가 바인딩된 워커노드의 /tmp 폴더를 공유하는 설정이다.</li>\n<li>먼저, 아래 YAML로 Volume을 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f -&lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hostpath\nspec:\n  containers:\n  - name: redis\n    image: redis\n    volumeMounts:\n    - name: somepath\n      mountPath: /data/shared\n  volumes:\n  - name : somepath\n    hostPath:\n      path: /tmp\n      type: Directory\nEOF</code></pre>\n<ul>\n<li>컨테이너로 접속하여 마운트된 볼륨을 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/hostpath -- /bin/sh\nls -al /data/shared</code></pre>\n<h3 id=\"nfs-스토리지filestore-사용\"><a href=\"#nfs-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80filestore-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NFS 스토리지(Filestore) 사용</h3>\n<p>여러 컨테이너에서 사용가능(ReadWriteMany)한 GCP 네트워크 볼륨을 사용설정하고, 이를 컨테이너에서 활용하는 예제를 실습해 본다. </p>\n<ul>\n<li>먼저, 기본 CSI(Container Storage Interface)목록을 확인한다.  </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get storageclass</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">NAME                     PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   \npremium-rwo              pd.csi.storage.gke.io   Delete          WaitForFirstConsumer   true                   \nstandard                 kubernetes.io/gce-pd    Delete          Immediate              true                   \nstandard-rwo (default)   pd.csi.storage.gke.io   Delete          WaitForFirstConsumer   true                     </code></pre>\n<h4 id=\"readwritemanyrwx가-가능한-filestore-사용설정\"><a href=\"#readwritemanyrwx%EA%B0%80-%EA%B0%80%EB%8A%A5%ED%95%9C-filestore-%EC%82%AC%EC%9A%A9%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ReadWriteMany(rwx)가 가능한 Filestore 사용설정</h4>\n<ul>\n<li>브라우저 아래 링크로 접속하여 Filestore API를 활성화 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://cloud.google.com/filestore/docs/install?hl=ko</code></pre>\n<ul>\n<li>생성한 클러스터에도 CSI Driver(Provisioner)를 활성화 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">gcloud container clusters update [CLUSTER-NAME] --update-addons=GcpFilestoreCsiDriver=ENABLED</code></pre>\n<ul>\n<li>성공적으로 작업이 종료되면, \"Updated ~~\" 로그가 출력된다.</li>\n</ul>\n<ul>\n<li>다시, CSI(Container Storage Interface) 목록을 확인해 보자.  </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get storageclass</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">NAME                        PROVISIONER                    RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   \nenterprise-multishare-rwx   filestore.csi.storage.gke.io   Delete          WaitForFirstConsumer   true                   \nenterprise-rwx              filestore.csi.storage.gke.io   Delete          WaitForFirstConsumer   true                   \npremium-rwo                 pd.csi.storage.gke.io          Delete          WaitForFirstConsumer   true                   \npremium-rwx                 filestore.csi.storage.gke.io   Delete          WaitForFirstConsumer   true                   \nstandard                    kubernetes.io/gce-pd           Delete          Immediate              true                   \nstandard-rwo (default)      pd.csi.storage.gke.io          Delete          WaitForFirstConsumer   true                   \nstandard-rwx                filestore.csi.storage.gke.io   Delete          WaitForFirstConsumer   true                   \nzonal-rwx                   filestore.csi.storage.gke.io   Delete          WaitForFirstConsumer   true                   </code></pre>\n<ul>\n<li>filestore CSI의 rwx가 가능한 추가 목록들이 조회된다.</li>\n</ul>\n<h4 id=\"\"></h4>\n<ul>\n<li>아래 YAML로 PVC(Persistence Volume Claim)를 생성하자.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: filestore\nspec:\n  accessModes:\n  - ReadWriteMany\n  storageClassName: standard-rwx\n  resources:\n    requests:\n      storage: 5Gi\nEOF</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get pvc</code></pre>\n<h4 id=\"nfs-볼륨을-가지는-주문마이크로서비스-배포\"><a href=\"#nfs-%EB%B3%BC%EB%A5%A8%EC%9D%84-%EA%B0%80%EC%A7%80%EB%8A%94-%EC%A3%BC%EB%AC%B8%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NFS 볼륨을 가지는 주문마이크로서비스 배포</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: &quot;apps/v1&quot;\nkind: &quot;Deployment&quot;\nmetadata: \n  name: order\n  labels: \n    app: &quot;order&quot;\nspec: \n  selector: \n    matchLabels: \n      app: &quot;order&quot;\n  replicas: 1\n  template: \n    metadata: \n      labels: \n        app: &quot;order&quot;\n    spec: \n      containers: \n      - name: &quot;order&quot;\n        image: &quot;ghcr.io/acmexii/order-liveness:latest&quot;\n        ports: \n          - containerPort: 80\n        volumeMounts:\n          - mountPath: &quot;/mnt/data&quot;\n            name: volume\n      volumes:\n      - name: volume\n        persistentVolumeClaim:\n          claimName: filestore\nEOF</code></pre>\n<ul>\n<li>배포 후 주문 컨테이너에 접속하여 제대로 파일시스템이 마운트되었는지 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get all\nkubectl exec -it [pod/ORDER POD 객체] -- /bin/sh\ncd /mnt/data\necho &quot;NFS Strorage Test.. &quot; &gt; test.txt</code></pre>\n<ul>\n<li>이후, 주문서비스를 2개로 Scale Out하고 확장된 주문 서비스에서도 test.txt가 확인되는지 검증한다.</li>\n<li>또한, 2번째 컨테이너에서도 리소스를 생성해 본다. (ReadWriteMany)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl scale deploy order --replicas=2\nkubectl exec -it [pod/ORDER POD 객체] -- /bin/sh\nls /mnt/data\necho &quot;NFS Strorage Test2.. &quot; &gt; test2.txt</code></pre>\n<h3 id=\"restriction\"><a href=\"#restriction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Restriction</h3>\n<ul>\n<li>Filestore comes with minimum 1TB storage volume.</li>\n<li>\n<p>월 비용확인 : <a href=\"https://cloud.google.com/filestore/pricing?hl=ko\" target=\"_blank\" rel=\"noopener noreferrer\">https://cloud.google.com/filestore/pricing?hl=ko</a></p>\n<ul>\n<li>standard 타입인 경우 : 1024GiB * $0.18 (per GiB) = $184.32</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"filestore-csi-드라이버-사용-중지\"><a href=\"#filestore-csi-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84-%EC%82%AC%EC%9A%A9-%EC%A4%91%EC%A7%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Filestore CSI 드라이버 사용 중지</h3>\n<ul>\n<li>아래 명령으로 기존 Autopilot 또는 Standard 클러스터에서 Filestore CSI 드라이버를 사용 중지할 수 있다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">gcloud container clusters update [CLUSTER-NAME] --update-addons=GcpFilestoreCsiDriver=DISABLED --region/zone [REGION/ZONE]</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"파일공유를 위한 클라우드 스토리지 활용(GCP)","anchor":"#파일공유를-위한-클라우드-스토리지-활용gcp"},{"depth":2,"value":"주문서비스에 파일공유를 위한 NFS 연결하기","anchor":"#주문서비스에-파일공유를-위한-nfs-연결하기"},{"depth":3,"value":"EmptyDir Volume","anchor":"#emptydir-volume"},{"depth":3,"value":"HostPath Volume","anchor":"#hostpath-volume"},{"depth":3,"value":"NFS 스토리지(Filestore) 사용","anchor":"#nfs-스토리지filestore-사용"},{"depth":4,"value":"ReadWriteMany(rwx)가 가능한 Filestore 사용설정","anchor":"#readwritemanyrwx가-가능한-filestore-사용설정"},{"depth":4,"value":"","anchor":""},{"depth":4,"value":"NFS 볼륨을 가지는 주문마이크로서비스 배포","anchor":"#nfs-볼륨을-가지는-주문마이크로서비스-배포"},{"depth":3,"value":"Restriction","anchor":"#restriction"},{"depth":3,"value":"Filestore CSI 드라이버 사용 중지","anchor":"#filestore-csi-드라이버-사용-중지"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}