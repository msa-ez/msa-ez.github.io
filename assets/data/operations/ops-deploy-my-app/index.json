{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"91de8c9e6d37aa4ffef4eec274e7f778","title":"애플리케이션 패키징,도커라이징,클러스터 배포","description":"","path":"/operations/ops-deploy-my-app/","timeToRead":3,"content":"<h1 id=\"애플리케이션-패키징도커라이징클러스터-배포\"><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%8C%A8%ED%82%A4%EC%A7%95%EB%8F%84%EC%BB%A4%EB%9D%BC%EC%9D%B4%EC%A7%95%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>애플리케이션 패키징,도커라이징,클러스터 배포</h1>\n<h3 id=\"12st-클라우드-네이티브-앱-배포\"><a href=\"#12st-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EC%95%B1-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12st 클라우드 네이티브 앱 배포</h3>\n<ul>\n<li>Code > ProjectIDE로 GitPod에 진입한다.</li>\n<li>터미널을 열어서 order 와 inventory, delivery, gateway 폴더로 각각 이동하여 아래 명령어를 실행한다.</li>\n<li>마이크로서비스들이 EDA 통신하기 위한 Kafka 서버를 내 클러스터에 설치한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn package -B -Dmaven.test.skip=true</code></pre>\n<ul>\n<li>target 폴더에 jar 파일이 생성이 되었는지 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">ls target/\njava -jar target/order-0.0.1-SNAPSHOT.jar</code></pre>\n<p>명령으로 실행이 가능한지 확인한다.</p>\n<ul>\n<li>ctrl+c 를 눌러서 jar 실행에서 빠져 나온다.</li>\n</ul>\n<h3 id=\"1-도커라이징\"><a href=\"#1-%EB%8F%84%EC%BB%A4%EB%9D%BC%EC%9D%B4%EC%A7%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 도커라이징</h3>\n<ul>\n<li>order 와 delivery, gateway 의 최상위 root 에 Dockerfile이 있는지 확인한다.</li>\n<li>Dockerfile 파일이 있는 프로젝트 루트에서 아래 명령을 실행한다.  </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"> docker login # 최초, 한번만 실행해도 됨\n docker build -t [dockerhub ID]/order:[오늘날짜] .     \n docker image ls\n docker push [dockerhub ID]/order:[오늘날짜]  </code></pre>\n<ul>\n<li>Docker hub에서 image 확인</li>\n</ul>\n<h3 id=\"2-클러스터에-배포\"><a href=\"#2-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 클러스터에 배포</h3>\n<h4 id=\"클러스터에-event-storekafka-설치\"><a href=\"#%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-event-storekafka-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클러스터에 Event Store(kafka) 설치</h4>\n<p>Helm(패키지 인스톨러) 설치 (1회만 수행) </p>\n<ul>\n<li>Linux : Helm 3.x 설치</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 <span class=\"token operator\">></span> get_helm.sh\n<span class=\"token function\">chmod</span> <span class=\"token number\">700</span> get_helm.sh\n./get_helm.sh</code></pre>\n<ul>\n<li>Windows  : Helm 설치 참조 : <a href=\"https://lifeplan-b.tistory.com/37\" target=\"_blank\" rel=\"noopener noreferrer\">https://lifeplan-b.tistory.com/37</a></li>\n</ul>\n<h4 id=\"helm으로-kafka-설치\"><a href=\"#helm%EC%9C%BC%EB%A1%9C-kafka-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>helm으로 Kafka 설치</h4>\n<pre class=\"language-bash\"><code class=\"language-bash\">helm repo <span class=\"token function\">add</span> bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nhelm <span class=\"token function\">install</span> my-kafka bitnami/kafka --version <span class=\"token number\">23.0</span>.5</code></pre>\n<ul>\n<li>설치 확인 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get all</code></pre>\n<h4 id=\"주문서비스-yaml로-배포\"><a href=\"#%EC%A3%BC%EB%AC%B8%EC%84%9C%EB%B9%84%EC%8A%A4-yaml%EB%A1%9C-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문서비스 yaml로 배포</h4>\n<ul>\n<li>order/kubernetes 폴더내의 deployment.yaml을 오픈한다.</li>\n<li>image: 부분을 push 한 이미지 명으로 수정한다:  [dockerhub ID]/order:[오늘날짜]  </li>\n<li>저장후, 다음명령:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f kubernetes/deployment.yaml\n\nkubectl apply -f kubernetes/service.yaml</code></pre>\n<ul>\n<li>배포 확인 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get all</code></pre>\n<h3 id=\"3-product-delivery-gateway에-대해서도-동일작업-수행\"><a href=\"#3-product-delivery-gateway%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C%EB%8F%84-%EB%8F%99%EC%9D%BC%EC%9E%91%EC%97%85-%EC%88%98%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. product, delivery, gateway에 대해서도 동일작업 수행</h3>\n<ul>\n<li>12stMall을 구성하는 다른 서비스에 대해서도 반복 실행하여 배포한다.</li>\n</ul>\n<h3 id=\"서비스-확인\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 확인</h3>\n<ul>\n<li>\n<p>게이트웨이 주소 확인</p>\n<ul>\n<li>kubectl get svc\n</li>\n</ul>\n</li>\n<li>\n<p>Pod 생성 확인</p>\n<ul>\n<li>kubectl get po </li>\n</ul>\n</li>\n<li>\n<p>재고 생성</p>\n<pre class=\"language-text\"><code class=\"language-text\">http [gateway IP]:8080/inventories id=1 stock=100</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">\t</code></pre>\n</li>\n<li>\n<p>주문 생성</p>\n<pre class=\"language-text\"><code class=\"language-text\">http [gateway IP]:8080/orders\nhttp [gateway IP]:8080/orders productId=1 productName=&quot;TV&quot; qty=3</code></pre>\n</li>\n</ul>\n<h3 id=\"kafka-클라이언트로-이벤트-확인\"><a href=\"#kafka-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EB%A1%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 클라이언트로 이벤트 확인</h3>\n<h4 id=\"kafka-메시지-확인하기\"><a href=\"#kafka-%EB%A9%94%EC%8B%9C%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 메시지 확인하기</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl run my-kafka-client --restart=&#39;Never&#39; --image docker.io/bitnami/kafka:3.5.0-debian-11-r21 --namespace default --command -- sleep infinity\nkubectl exec --tty -i my-kafka-client --namespace default -- bash\nkafka-console-consumer.sh --bootstrap-server my-kafka.default.svc.cluster.local:9092 --topic modelforops --from-beginning</code></pre>\n<h3 id=\"잘-안될때\"><a href=\"#%EC%9E%98-%EC%95%88%EB%90%A0%EB%95%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>잘 안될때</h3>\n<ol>\n<li>쿠버네티스 객체 들이 이미 존재하는 경우, 다음을 통하여 객체들을 제거:</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete deploy --all\nkubectl delete svc --all</code></pre>\n<ol>\n<li>External IP 로 접속이 되지 않는 경우</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl port-forward svc/order 8080:8080 </code></pre>\n<p>한 후, localhost:8080 으로 접속</p>\n<ol>\n<li>ImagePullBackOff: 이미지 명이 잘못되었거나 push가 안된 경우 </li>\n</ol>\n<h3 id=\"더-많은-테스트\"><a href=\"#%EB%8D%94-%EB%A7%8E%EC%9D%80-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>더 많은 테스트</h3>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete po --all\n# 한후, 서비스 접속 -&gt; 좀있다가 회복\nkubectl get po   # po가 다시 생성되었음을 확인\n\nkubectl scale deploy order --replicas=3\nkubectl get po \n# order를 위한 pod가 3개가 생성됨을 확인</code></pre>\n<h3 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h3>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/0hTlS54gqxA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"애플리케이션 패키징,도커라이징,클러스터 배포","anchor":"#애플리케이션-패키징도커라이징클러스터-배포"},{"depth":3,"value":"12st 클라우드 네이티브 앱 배포","anchor":"#12st-클라우드-네이티브-앱-배포"},{"depth":3,"value":"1. 도커라이징","anchor":"#1-도커라이징"},{"depth":3,"value":"2. 클러스터에 배포","anchor":"#2-클러스터에-배포"},{"depth":4,"value":"클러스터에 Event Store(kafka) 설치","anchor":"#클러스터에-event-storekafka-설치"},{"depth":4,"value":"helm으로 Kafka 설치","anchor":"#helm으로-kafka-설치"},{"depth":4,"value":"주문서비스 yaml로 배포","anchor":"#주문서비스-yaml로-배포"},{"depth":3,"value":"3. product, delivery, gateway에 대해서도 동일작업 수행","anchor":"#3-product-delivery-gateway에-대해서도-동일작업-수행"},{"depth":3,"value":"서비스 확인","anchor":"#서비스-확인"},{"depth":3,"value":"Kafka 클라이언트로 이벤트 확인","anchor":"#kafka-클라이언트로-이벤트-확인"},{"depth":4,"value":"Kafka 메시지 확인하기","anchor":"#kafka-메시지-확인하기"},{"depth":3,"value":"잘 안될때","anchor":"#잘-안될때"},{"depth":3,"value":"더 많은 테스트","anchor":"#더-많은-테스트"},{"depth":3,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}