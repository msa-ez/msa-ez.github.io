{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"dc7eb5d3c1f46bc20c55f3fcacf78559","title":"[GitOps] Argo CD 를 통한 카나리 배포","description":"","path":"/operations/gitops-argo-cd/","timeToRead":4,"content":"<h1 id=\"gitops-argo-cd-를-통한-카나리-배포\"><a href=\"#gitops-argo-cd-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%B9%B4%EB%82%98%EB%A6%AC-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[GitOps] Argo CD 를 통한 카나리 배포</h1>\n<h2 id=\"argo-cd-를-통한-배포\"><a href=\"#argo-cd-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo CD 를 통한 배포</h2>\n<ul>\n<li>Argo CD 는 GitOps기반의 지속적인 배포를 지원하는 Kubernetes Plug-in 이다:</li>\n<li>이번 실습에서는 깃헙기반의 배포 매니페스트를 자동으로 읽어 배포하는 실습을 진행한다.</li>\n<li>실습에 필요한 아래 Github 리소스를 내 GitHub으로 복제(접속 후, Fork)해 둔다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">https://github.com/argoproj/argocd-example-apps.git</code></pre>\n<h3 id=\"install-argo-cd\"><a href=\"#install-argo-cd\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install Argo CD</h3>\n<ul>\n<li>먼저 Argo cd 를 Cluster에 설치한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</code></pre>\n<p>Argo CD UI 를 접속하기 위하여 LoadBalancer 로 전환한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch svc argocd-server -n argocd -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n<p>Argo CD UI 의 External IP 주소를 획득한다</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get svc argocd-server -n argocd</code></pre>\n<p>접속한다.</p>\n<p>Argo CD 는 기본 https 로 UI 서비스가 열리므로, 인증서가 없이 서비스를 열었으므로, 이를 그냥 접속하기 위해서 해당 페이지에서 허공에 대고 \"thisisunsafe\" 를 입력하면 다음과 같은 페이지로 넘어간다 ㅡㅡ;</p>\n<p><img src=\"https://i1.wp.com/DeployHappiness.com/wp-content/uploads/2019/02/01.png?fit=442%2C230&#x26;ssl=1\"></p>\n<p>접속 user id 는 admin 이고 password 는 다음과 같이 Secret 에서 얻어내어야 한다 (무슨 CD 툴이 왠 보안에 엄청 신경을):</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&quot;{.data.password}&quot; | base64 -d</code></pre>\n<ul>\n<li>조회된 비밀번호를 붙여넣고 로그인(SIGN IN)하면 아래와 같은 메인이 출력된다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/00719984-5f28-4aab-adc7-11af7769099b\" alt=\"argo-main\"></li>\n</ul>\n<h3 id=\"argo-cd-gitops-설정\"><a href=\"#argo-cd-gitops-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo CD GitOps 설정</h3>\n<ul>\n<li>상단에 보여지는 'NEW APP'을 클릭하여 애플리케이션을 등록한다.</li>\n</ul>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/new-app.png\"></p>\n<ul>\n<li>Guestbook Application 을 등록한다:</li>\n</ul>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/app-ui-information.png\"></p>\n<ul>\n<li>내 계정으로 복제된 guest book application 의 git 주소를 argo 에 등록한다.</li>\n</ul>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/connect-repo.png\"></p>\n<ul>\n<li>배포될 타겟 클러스터를 지정한다:</li>\n</ul>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/destination.png\"></p>\n<blockquote>\n<p>kubernetes.default.svc 가 내가 포함된 서비스의 기본 접속 주소이다.\nnamespace를 \"guestbook\"으로 설정한다.</p>\n</blockquote>\n<ul>\n<li>상단의 'CREATE'를 눌러 설정을 저장한다.</li>\n<li>Argo Main에 guestbook 애플리케이션이 카드목록으로 나타난다.\n<img src=\"https://github.com/acmexii/demo/assets/35618409/d94f0803-e162-43c1-98d7-5096b8aed91a\" alt=\"image\"></li>\n<li>\n<p>출력된 guestbook 애플리케이션 하단의 'SYNC'를 눌러 동기화를 진행한다:</p>\n<blockquote>\n<p>팝업에서 다시 'SYNCHRONIZE'를 한번 더 클릭한다.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"미션-manual-sync\"><a href=\"#%EB%AF%B8%EC%85%98-manual-sync\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>미션 (Manual Sync)</h3>\n<p>Git guestbook 폴더 하위에 있는 Manifests에 변화를 주고, 이를 동기화 시켜서 반영이 되는지 확인한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">Github &gt; guestbook 폴더의 배포 yaml을 편집하여 이미지 이름을 nginx:1.19.10로 수정하고 저장(Commit)한다.\nArgo CD UI에서 &#39;Sync&#39;를 눌러 GitOps 배포를 진행한다.</code></pre>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/guestbook-app.png\"></p>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/guestbook-tree.png\"></p>\n<h3 id=\"확장미션-auto-sync\"><a href=\"#%ED%99%95%EC%9E%A5%EB%AF%B8%EC%85%98-auto-sync\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장미션 (Auto Sync)</h3>\n<p>Canary 배포 Manifest를 가진 신규 Argo CD 앱 추가</p>\n<h3 id=\"시나리오\"><a href=\"#%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>시나리오</h3>\n<ol>\n<li>order-canary 폴더를 argocd-example-apps Git 리파지토리 루트에 생성한다.</li>\n<li>order-canary 폴더에 canary.yaml을 생성하고ㅎ아래의 링크 내용을 열어 복사해 저장(Commit)한다.\n<a href=\"https://raw.githubusercontent.com/msa-school/Lab-required-Materials/main/Ops/canary.yaml\" target=\"_blank\">canary.yaml 링크</a></li>\n<li>\n<p>Argo CD UI상에서 새로운 애플리케이션을 생성한다.</p>\n<blockquote>\n<p>애플리케이션 이름은 order로 설정한다.\nSync 옵션은 Automatic으로 설정한다.\n나머지 옵션은 guestbook을 참고하여 설정한다.</p>\n</blockquote>\n</li>\n<li>등록된 order 애플리케이션을 동기화하여 배포한다.</li>\n<li>이어서 47행의 이미지를 아래처럼 수정하고, Argo CD를 통한 카나리배포를 모니터링한다. </li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\"> image: &quot;jinyoung/app:blue&quot;  --&gt;  image: &quot;nginx:1.7.9&quot;</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":" Argo CD 를 통한 카나리 배포","anchor":"#gitops-argo-cd-를-통한-카나리-배포"},{"depth":2,"value":"Argo CD 를 통한 배포","anchor":"#argo-cd-를-통한-배포"},{"depth":3,"value":"Install Argo CD","anchor":"#install-argo-cd"},{"depth":3,"value":"Argo CD GitOps 설정","anchor":"#argo-cd-gitops-설정"},{"depth":3,"value":"미션 (Manual Sync)","anchor":"#미션-manual-sync"},{"depth":3,"value":"확장미션 (Auto Sync)","anchor":"#확장미션-auto-sync"},{"depth":3,"value":"시나리오","anchor":"#시나리오"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}