{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"110af4828bf8a15f4fa3afe2148880ac","title":"Kubernetes에 환경변수 구성하기","description":"","path":"/operations/ops-configmap/","timeToRead":7,"content":"<h1 id=\"kubernetes에-환경변수-구성하기\"><a href=\"#kubernetes%EC%97%90-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kubernetes에 환경변수 구성하기</h1>\n<h2 id=\"컨테이너로부터-환경변수-분리\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%A1%9C%EB%B6%80%ED%84%B0-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EB%B6%84%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>컨테이너로부터 환경변수 분리</h2>\n<ul>\n<li>컨피그맵(Configmap)은 쿠버네티스가 컨테이너에서 필요한 환경설정 내용을 컨테이너와 분리해 저장하고 제공해 주기 위해 사용한다.</li>\n<li>단순한 환경정보의 수정을 위해 전체 CI/CD 파이프라인을 태우면서 배포해야 하는 것은 민첩성에 부합한 운영이 아니다.</li>\n<li>본 랩에서는 Configmap으로부터 필요한 환경정보를 전달받아 주문서비스를 실행하는 랩을 실습한다.</li>\n</ul>\n<h3 id=\"configmap-활용하기\"><a href=\"#configmap-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ConfigMap 활용하기</h3>\n<ul>\n<li>먼저, Imperative한 방식으로 ConfigMap을 생성해 본다.</li>\n<li>Class는 MSA, Lab은 ConfigMap 값을 가진 컨피그 맵 객체를 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create configmap my-config --from-literal=class=MSA --from-literal=Lab=ConfigMap</code></pre>\n<ul>\n<li>생성된 CM 객체를 조회하고 값을 확인해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get configmap my-config -o yaml</code></pre>\n<ul>\n<li>ConfigMap 등록된 클래스(class) 정보를 생성되는 컨테이너에 전달하려면, 배포 YAML에 다음과 같이 정의하여야 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">...\n...\nspec:\n  containers:\n  - name: cm-file\n    image: user/order:v1\n    imagePullPolicy: Always\n    ports:\n    - containerPort: 8080\n    env:\n    - name: CLASS\n      valueFrom:\n        configMapKeyRef:\n          name: my-config\n          key: class\n...\n...</code></pre>\n<ul>\n<li>이제는 YAML 기반의 ConfigMap을 생성하고, 이를 주문서비스에서 활용해 보자.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config-dev\n  namespace: default\ndata:\n  ORDER_DB_URL: jdbc:mysql://mysql:3306/connectdb1?serverTimezone=Asia/Seoul&amp;useSSL=false\n  ORDER_DB_USER: myuser\n  ORDER_DB_PASS: mypass\n  ORDER_LOG_LEVEL: DEBUG\nEOF</code></pre>\n<ul>\n<li>생성된 ConfigMap 객체를 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get configmap\nkubectl get configmap config-dev -o yaml</code></pre>\n<h3 id=\"configmap-예제코드-다운로드\"><a href=\"#configmap-%EC%98%88%EC%A0%9C%EC%BD%94%EB%93%9C-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ConfigMap 예제코드 다운로드</h3>\n<pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/msa-school/lab-shop-configmap.git\ncd lab-shop-configmap</code></pre>\n<h3 id=\"configmap-설정-중-일부-설정만-참조하기\"><a href=\"#configmap-%EC%84%A4%EC%A0%95-%EC%A4%91-%EC%9D%BC%EB%B6%80-%EC%84%A4%EC%A0%95%EB%A7%8C-%EC%B0%B8%EC%A1%B0%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ConfigMap 설정 중, 일부 설정만 참조하기</h3>\n<ul>\n<li>주문서비스의 Logging 레벨을 Configmap의 ORDER_DEBUG_INFO 참조하도록 설정 확인</li>\n<li>VS Code로 주문서비스 Code 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nkubernetes &gt; deployment.yaml </code></pre>\n<ul>\n<li>주문서비스 Kubernetes에 배포</li>\n<li>order > README.md을 참조하여 docker hub 이미지를 생성하고, 내 Cluster에 배포</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">mvn package -B -DskipTests\ndocker build -t username/order:v1 .\ndocker run username/order:v1\ndocker push username/order:v1</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f kubernetes/deployment.yaml</code></pre>\n<ul>\n<li>배포 후, 컨테이너 Log를 통해 DEBUG 로그레벨이 적용되었음을 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl logs -l app=order</code></pre>\n<h3 id=\"log-level을-debug에서-info-수준으로-변경\"><a href=\"#log-level%EC%9D%84-debug%EC%97%90%EC%84%9C-info-%EC%88%98%EC%A4%80%EC%9C%BC%EB%A1%9C-%EB%B3%80%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Log Level을 Debug에서 Info 수준으로 변경</h3>\n<ul>\n<li>ConfigMap의 ORDER_LOG_LEVEL을 수정하여 업데이트</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config-dev\n  namespace: default\ndata:\n  ORDER_DB_URL: jdbc:mysql://mysql:3306/connectdb1?serverTimezone=Asia/Seoul&amp;useSSL=false\n  ORDER_DB_USER: myuser\n  ORDER_DB_PASS: mypass\n  ORDER_LOG_LEVEL: INFO\nEOF</code></pre>\n<ul>\n<li>주문 컨테이너를 재실행</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete pod -l app=order\nkubectl get pod</code></pre>\n<ul>\n<li>재실행 후, 컨테이너 Log를 통해 INFO 로그레벨이 적용되었음을 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl logs -l app=order</code></pre>\n<ul>\n<li>Configmap에서 각 Container로 전달된 환경정보를 확인하기 위해 아래 커맨드를 실행해 보자.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec pod/ORDER 객체 -- env</code></pre>\n<ul>\n<li>배포시 전달된 ORDER_LOG_LEVEL 정보가 주문 컨테이너 OS에 설정되었음을 알 수 있다.</li>\n</ul>\n<h3 id=\"configmap에-있는-모든-데이터-한꺼번에-전달하기\"><a href=\"#configmap%EC%97%90-%EC%9E%88%EB%8A%94-%EB%AA%A8%EB%93%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%9C%EA%BA%BC%EB%B2%88%EC%97%90-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ConfigMap에 있는 모든 데이터 한꺼번에 전달하기</h3>\n<ul>\n<li>주문서비스 > kubernetes > deployment.yaml 38~43라인을 아래 YAML로 수정한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">        envFrom:\n        - configMapRef:\n            name: config-dev</code></pre>\n<p>-주문서비스를 다시 배포한 다음, 컨테이너 OS의 환경정보를 확인한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete deploy -l app=order\nkubectl apply -f kubernetes/deployment.yaml\n\nkubectl exec pod/ORDER 객체 -- env</code></pre>\n<ul>\n<li>이외에도 컨피그맵을 볼륨으로 가져와서 사용할 수 있는데, 각 데이터 키를 이름으로가지는 파일을 만들어서 넣어주는 방식도 있다.</li>\n</ul>\n<h2 id=\"secret-활용\"><a href=\"#secret-%ED%99%9C%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Secret 활용</h2>\n<ul>\n<li>Secret도 ConfigMap과 동일한 형태로 yaml파일이 작성된다.</li>\n<li>차이점은 Plain type의 ConfigMap과 다르게 Base64 형태로 value가 저장된다는 것과 암호, 토큰 또는 민감한 정보를 저장하기 위한 오브젝트인 점에서 차이가 있다.</li>\n<li>Secret 사용 예시</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">.....\n.....\n  env:\n    - name: LOG_LEVEL\n      valueFrom:\n        configMapKeyRef:\n           name: config-dev\n           key: ORDER_LOG_LEVEL\n    - name: DB_PASS\n      valueFrom:\n        secretKeyRef: \n          name: secret-dev\n          key: ORDER_DB_PASS</code></pre>\n<h3 id=\"docker-credential-secret-생성-및-활용\"><a href=\"#docker-credential-secret-%EC%83%9D%EC%84%B1-%EB%B0%8F-%ED%99%9C%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Credential Secret 생성 및 활용</h3>\n<ul>\n<li>\n<p>시나리오</p>\n<ul>\n<li>도커허브에 배포한 Homepage 이미지에 대해 접근모드를 Private으로 전환한다.</li>\n<li>이미지 배포시 Credentials이 없으면 ImagePullBackOff 오류가 발생한다.</li>\n<li>Docker Credential을 가지는 Secret 객체를 생성해 Yaml Spec.에 추가해 주면 ACL이 설정된 이미지가 정상 배포됨을 확인한다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"이미지-저장소를-private-mode로-설정\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%A0%80%EC%9E%A5%EC%86%8C%EB%A5%BC-private-mode%EB%A1%9C-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 저장소를 Private Mode로 설정</h4>\n<ul>\n<li>도커허브에 접속하여 배포한 Home, or welcome 이미지 Settings 메뉴에서 Visibility를 Private 모드로 변경</li>\n<li>아래 YAML을 deploy-with-secret.yaml 로 저장한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-home\n  labels:\n    app: home\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: home\n  template:\n    metadata:\n      labels:\n        app: home\n    spec:\n      containers:\n      - name: home\n        image: [MY-IMAGE-NAME]\n        ports:\n        - containerPort: 80</code></pre>\n<ul>\n<li>저장한 deploy-with-secret.yaml 을 배포한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f deploy-with-secret.yaml</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get all\nkubectl describe pod/[POD 객체]</code></pre>\n<ul>\n<li>Private Mode로 전환됨에 따라 Image가 Pulling되지 않는다.</li>\n<li>Pod의 라이프사이클 로그를 조회한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl describe pod/[Pod 객체]</code></pre>\n<ul>\n<li>조회결과, 이미지는 존재하나 인증(Authorization) 오류가 확인된다.</li>\n<li>만약, Private Mode임에도 정상 배포다면 이는 Runtime Cache에서 참조된 것으로 아래 YAML Spec.을 추가하고 다시 적용해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    spec:\n      containers:\n      - name: home\n        image: [MY-IMAGE-NAME]\n\t\timagePullPolicy: Always    # &lt;&lt;&lt; 이 라인 추가\n        ports:\n        - containerPort: 80\t\t</code></pre>\n<h4 id=\"docker-config-secret-생성\"><a href=\"#docker-config-secret-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Config Secret 생성</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create secret docker-registry my-docker-cred \\\n--docker-server=https://index.docker.io/v1/ \\\n--docker-username=[DOCKER-ACCOUNT] \\\n--docker-password=[PASSWORD] \\\n--docker-email=[E-MAIL]</code></pre>\n<ul>\n<li>Dcoker hub일 경우, docker-server에 ‘<a href=\"https://index.docker.io/v1/%E2%80%99\" target=\"_blank\" rel=\"noopener noreferrer\">https://index.docker.io/v1/’</a> 입력</li>\n<li>생성된 Secret을 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get secret\nkubectl get secret my-docker-cred -o yaml</code></pre>\n<ul>\n<li>조회된 .dockerconfigjson value를 base64 디코딩하여 Docker Credential을 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">echo [.dockerconfigjson Value] | base64 --decode</code></pre>\n<h4 id=\"service-재배포\"><a href=\"#service-%EC%9E%AC%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service 재배포</h4>\n<ul>\n<li>아래 imagePullSecrets 속성을 배포 스펙에 추가하고 저장한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">...\n    spec:\n      containers:\n      - name: home\n        image: [MY-IMAGE-NAME]\n        ports:\n        - containerPort: 80\n      imagePullSecrets:\t        # 여기서부터 추가\n      - name: my-docker-cred</code></pre>\n<h4 id=\"컨테이너-재배포\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%9E%AC%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>컨테이너 재배포</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete -f deploy-with-secret.yaml\nkubectl apply -f deploy-with-secret.yaml\nkubectl get all</code></pre>\n<ul>\n<li>컨테이너가 정상적으로 생성되어 Running Pod Status가 확인된다.</li>\n</ul>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Kubernetes에 환경변수 구성하기","anchor":"#kubernetes에-환경변수-구성하기"},{"depth":2,"value":"컨테이너로부터 환경변수 분리","anchor":"#컨테이너로부터-환경변수-분리"},{"depth":3,"value":"ConfigMap 활용하기","anchor":"#configmap-활용하기"},{"depth":3,"value":"ConfigMap 예제코드 다운로드","anchor":"#configmap-예제코드-다운로드"},{"depth":3,"value":"ConfigMap 설정 중, 일부 설정만 참조하기","anchor":"#configmap-설정-중-일부-설정만-참조하기"},{"depth":3,"value":"Log Level을 Debug에서 Info 수준으로 변경","anchor":"#log-level을-debug에서-info-수준으로-변경"},{"depth":3,"value":"ConfigMap에 있는 모든 데이터 한꺼번에 전달하기","anchor":"#configmap에-있는-모든-데이터-한꺼번에-전달하기"},{"depth":2,"value":"Secret 활용","anchor":"#secret-활용"},{"depth":3,"value":"Docker Credential Secret 생성 및 활용","anchor":"#docker-credential-secret-생성-및-활용"},{"depth":4,"value":"이미지 저장소를 Private Mode로 설정","anchor":"#이미지-저장소를-private-mode로-설정"},{"depth":4,"value":"Docker Config Secret 생성","anchor":"#docker-config-secret-생성"},{"depth":4,"value":"Service 재배포","anchor":"#service-재배포"},{"depth":4,"value":"컨테이너 재배포","anchor":"#컨테이너-재배포"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}