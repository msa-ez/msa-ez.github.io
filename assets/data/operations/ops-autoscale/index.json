{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"8f60e0027c61501264e408cf9ba92b42","title":"Pod Auto Scaling","description":"","path":"/operations/ops-autoscale/","timeToRead":5,"content":"<h1 id=\"pod-auto-scaling\"><a href=\"#pod-auto-scaling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pod Auto Scaling</h1>\n<h3 id=\"replicaset을-활용한-scale-out-실습\"><a href=\"#replicaset%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-scale-out-%EC%8B%A4%EC%8A%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ReplicaSet을 활용한 Scale-Out 실습</h3>\n<p>클라우드의 리소스를 잘 활용하기 위해서는 요청이 적을때는 최소한의 Pod 를 유지한 후에 요청이 많아질 경우 Pod를 확장하여 요청을 처리할 수 있다.<br>\nPod 를 Kubernetes에서 수평적으로 확장하는 방법을 HorizontalPodAutoscaler(HPA) 라고 부른다. replicas 를 관리하는 Deployment, StatefulSet 에 적용이 가능하고, 확장이 불가능한 DaemonSets 에는 설정이 불가능하다.  </p>\n<p>HPA는 워크로드의 CPU 또는 메모리를 측정하여 작동하기 때문에 Kubernetes 에 metric server 를 필수적으로 설치가 되어있어야 한다.</p>\n<p>이번시간에는 HPA 설정을 적용 한 후에, siege 라는 부하 테스트 툴을 사용하여 서비스에 부하를 주어 Pod 가 Auto Scale-Out 되는 실습을 한다.</p>\n<h3 id=\"manual-scale-out\"><a href=\"#manual-scale-out\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Manual Scale Out</h3>\n<ul>\n<li>실습에 필요한 주문서비스를 배포한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create deploy order --image=jinyoung/monolith-order:v20210504\nkubectl expose deploy order --port=8080</code></pre>\n<ul>\n<li>주문서비스 서비스 개수를 조정한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl scale deploy order --replicas=3\n# 주문서비스가 3개로 확장된다.\nkubectl scale deploy order --replicas=1</code></pre>\n<h3 id=\"auto-scale-out-준비\"><a href=\"#auto-scale-out-%EC%A4%80%EB%B9%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Auto Scale Out 준비</h3>\n<ul>\n<li>\n<p>부하 테스트 Pod 설치</p>\n<ul>\n<li>\n<p>워크로드 생성기를 설치하여 확장 스크립트에 활용한다.\n- 아래 스크립트를 terminal 에 복사하여 siege 라는 Pod 를 생성한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t\t```</code></pre>\n<p>kubectl apply -f - &#x3C;&#x3C;EOF\napiVersion: v1\nkind: Pod\nmetadata:\nname: siege\nspec:\ncontainers:</p>\n<ul>\n<li>\n<p>name: siege\nimage: apexacme/siege-nginx\nEOF</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t\t```</code></pre>\n</li>\n</ul>\n</li>\n<li>생성된 siege Pod 안쪽에서 정상작동 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it siege -- /bin/bash\nsiege -c1 -t2S -v http://order:8080/orders\nexit</code></pre>\n</li>\n</ul>\n<h4 id=\"aws-eks에-metric-server-설치\"><a href=\"#aws-eks%EC%97%90-metric-server-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AWS EKS에 Metric server 설치</h4>\n<ul>\n<li>kubectl top pods 를 실행했을때, 아래와 같이 정보가 나오면 설치가 되어있다.\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">\tNAME                     CPU(cores)   MEMORY(bytes)   \n\torder-684647ccf9-ltlqg   3m           288Mi           \n\tsiege                    0m           8Mi   </code></pre>\n<ul>\n<li>\"error: Metrics API not available\" 메시지가 나오면 metric server가 설치되지 않은은 것으로 아래와 같은 명령어로 설치한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\nkubectl get deployment metrics-server -n kube-system</code></pre>\n<h3 id=\"1-order서비스에-auto-scale-out-설정\"><a href=\"#1-order%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-auto-scale-out-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Order서비스에 Auto Scale-Out 설정</h3>\n<p>1.0 Auto Scaler를 설정한다</p>\n<ul>\n<li>오토 스케일링 설정명령어 호출</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl autoscale deployment order --cpu-percent=50 --min=1 --max=3</code></pre>\n<ul>\n<li>\"cpu-percent=50 : Pod 들의 요청 대비 평균 CPU 사용율(YAML Spec.에서 요청량이 200 milli-cores일때, 모든 Pod의 평균 CPU 사용율이 100 milli-cores(50%)를 넘게되면 HPA 발생)\"</li>\n<li>kubectl get hpa 명령어로 설정값을 확인 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">NAME    REFERENCE          TARGETS         MINPODS   MAXPODS   REPLICAS   AGE\norder   Deployment/order   &lt;unknown&gt;/20%   1         3         0          7s</code></pre>\n<p>1.1 배포파일에 CPU 요청에 대한 값을 지정한다.</p>\n<ul>\n<li>아래 YAML을 복사하여 order-deploy.yaml로 로컬에 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: order\n  labels:\n    app: order\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: order\n  template:\n    metadata:\n      labels:\n        app: order\n    spec:\n      containers:\n        - name: order\n          image: jinyoung/monolith-order:v20210602\n          ports:\n            - containerPort: 8080\n          resources:\n            requests:\n              cpu: &quot;200m&quot;            \n          readinessProbe:\n            httpGet:\n              path: &#39;/actuator/health&#39;\n              port: 8080\n            initialDelaySeconds: 10\n            timeoutSeconds: 2\n            periodSeconds: 5\n            failureThreshold: 10\n          livenessProbe:\n            httpGet:\n              path: &#39;/actuator/health&#39;\n              port: 8080\n            initialDelaySeconds: 120\n            timeoutSeconds: 2\n            periodSeconds: 5\n            failureThreshold: 5</code></pre>\n<ul>\n<li>현재, 배포된 주문서비스를 삭제하고 재배포한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete -f order-deploy.yaml\nkubectl apply -f order-deploy.yaml</code></pre>\n<p>1.2 배포 완료 후 kubectl get deploy order -o yaml 명령을 쳐서 image 와 resources의 값이 정상적으로 설정되어있는지 확인</p>\n<ul>\n<li>kubectl get po 실행하여 STATUS가 정상적으로 Running 상태 확인</li>\n</ul>\n<h3 id=\"2-auto-scale-out-증명\"><a href=\"#2-auto-scale-out-%EC%A6%9D%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Auto Scale-Out 증명</h3>\n<p>2.1 새로운 터미널을 열어서 seige 명령으로 부하를 주어서 Pod 가 늘어나도록 한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it siege -- /bin/bash\nsiege -c20 -t40S -v http://order:8080/orders\nexit</code></pre>\n<p>2.2 터미널 1개는 kubectl get po -w 명령을 사용하여 pod 가 생성되는 것을 확인한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">order-7b76557b8f-bgptv   1/1     Running   0          34m\nsiege                    1/1     Running   0          33m\norder-7b76557b8f-7g9d6   0/1     Pending   0          0s\norder-7b76557b8f-hmssb   0/1     Pending   0          0s\norder-7b76557b8f-7g9d6   0/1     ContainerCreating   0          0s\norder-7b76557b8f-hmssb   0/1     ContainerCreating   0          0s\norder-7b76557b8f-7g9d6   0/1     Running             0          6s\norder-7b76557b8f-hmssb   0/1     Running             0          6s\norder-7b76557b8f-7g9d6   1/1     Running             0          23s\norder-7b76557b8f-hmssb   1/1     Running             0          27s</code></pre>\n<p>2.3 kubectl get hpa 명령어로 CPU 값이 늘어난 것을 확인 한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">NAME    REFERENCE          TARGETS     MINPODS   MAXPODS   REPLICAS   AGE\norder   Deployment/order   1152%/20%   1         3         3          37m</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Pod Auto Scaling","anchor":"#pod-auto-scaling"},{"depth":3,"value":"ReplicaSet을 활용한 Scale-Out 실습","anchor":"#replicaset을-활용한-scale-out-실습"},{"depth":3,"value":"Manual Scale Out","anchor":"#manual-scale-out"},{"depth":3,"value":"Auto Scale Out 준비","anchor":"#auto-scale-out-준비"},{"depth":4,"value":"AWS EKS에 Metric server 설치","anchor":"#aws-eks에-metric-server-설치"},{"depth":3,"value":"1. Order서비스에 Auto Scale-Out 설정","anchor":"#1-order서비스에-auto-scale-out-설정"},{"depth":3,"value":"2. Auto Scale-Out 증명","anchor":"#2-auto-scale-out-증명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}