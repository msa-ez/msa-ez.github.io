{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"872d7fe0e1f4dc413920d4d10809ae33","title":"[Service Mesh] Istio-2","description":"","path":"/operations/ops-service-mesh-istio-2/","timeToRead":4,"content":"<h1 id=\"service-mesh-istio-2\"><a href=\"#service-mesh-istio-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio-2</h1>\n<h2 id=\"download--install-istio\"><a href=\"#download--install-istio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Download &#x26; Install Istio</h2>\n<ol>\n<li>본 랩에서는 Istio Service Mesh를 내 클러스터에 설치하고, 모니터링을 위한 대쉬보드를 추가 설정해 본다.</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">export ISTIO_VERSION=1.18.1\ncurl -L https://istio.io/downloadIstio | ISTIO_VERSION=$ISTIO_VERSION TARGET_ARCH=x86_64 sh -</code></pre>\n<ol>\n<li>Istio 패키지 폴더로 이동시킨다 </li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">cd istio-$ISTIO_VERSION</code></pre>\n<p>   해당 디렉토리에는 다음의 내용을 포함하고 있다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">- 샘플애플리케이션: `samples/`\n- `istioctl` 클라이언트 툴은\n  `bin/` 디렉토리에 포함되어있다.</code></pre>\n<ol>\n<li><code>istioctl</code> 클라이언트를 PATH에 잡아준다:</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">export PATH=$PWD/bin:$PATH</code></pre>\n<h2 id=\"install-istio\"><a href=\"#install-istio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install Istio</h2>\n<ol>\n<li>기본적인 구성인 <code>demo</code> 를 기반으로 설치한다. </li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">istioctl install --set profile=demo --set hub=gcr.io/istio-release</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">    ✔ Istio core installed\n    ✔ Istiod installed\n    ✔ Egress gateways installed\n    ✔ Ingress gateways installed\n    ✔ Installation complete</code></pre>\n<h2 id=\"istio-add-on-dashboard-설치\"><a href=\"#istio-add-on-dashboard-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio add-on Dashboard 설치</h2>\n<p>Istio 는 다른 텔레메트리 모니터링 툴과 같이 제공이 된다. 이 툴은 서비스 매시의 구조를 쉽게 들여다 볼 수 있도록 되어있어 서비스간 호출 구조와 핼쓰상태를 쉽게 이해할 수 있도록 CNCF(<a href=\"http://cncf.io\" target=\"_blank\" rel=\"noopener noreferrer\">http://cncf.io</a>)에 등록된 GUI기반 모니터링 도구가 제공된다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">mv samples/addons/loki.yaml samples/addons/loki.yaml.old\ncurl -o samples/addons/loki.yaml https://raw.githubusercontent.com/msa-school/Lab-required-Materials/main/Ops/loki.yaml\nkubectl apply -f samples/addons</code></pre>\n<h3 id=\"모니터링tracing--monitoring-툴-설정\"><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81tracing--monitoring-%ED%88%B4-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>모니터링(Tracing &#x26; Monitoring) 툴 설정</h3>\n<p>배포된 마이크로서비스들의 토폴로지를 보여주는 에드온 서버로, 사용자 트레픽의 흐름이나 설정된 이스티오 구성요소들의 동작상황을 실시간 감지하여 그래피컬하게 제공해 준다. </p>\n<h4 id=\"monitoring-server---kiali\"><a href=\"#monitoring-server---kiali\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Monitoring Server - Kiali</h4>\n<ul>\n<li>정상 설치 후, ServiceType을 ClusterIP에서 LoadBalancer로 변경한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch svc kiali -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n<ul>\n<li>서비스 메시 모니터(kiali) 접속 : 브라우저의 새 탭에서 다음 랩 테스트를 위해, 생성된 엔드포인트로 접속한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get service -n istio-system</code></pre>\n<ul>\n<li>kiali EXTERNAL-IP:20001 <code>(admin/admin)</code></li>\n</ul>\n<h4 id=\"tracing-server---jaeger\"><a href=\"#tracing-server---jaeger\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tracing Server - Jaeger</h4>\n<p>외부 요청이 응답으로 나가기까지 백엔드에서의 마이크로서비스간 호출 순서와 각 서비스들의 리드 타임 및 각 호출에서의 HTTP Header 내용을 조회할 수 있는 추적 서버이다. </p>\n<ul>\n<li>정상 설치 후, ServiceType을 ClusterIP에서 LoadBalancer로 변경한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch svc tracing -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n<ul>\n<li>분산추적 시스템(tracing) 접속 : 브라우저의 새 탭에서 다음 랩 테스트를 위해, 생성된 엔드포인트로 접속한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get service -n istio-system</code></pre>\n<ul>\n<li>tracing EXTERNAL-IP:80</li>\n</ul>\n<h3 id=\"how-to-inject-sidecar-on-istio-environment\"><a href=\"#how-to-inject-sidecar-on-istio-environment\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How to inject Sidecar on Istio environment</h3>\n<p>클러스터에 설치된 Istio, 서비스 메시는 자동으로 사이드카(Sidecar)를 Pod 내에 인잭션하지 않는다. 배포 시, 전처리 과정을 거치거나, 지정된 Label을 가진 네임스페이스 상에서 동작한다.</p>\n<h4 id=\"1-by-using-the--istioctl-kube-inject-preprocessing-command\"><a href=\"#1-by-using-the--istioctl-kube-inject-preprocessing-command\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. By using the  \"Istioctl kube-inject\" preprocessing command</h4>\n<pre class=\"language-text\"><code class=\"language-text\">e.g. \n$ kubectl apply -f &lt;(istioctl kube-inject -f deployment.yaml)</code></pre>\n<ul>\n<li>아래 YAML을 deployment.yaml로 저장하고, 위 1번의 과정으로 생성된 Output를 확인해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: hello-nginx\n  template:\n    metadata:\n      labels:\n        app: hello-nginx\n    spec:\n      containers:\n        - name: hello-nginx\n          image: nginx:latest\n          ports:\n            - containerPort: 80</code></pre>\n<ul>\n<li>저장후 실행할 커맨드 : </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">istioctl kube-inject -f deployment.yaml &gt; output.yaml</code></pre>\n<h4 id=\"2-by-installing-on-the-namespace-where-istio-is-enabled\"><a href=\"#2-by-installing-on-the-namespace-where-istio-is-enabled\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. By installing on the namespace where Istio is enabled</h4>\n<pre class=\"language-text\"><code class=\"language-text\">e.g. \n$ kubectl label namespace tutorial istio-injection=enabled\n$ kubectl apply -f deployment.yaml -n tutorial</code></pre>\n<h2 id=\"uninstall\"><a href=\"#uninstall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Uninstall</h2>\n<p>The Istio uninstall deletes the RBAC permissions and all resources hierarchically\nunder the <code>istio-system</code> namespace. It is safe to ignore errors for non-existent\nresources because they may have been deleted hierarchically.</p>\n<pre class=\"language-text\"><code class=\"language-text\">cd istio-$ISTIO_VERSION\nkubectl delete -f samples/addons\nistioctl manifest generate --set profile=demo | kubectl delete --ignore-not-found=true -f -</code></pre>\n<p>The <code>istio-system</code> namespace is not removed by default.\nIf no longer needed, use the following command to remove it:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete namespace istio-system</code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":" Istio-2","anchor":"#service-mesh-istio-2"},{"depth":2,"value":"Download & Install Istio","anchor":"#download--install-istio"},{"depth":2,"value":"Install Istio","anchor":"#install-istio"},{"depth":2,"value":"Istio add-on Dashboard 설치","anchor":"#istio-add-on-dashboard-설치"},{"depth":3,"value":"모니터링(Tracing & Monitoring) 툴 설정","anchor":"#모니터링tracing--monitoring-툴-설정"},{"depth":4,"value":"Monitoring Server - Kiali","anchor":"#monitoring-server---kiali"},{"depth":4,"value":"Tracing Server - Jaeger","anchor":"#tracing-server---jaeger"},{"depth":3,"value":"How to inject Sidecar on Istio environment","anchor":"#how-to-inject-sidecar-on-istio-environment"},{"depth":4,"value":"1. By using the  \"Istioctl kube-inject\" preprocessing command","anchor":"#1-by-using-the--istioctl-kube-inject-preprocessing-command"},{"depth":4,"value":"2. By installing on the namespace where Istio is enabled","anchor":"#2-by-installing-on-the-namespace-where-istio-is-enabled"},{"depth":2,"value":"Uninstall","anchor":"#uninstall"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}