{"hash":"fa5fedf1848133ded319caa58f5dc027d2a72899","data":{"markdownPage":{"id":"df72a796aec00dae488e3d13129d2c88","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포","description":"","path":"/operations/ops-argo-rollout-canary-istio/","timeToRead":5,"content":"<h1 id=\"gitops-argo-rollout-와-istio-를-통한-카나리-배포\"><a href=\"#gitops-argo-rollout-%EC%99%80-istio-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%B9%B4%EB%82%98%EB%A6%AC-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포</h1>\n<h2 id=\"argo-rollout-을-기반한-카나리-배포\"><a href=\"#argo-rollout-%EC%9D%84-%EA%B8%B0%EB%B0%98%ED%95%9C-%EC%B9%B4%EB%82%98%EB%A6%AC-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo Rollout 을 기반한 카나리 배포</h2>\n<iframe width=\"1155\" height=\"722\" src=\"https://www.youtube.com/embed/KDrDEMfWygo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n \n---\n- Argo Rollout 과 Istio 의 Traffic Management 를 통하여 안정적인 카나리아 배포를 실습한다.\n<h3 id=\"argo-rollout-설치\"><a href=\"#argo-rollout-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo Rollout 설치</h3>\n<p>터미널에 아래를 입력하여 Argo rollout Plug-in을 설치한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create ns argo-rollouts\n\nkubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml</code></pre>\n<h3 id=\"argo-rollout-객체의-생성\"><a href=\"#argo-rollout-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo Rollout 객체의 생성</h3>\n<p>다음 내용으로 rollout.yaml 파일을 생성한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: example-rollout\nspec:\n  replicas: 10\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.19.10\n        ports:\n        - containerPort: 80\n  minReadySeconds: 30\n  revisionHistoryLimit: 3\n  strategy:\n    canary: #Indicates that the rollout should use the Canary strategy\n      maxSurge: &quot;25%&quot;\n      maxUnavailable: 0\n      steps:\n      - setWeight: 10\n      - pause:\n          duration: 10s # 1 \n      - setWeight: 20\n      - pause:\n          duration: 10s # 1 hour\n      - setWeight: 30\n      - pause:\n          duration: 10s # 1 hour\n      - setWeight: 40\n      - pause:\n          duration: 10s # 1 hour\n\n\n---\n\n  apiVersion: &quot;v1&quot;\n  kind: &quot;Service&quot;\n  metadata: \n    name: &quot;nginx&quot;\n    labels: \n      app: &quot;nginx&quot;\n  spec: \n    ports: \n      - \n        port: 80\n        targetPort: 80\n    selector: \n      app: &quot;nginx&quot;\n    type: &quot;LoadBalancer&quot;</code></pre>\n<h4 id=\"rollout을-배포한다\"><a href=\"#rollout%EC%9D%84-%EB%B0%B0%ED%8F%AC%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Rollout을 배포한다.</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f rollout.yaml</code></pre>\n<h3 id=\"argo-cli--dashboard-의-설치\"><a href=\"#argo-cli--dashboard-%EC%9D%98-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo CLI / Dashboard 의 설치</h3>\n<p>argo CLI kubectl Plugin 설치:</p>\n<pre class=\"language-text\"><code class=\"language-text\">curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64\nchmod +x ./kubectl-argo-rollouts-linux-amd64\nsudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\"># 설치 버전 확인 \nkubectl argo rollouts version  </code></pre>\n<p>Argo Dashboard 웹 서비스를 로컬에 올린다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl argo rollouts dashboard\n# Argo Rollout 3100 Port-forwarding\n# GitPod에서 3100 포트를 Public으로 설정하고 접속해 본다.</code></pre>\n<p><img src=\"https://argoproj.github.io/argo-rollouts/dashboard/rollouts-list.png\" alt=\"Argo Dashboard\"></p>\n<p>GUI환경이 지원되지 않을 때, Argo CLI로 모니터링하기:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl argo rollouts get rollout example-rollout --watch</code></pre>\n<p>argo rollout 으로 배포를 실시한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl argo rollouts set image example-rollout  nginx=jinyoung/app:blue</code></pre>\n<ul>\n<li>Argo Rollout Dashboard 를 통하여 배포가 진행되는 과정을 살펴본다</li>\n<li>브라우저를 통하여 배포된 서비스의 주소로 접속, 배포 과정에서 실제 서비스의 접속시 배경색이 흰색(nginx:1.19.x)에서 푸른색(jinyoung/app:blue)으로 교차되는 것을 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># LoadBalancer Type으로 새성된 Nginx EXTERNAL-IP를 복사하여 접속\n# 브라우저 &#39;새로고침&#39;이 아닌, 주소창에 마우스를 눌러 엔터키로 확인 (Because of Cache)</code></pre>\n<ul>\n<li>브라우저 리프래시가 힘들면 다음과 같이 watch 명령을 통하여 html 이 교차하면서 변경됨을 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">watch http &lt;Rollout 서비스의 EXTERNAL IP&gt;</code></pre>\n<h2 id=\"istio를-통한-카나리-배포\"><a href=\"#istio%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%B9%B4%EB%82%98%EB%A6%AC-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio를 통한 카나리 배포</h2>\n<ul>\n<li>다음의 Rollout 은 Virtual Service 의 Traffic 배분을 매 10초 간격으로 조정하면서 카나리 배포를 실시한다:</li>\n<li>Istio기반 Canary 배포와 함께 Argo rollout의 배포관련 추가 오퍼레이션을 학습한다.</li>\n<li>다음 내용으로 canary.yaml 파일을 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: rollout-order\nspec:\n  replicas: 5\n  strategy:\n    canary:\n      trafficRouting:\n        istio:\n          virtualService: \n            name: rollout-vsvc        # required\n            routes:\n            - primary                 # required\n          destinationRule:\n            name: rollout-destrule    # required\n            canarySubsetName: canary  # required\n            stableSubsetName: stable  # required\n      steps:\n      - setWeight: 5\n      - pause:\n          duration: 10s\n      - setWeight: 20\n      - pause:\n          duration: 10s\n      - setWeight: 40\n      - pause:\n          duration: 10s\n      - setWeight: 60\n      - pause:\n          duration: 10s\n      - setWeight: 80\n      - pause:\n          duration: 10s\n\n  revisionHistoryLimit: 2\n  selector:\n    matchLabels:\n      app: order\n  template:\n    metadata:\n      labels:\n        app: order\n    spec:\n      containers:\n      - name: order\n        image: &quot;jinyoung/app:blue&quot;\n        ports:\n        - name: http\n          containerPort: 80\n          protocol: TCP\n        resources:\n          requests:\n            memory: 32Mi\n            cpu: 5m\n\n--- \napiVersion: &quot;networking.istio.io/v1alpha3&quot;\nkind: &quot;Gateway&quot;\nmetadata: \n  name: &quot;shopping-gateway&quot;\nspec: \n  selector: \n    istio: &quot;ingressgateway&quot;\n  servers: \n    - \n      port: \n        number: 80\n        name: &quot;http&quot;\n        protocol: &quot;HTTP&quot;\n      hosts: \n        - &quot;*&quot;\n---\n  apiVersion: &quot;v1&quot;\n  kind: &quot;Service&quot;\n  metadata: \n    name: &quot;order&quot;\n    labels: \n      app: &quot;order&quot;\n  spec: \n    ports: \n      - \n        port: 80\n        targetPort: 80\n    selector: \n      app: &quot;order&quot;\n    type: &quot;LoadBalancer&quot;\n\n--- \n\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: rollout-vsvc\nspec:\n  gateways:\n  - shopping-gateway\n  hosts:\n  - &quot;*&quot;\n  http:\n  - name: primary       # referenced in canary.trafficRouting.istio.virtualService.routes\n    match: \n    - uri: \n        exact: &quot;/orders&quot;\n    rewrite:\n      uri: &quot;/&quot;\n    route:\n    - destination:\n        host: order\n        subset: stable  # referenced in canary.trafficRouting.istio.destinationRule.stableSubsetName\n      weight: 100\n    - destination:\n        host: order\n        subset: canary  # referenced in canary.trafficRouting.istio.destinationRule.canarySubsetName\n      weight: 0\n\n\n---\n\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: rollout-destrule\nspec:\n  host: order\n  subsets:\n  - name: canary   # referenced in canary.trafficRouting.istio.destinationRule.canarySubsetName\n    labels:        # labels will be injected with canary rollouts-pod-template-hash value\n      app: order\n  - name: stable   # referenced in stable.trafficRouting.istio.destinationRule.stableSubsetName\n    labels:        # labels will be injected with stable rollouts-pod-template-hash value\n      app: order</code></pre>\n<p>위의 파일을 적용하고, 다음의 명령들을 통해 배포, 롤백, 다시 배포 (빠르게), 그리고 다시 롤백 (빠르게) 하는 방법을 수행한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\"># 반영\nkubectl apply -f canary.yaml \n\n# 새버전 반영\nkubectl argo rollouts set image rollout-order order=nginx\n\n# 롤백 (카나리 롤백)\nkubectl argo rollouts undo rollout-order\n\n# 다시반영 (빠르게 - 카나리 off)\nkubectl argo rollouts set image rollout-order order=jinyoung/app:blue\nkubectl argo rollouts promote rollout-order --full\n\n# 다시 롤백 (빠르게 - 카나리 off)\nkubectl argo rollouts undo rollout-order\nkubectl argo rollouts promote rollout-order --full</code></pre>\n<ul>\n<li>진행과정을 모니터링하기 위해 위의 GUI 대시보드 및 Order 서비스 관찰</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># LoadBalancer Type으로 새성된 order EXTERNAL-IP를 복사하여 접속\n# 브라우저 &#39;새로고침&#39;이 아닌, 주소창에 마우스를 눌러 엔터키로 확인 (Because of Cache)</code></pre>\n<ul>\n<li>다음의 커맨드로도 Text 기반 모니터링이 가능하다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl argo rollouts get rollout rollout-order --watch</code></pre>\n<ul>\n<li>또는, 서비스를 접속확인 하기 위해서 istio-ingress 주소를 얻어서 watch 로 변화를 확인한다:</li>\n<li>얻어낸 external ip 뒤에 \"/orders\" 를 넣어서 watch 한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get svc istio-ingressgateway -n istio-system\nwatch http [istio-ingressgateway external ip]/orders</code></pre>\n<p>참고기사:  <a href=\"https://dev.to/stack-labs/canary-deployment-with-argo-cd-and-istio-406d\" target=\"_blank\" rel=\"noopener noreferrer\">https://dev.to/stack-labs/canary-deployment-with-argo-cd-and-istio-406d</a></p>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":" Argo Rollout 와 Istio 를 통한 카나리 배포","anchor":"#gitops-argo-rollout-와-istio-를-통한-카나리-배포"},{"depth":2,"value":"Argo Rollout 을 기반한 카나리 배포","anchor":"#argo-rollout-을-기반한-카나리-배포"},{"depth":3,"value":"Argo Rollout 설치","anchor":"#argo-rollout-설치"},{"depth":3,"value":"Argo Rollout 객체의 생성","anchor":"#argo-rollout-객체의-생성"},{"depth":4,"value":"Rollout을 배포한다.","anchor":"#rollout을-배포한다"},{"depth":3,"value":"Argo CLI / Dashboard 의 설치","anchor":"#argo-cli--dashboard-의-설치"},{"depth":2,"value":"Istio를 통한 카나리 배포","anchor":"#istio를-통한-카나리-배포"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/marketplace/","title":"Template/Topping Marketplace"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/operations/ops-persistence-volume-azure/","title":"파일공유를 위한 클라우드 스토리지 활용(Azure)"}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/tool/chat-gpt/","title":"Chat GPT-based Model Generation"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/service-mesh-ab-testing/","title":"Istio based A/B testing 배포"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-persistence-volume-gcp/","title":"파일공유를 위한 클라우드 스토리지 활용(GCP)"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-label-annotation/","title":"Labels and Annotations"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-configmap/","title":"Kubernetes에 환경변수 구성하기"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-csi-setting/","title":"AWS Cloud Setup(Container Storage Interface)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging2/","title":"마이크로서비스 통합 로깅 with Loki stack"}},{"node":{"path":"/operations/istio-sre-monitoring/","title":"Service Reliability Engineering"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/custom-template/unit-test/","title":"Unit Test Creation Topping(New)"}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub Communication - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"Understanding JPA Based Single Microservice"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token-based Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Communication"}},{"node":{"path":"/development/orchestration-saga/","title":"Orchestration Saga with Axon Framework"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub Communication - Choreography with Deadline added"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authorization - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"MSA Communication by Req/Res"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-scaling-concurrenty-handling/","title":"Kafka scaling & Concurrenty handling"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/kafka-basic/","title":"Kafka Basic Commands"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/conteact-messaging/","title":"Conteact Test by Message-based CDC"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"Food Delivery Example"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub Communication - Compensation & Correlation"}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga with Axon Framework"}},{"node":{"path":"/development/cna-start/","title":"Running Microservice Units"}},{"node":{"path":"/development/circuit-breaker/","title":"Circuit Breaker for Req/Res"}},{"node":{"path":"/contact/question/","title":"CONTACT"}},{"node":{"path":"/business/ddd-google-drive/","title":"Google Drive Example"}},{"node":{"path":"/business/","title":"Shopping Mall Example"}}]}},"context":{}}