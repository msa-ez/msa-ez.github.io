{"hash":"0960ee8640743127d8f292e6058a2090e26cbc82","data":{"markdownPage":{"id":"5727002f6d0a904a02dc2fa2794b6efe","title":"Veterinary Practice Management System","description":"","path":"/example-scenario/animal-hospital/","timeToRead":14,"content":"<h1 id=\"veterinary-practice-management-system\"><a href=\"#veterinary-practice-management-system\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Veterinary Practice Management System</h1>\n<p>Source: <a href=\"https://github.com/msa-ez/example-animal-hospital\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/msa-ez/example-animal-hospital</a></p>\n<h3>Article 2 Task - Establishment of veterinary practice management system</h3>\n<p>This system is configured to cover all stages of analysis/design/implementation/operation including MSA/DDD/Event Storming/EDA.<br>This system contains answers to pass the Cloud Native Application Final Project performance test.</p>\n<h2 id=\"service-scenario\"><a href=\"#service-scenario\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>service scenario</h2>\n<p><strong>Functional requirements</strong><br>\n1. The customer makes reservations and cancellations of reservations at the veterinary hospital. <br>\n2. Customers who have made a reservation receive treatment. <br>\n3. Receipt bills the customer for medical expenses. <br>\n4. The client pays for the treatment. <br>\n5. If the reservation is changed/cancelled, the treatment/prescription is changed/cancelled. <br>\n6. Whenever the reservation status changes, a notification is sent through KakaoTalk. <br>\n7. The customer can inquire the reservation status in the Lookup system.<br>\n<br><br></p>\n<p><strong>Non-functional requirements</strong><br>\n1. Transaction</p>\n<ul>\n<li>\n<ol>\n<li>Reservation should not be possible when medical treatment is not available. Sync call</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Isolation of failure </li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>If only the reservation/treatment system (core) is intact, the system should be performed normally. Async (event-driven), Eventual Consistency</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>Even if there is a failure in the text notification and treatment payment system, the reservation/treatment (core) system works normally.</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>If the treatment system is overloaded, it induces reservations to be made after a while. Circuit breaker, fallback</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Performance</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>The customer should be able to check the reservation/treatment/treatment result in the system</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>implemented as a lookup system, CQRS You should be able to give notifications. (Event driven)</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"analysisdesign\"><a href=\"#analysisdesign\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Analysis/Design</h2>\n<p><strong><a href=\"http://msaez.io/#/storming/0vtSW2vBLoZTFiAsgdwS6H7ODs33/2dac041f4e652d598a042694dfa26b20\" target=\"_blank\" rel=\"noopener noreferrer\">Eventstorming results modeled with MSAEz</a></strong></p>\n<ul>\n<li>Core Domain: Reservation and Diagnosis domain</li>\n<li>Supporting Domain: Lookup (CQRS) domain</li>\n<li>General Domain: notice system.</li>\n</ul>\n<h3 id=\"-hexagonal-architecture-diagram-derivation\"><a href=\"#-hexagonal-architecture-diagram-derivation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Hexagonal Architecture Diagram Derivation</h3>\n<p><img src=\"https://user-images.githubusercontent.com/38850007/79833622-aad4a200-83e6-11ea-80f1-6eb9a59503af.png\" alt=\"image\"></p>\n<h2 id=\"implementation\"><a href=\"#implementation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Implementation</h2>\n<p>According to the hexagonal architecture derived from the analysis/design phase, microservices represented by each BC were implemented with Spring Boot. The method to run each implemented service locally is as follows (each port number is 8081 ~ 808n)</p>\n<p>The veterinary hospital reservation/treatment system consists of the following 7 microservices.</p>\n<ol>\n<li>Gateway: <a href=\"https://github.com/AnimalHospital2/gateway.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/AnimalHospital2/gateway.git</a></li>\n<li>Oauth system: <a href=\"https://github.com/AnimalHospital2/ouath.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/AnimalHospital2/ouath.git</a></li>\n<li>Reservation system: <a href=\"https://github.com/AnimalHospital2/reservation.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/AnimalHospital2/reservation.git</a></li>\n<li>Medical system: <a href=\"https://github.com/AnimalHospital2/diagnosis.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/AnimalHospital2/diagnosis.git</a></li>\n<li>Accommodation system: <a href=\"https://github.com/AnimalHospital2/acceptance.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/AnimalHospital2/acceptance.git</a></li>\n<li>Notification system: <a href=\"https://github.com/AnimalHospital2/notice.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/AnimalHospital2/notice.git</a></li>\n</ol>\n<ul>\n<li>The gateway system changed the settings according to the project using the examples used in class.</li>\n<li>The Oauth system used the example used in class as it is.</li>\n</ul>\n<p>All systems are implemented with Spring Boot and can be executed with the mvn <code>mvn spring-boot:run</code> command.</p>\n<h3 id=\"-application-of-ddd\"><a href=\"#-application-of-ddd\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Application of DDD</h3>\n<ul>\n<li>The core Aggregate Root object derived in each service is declared as Entity: (Example: Reservation.class of reservation system). At this time, I tried to use the language (ubiquitous language) used in the field as it is possible.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>reservation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>reservation<span class=\"token punctuation\">.</span>external<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MedicalRecord</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>reservation<span class=\"token punctuation\">.</span>external<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MedicalRecordService</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonProcessingException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectMapper</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Processor</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageChannel</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageHeaders</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageBuilder</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MimeTypeUtils</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"RESERVATION\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Reservation</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> reservatorName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> reservationDate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostPersist</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishReservationReservedEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">MedicalRecord</span> medicalRecord <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MedicalRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        medicalRecord<span class=\"token punctuation\">.</span><span class=\"token function\">setReservationId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        medicalRecord<span class=\"token punctuation\">.</span><span class=\"token function\">setDoctor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Brad pitt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        medicalRecord<span class=\"token punctuation\">.</span><span class=\"token function\">setMedicalOpinion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no more stars\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        medicalRecord<span class=\"token punctuation\">.</span><span class=\"token function\">setTreatment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Just rest at home and you'll be fine.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ReservationApplication</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MedicalRecordService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diagnosis</span><span class=\"token punctuation\">(</span>medicalRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">// Reserved event occurs</span>\n\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            json <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReservationReserved</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON format exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Processor</span> processor <span class=\"token operator\">=</span> <span class=\"token class-name\">ReservationApplication</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MessageChannel</span> outputChannel <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        outputChannel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageBuilder</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageHeaders</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONTENT_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MimeTypeUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostUpdate</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishReservationChangedEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            json <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReservationChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON format exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Processor</span> processor <span class=\"token operator\">=</span> <span class=\"token class-name\">ReservationApplication</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MessageChannel</span> outputChannel <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        outputChannel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageBuilder</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageHeaders</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONTENT_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MimeTypeUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostRemove</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">publishReservationCanceledEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            json <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReservationCanceled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON format exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Processor</span> processor <span class=\"token operator\">=</span> <span class=\"token class-name\">ReservationApplication</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MessageChannel</span> outputChannel <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        outputChannel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageBuilder</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageHeaders</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONTENT_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MimeTypeUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getReservatorName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> reservatorName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setReservatorName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> reservatorName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reservatorName <span class=\"token operator\">=</span> reservatorName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getReservationDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> reservationDate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setReservationDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> reservationDate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reservationDate <span class=\"token operator\">=</span> reservationDate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> phoneNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phoneNumber <span class=\"token operator\">=</span> phoneNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>By applying Entity Pattern and Repository Pattern, RestRepository of Spring Data REST was applied to automatically create data access adapter so that there is no separate processing for various data source types (RDB or NoSQL) through JPA. H2 was used as RDB. </li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>reservation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CrudRepository</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReservationRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CrudRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Reservation</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Testing of REST API after application</li>\n</ul>\n<p>caution!!! FeignClient is applied to the reservation service. Here, the diagnosis system's api address is hard-coded, so it is necessary to test with different values in the local test environment and in the cloud test environment.</p>\n<p>Change the contents of package com.example.reservation.external.MedicalRecordService according to the test environment;</p>\n<ul>\n<li>When testing the local environment</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"diagnosis\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8083\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MedicalRecordService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"/medicalRecords\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">diagnosis</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">MedicalRecord</span> medicalRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Cloud environment testing</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"diagnosis\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://diagnosis:8080\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MedicalRecordService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"/medicalRecords\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">diagnosis</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">MedicalRecord</span> medicalRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The following commands are entered using the httpie program.</p>\n<pre class=\"language-text\"><code class=\"language-text\"># Reservation of reservation service\nhttp post localhost:8081/reservations reservatorName=&quot;Jackson&quot; reservationDate=&quot;2020-04-30&quot; phoneNumber=&quot;010-1234-5678&quot;\n\n# Cancellation of reservation service\nhttp delete localhost:8081/reservations/1\n\n# Change the reservation of the reservation service\nhttp patch localhost:8081/reservations/1 reservationDate=&quot;2020-05-01&quot;\n\n# Check the list of medical records\nhttp localhost:8083/medicalRecords</code></pre>\n<h3 id=\"-synchronous-invocation-and-fallback-handling\"><a href=\"#-synchronous-invocation-and-fallback-handling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Synchronous Invocation and Fallback Handling</h3>\n<p>As one of the conditions in the analysis phase, the call between reservation->diagnosis was decided to be processed as a transaction that maintains synchronous consistency. The calling protocol allows the REST service already exposed by the Rest Repository to be called using FeignClient. </p>\n<ul>\n<li>Implement service proxy interface (Proxy) using FeignClient to call medical service</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># (app) Payment history Service.java\npackage com.example.reservation.external;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@FeignClient(name = &quot;diagnosis&quot;, url = &quot;http://diagnosis:8080&quot;)\n  public interface MedicalRecordService {\n\n    @RequestMapping(method = RequestMethod.POST, path = &quot;/medicalRecords&quot;)\n    public void diagnosis(@RequestBody MedicalRecord medicalRecord);\n}</code></pre>\n<ul>\n<li>Process to request diagnosis immediately after reservation completion (@PostPersist)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># Reservation.java (Entity)\n    @PostPersist\n       public void publishReservationReservedEvent() {\n   \n           // When an appointment is made, treatment proceeds immediately.\n           MedicalRecord medicalRecord = new MedicalRecord();\n   \n           medicalRecord.setReservationId(this.getId());\n           medicalRecord.setDoctor(&quot;Brad pitt&quot;);\n           medicalRecord.setMedicalOpinion(&quot;There is nothing more than a star.&quot;);\n           medicalRecord.setTreatment(&quot;Just rest at home and you&#39;ll be fine.&quot;);\n   \n           ReservationApplication.applicationContext.getBean(MedicalRecordService.class).diagnosis(medicalRecord);\n   \n   \n           // Reserved event occurs\n           ObjectMapper objectMapper = new ObjectMapper();\n           String json = null;\n   \n           try {\n               json = objectMapper.writeValueAsString(new ReservationReserved(this));\n           } catch (JsonProcessingException e) {\n               throw new RuntimeException(&quot;JSON format exception&quot;, e);\n           }\n   \n           Processor processor = ReservationApplication.applicationContext.getBean(Processor.class);\n           MessageChannel outputChannel = processor.output();\n   \n           outputChannel.send(MessageBuilder\n                   .withPayload(json)\n                   .setHeader(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_JSON)\n                   .build());</code></pre>\n<ul>\n<li>In a synchronous call, time coupling occurs according to the call time, and it is confirmed that a reservation cannot be received if the diagnostic system fails.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># Temporarily put down the diagnosis service (ctrl+c)\n\n# Reservation processing\nhttp post localhost:8081/reservations reservatorName=&quot;Jackson&quot; reservationDate=&quot;2020-04-30&quot; phoneNumber=&quot;010-1234-5678&quot; #Fail\n\n#Restarting medical services\ncd diagnosis\nmvn spring-boot:run\n\n#Reservation processing\nhttp post localhost:8081/reservations reservatorName=&quot;Jackson&quot; reservationDate=&quot;2020-04-30&quot; phoneNumber=&quot;010-1234-5678&quot; #Success</code></pre>\n<h3 id=\"-testing-rest-api-after-cluster-application\"><a href=\"#-testing-rest-api-after-cluster-application\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Testing REST API after cluster application</h3>\n<ul>\n<li><a href=\"http://52.231.118.148:8080/medicalRecords/\" target=\"_blank\" rel=\"noopener noreferrer\">http://52.231.118.148:8080/medicalRecords/</a> //diagnosis inquiry</li>\n<li><a href=\"http://52.231.118.148:8080/reservations/\" target=\"_blank\" rel=\"noopener noreferrer\">http://52.231.118.148:8080/reservations/</a> //reservation inquiry</li>\n<li><a href=\"http://52.231.118.148:8080/reservations\" target=\"_blank\" rel=\"noopener noreferrer\">http://52.231.118.148:8080/reservations</a> reservatorName=\"pdc\" reservationDate=\"202002\" phoneNumber=\"0103701\" //reservation request</li>\n<li>Delete <a href=\"http://52.231.118.148:8080/reservations/1\" target=\"_blank\" rel=\"noopener noreferrer\">http://52.231.118.148:8080/reservations/1</a> //reservation Cancel Sample</li>\n<li><a href=\"http://52.231.118.148:8080/reservationStats/\" target=\"_blank\" rel=\"noopener noreferrer\">http://52.231.118.148:8080/reservationStats/</a> //lookup</li>\n<li><a href=\"http://52.231.118.148:8080/financialManagements/\" target=\"_blank\" rel=\"noopener noreferrer\">http://52.231.118.148:8080/financialManagements/</a> //acceptance lookup</li>\n<li>Also, service failures can occur like dominoes when excessive reservation requests are made. (Circuit breaker and fallback processing will be explained in the operation phase.)</li>\n</ul>\n<h3 id=\"-asynchronous-invocation-and-eventual-consistency\"><a href=\"#-asynchronous-invocation-and-eventual-consistency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Asynchronous Invocation and Eventual Consistency</h3>\n<p>The act of notifying the receiving system after treatment is made is not synchronous, but asynchronous, so that the reservation/treatment system is not blocked for the processing of the receiving system.</p>\n<ul>\n<li>For this purpose, after leaving the medical history, the event that the medical treatment was done is immediately sent to Kafka (Publish).</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">// package Animal.Hospital.MedicalRecord;\n\n    @PrePersist\n    public void onPrePersist(){\n        Treated treated = new Treated();\n        BeanUtils.copyProperties(this, treated);\n        treated.publish();\n    }</code></pre>\n<ul>\n<li>Acceptance service implements PolicyHandler to receive treatment completion event and process its own policy:</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaListener</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">FinancialManagementRepository</span> financialManagementRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">TreatedEvent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">Treated</span> treated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>treated<span class=\"token punctuation\">.</span><span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Treated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A storage request has been made.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">FinancialManagement</span> financialManagement <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinancialManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            financialManagement<span class=\"token punctuation\">.</span><span class=\"token function\">setReservationId</span><span class=\"token punctuation\">(</span>treated<span class=\"token punctuation\">.</span><span class=\"token function\">getReservationId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            financialManagement<span class=\"token punctuation\">.</span><span class=\"token function\">setFee</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            financialManagementRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>financialManagement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Since the notification system cannot actually send text messages, System.out.println is processed for reservation/change/cancellation events.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>notice</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KafkaListener</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onReservationReservedEvent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">ReservationReserved</span> reservationReserved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reservationReserved<span class=\"token punctuation\">.</span><span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ReservationReserved\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"successfully booked.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onReservationChangedEvent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">ReservationChanged</span> reservationChanged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reservationChanged<span class=\"token punctuation\">.</span><span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ReservationChanged\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reservation has been changed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onReservationCanceledEvent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">ReservationCanceled</span> reservationCanceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reservationCanceled<span class=\"token punctuation\">.</span><span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ReservationCanceled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reservation has been cancelled.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The reception/lookup (CQRS) system is completely separated from the reservation/treatment and is processed according to the reception of the event, so there is no problem in making a reservation/treatment even if the reception/lookup system is temporarily down due to maintenance:</p>\n<pre class=\"language-text\"><code class=\"language-text\"># put down acceptance for a while (ctrl+c)\n\n#Reservation processing\nhttp post localhost:8081/reservations reservatorName=&quot;Jackson&quot; reservationDate=&quot;2020-04-30&quot; phoneNumber=&quot;010-1234-5678&quot; #Success\n\n#Check reservation status\nhttp localhost:8081/reservations     # Confirm that reservations have been added\n\n#Start storage service\ncd acceptance\nmvn spring-boot:run\n\n#Check storage status\nhttp localhost:8085/financialManagements     # Confirm that you have been charged for all appointments - treatment. </code></pre>\n<h3 id=\"-api-gateway\"><a href=\"#-api-gateway\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· API Gateway</h3>\n<ul>\n<li>In the local test environment, Gateway API works at localhost:8080.</li>\n<li>In the cloud environment, the Gateway API works at <a href=\"http://52.231.118.148:8080\" target=\"_blank\" rel=\"noopener noreferrer\">http://52.231.118.148:8080</a>.</li>\n<li>Gateway configuration for each profile in application.yml file.</li>\n</ul>\n<h3>Gateway configuration file</h3>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8088</span>\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> default\n  <span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">oauth2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">resourceserver</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">jwt</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">jwk-set-uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8088/.well<span class=\"token punctuation\">-</span>known/jwks.json\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> reservation\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8081</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/reservations/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> diagnosis\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8083</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/medicalRecords/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> lookup\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8084</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/reservationStats/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> acceptance\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8085</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/financialManagements/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> oauth\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8090</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/oauth/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">globalcors</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">corsConfigurations</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">'[/**]'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">allowedOrigins</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowedMethods</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowedHeaders</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowCredentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> docker\n  <span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">oauth2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">resourceserver</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">jwt</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">jwk-set-uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8080/.well<span class=\"token punctuation\">-</span>known/jwks.json\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> reservation\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//reservation<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/reservations/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> diagnosis\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//diagnosis<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/medicalRecords/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> lookup\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//lookup<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/reservationStats/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> acceptance\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//acceptance<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/financialManagements/<span class=\"token important\">**</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> oauth\n          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//oauth<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> Path=/oauth/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">globalcors</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">corsConfigurations</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">'[/**]'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">allowedOrigins</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowedMethods</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowedHeaders</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n            <span class=\"token key atrule\">allowCredentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span></code></pre>\n<h3 id=\"-application-of-oauth-authentication\"><a href=\"#-application-of-oauth-authentication\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Application of Oauth authentication</h3>\n<ul>\n<li>Oauth authentication applied. </li>\n<li>But, just use the Oauth project used during class and attach it to the Gateway.</li>\n</ul>\n<h2 id=\"operation\"><a href=\"#operation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>operation</h2>\n<h3 id=\"-cicd-settings\"><a href=\"#-cicd-settings\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· CI/CD settings</h3>\n<p>Each implementation is built through its own Git and is triggered by Git Master. The pipeline build script is included in azure_pipeline.yml under each project folder.</p>\n<p>See azure_pipelist.yml</p>\n<p>kubernetes service</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">trigger</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> self\n\n<span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> common<span class=\"token punctuation\">-</span>value\n  <span class=\"token comment\"># containerRegistry: 'event.azurecr.io'</span>\n  <span class=\"token comment\"># containerRegistryDockerConnection: 'acr'</span>\n  <span class=\"token comment\"># environment: 'aks.default'</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> imageRepository\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'order'</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dockerfilePath\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'**/Dockerfile'</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tag\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'$(Build.BuildId)'</span>\n  <span class=\"token comment\"># Agent VM image name</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> vmImageName\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ubuntu-latest'</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MAVEN_CACHE_FOLDER\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> $(Pipeline.Workspace)/.m2/repository\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MAVEN_OPTS\n  <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'</span>\n\n\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> Build\n  <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> Build stage\n  <span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job</span><span class=\"token punctuation\">:</span> Build\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> Build\n    <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">vmImage</span><span class=\"token punctuation\">:</span> $(vmImageName)\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> CacheBeta@1\n      <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'maven | \"$(Agent.OS)\" | **/pom.xml'</span>\n        <span class=\"token key atrule\">restoreKeys</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n           maven | \"$(Agent.OS)\"\n           maven</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> $(MAVEN_CACHE_FOLDER)\n      <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> Cache Maven local repo\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> Maven@3\n      <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">mavenPomFile</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pom.xml'</span>\n        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'</span>\n        <span class=\"token key atrule\">javaHomeOption</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'JDKVersion'</span>\n        <span class=\"token key atrule\">jdkVersionOption</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1.8'</span>\n        <span class=\"token key atrule\">jdkArchitectureOption</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'x64'</span>\n        <span class=\"token key atrule\">goals</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'package'</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> Docker@2\n      <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">containerRegistry</span><span class=\"token punctuation\">:</span> $(containerRegistryDockerConnection)\n        <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> $(imageRepository)\n        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'buildAndPush'</span>\n        <span class=\"token key atrule\">Dockerfile</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'**/Dockerfile'</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          $(tag)</span>\n\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> Deploy\n  <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> Deploy stage\n  <span class=\"token key atrule\">dependsOn</span><span class=\"token punctuation\">:</span> Build\n\n  <span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">deployment</span><span class=\"token punctuation\">:</span> Deploy\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> Deploy\n    <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">vmImage</span><span class=\"token punctuation\">:</span> $(vmImageName)\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span> $(environment)\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">runOnce</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> Kubernetes@1\n            <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">connectionType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Kubernetes Service Connection'</span>\n              <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'default'</span>\n              <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'apply'</span>\n              <span class=\"token key atrule\">useConfigurationFile</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n              <span class=\"token key atrule\">configurationType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'inline'</span>\n              <span class=\"token key atrule\">inline</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n                apiVersion: apps/v1\n                kind: Deployment\n                metadata:\n                  name: $(imageRepository)\n                  labels:\n                    app: $(imageRepository)\n                spec:\n                  replicas: 1\n                  selector:\n                    matchLabels:\n                      app: $(imageRepository)\n                  template:\n                    metadata:\n                      labels:\n                        app: $(imageRepository)\n                    spec:\n                      containers:\n                        - name: $(imageRepository)\n                          image: $(containerRegistry)/$(imageRepository):$(tag)\n                          ports:\n                            - containerPort: 8080\n                          readinessProbe:\n                            httpGet:\n                              path: /actuator/health\n                              port: 8080\n                            initialDelaySeconds: 10\n                            timeoutSeconds: 2\n                            periodSeconds: 5\n                            failureThreshold: 10\n                          livenessProbe:\n                            httpGet:\n                              path: /actuator/health\n                              port: 8080\n                            initialDelaySeconds: 120\n                            timeoutSeconds: 2\n                            periodSeconds: 5\n                            failureThreshold: 5</span>\n              <span class=\"token key atrule\">secretType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'dockerRegistry'</span>\n              <span class=\"token key atrule\">containerRegistryType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Azure Container Registry'</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> Kubernetes@1\n            <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">connectionType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Kubernetes Service Connection'</span>\n              <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'default'</span>\n              <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'apply'</span>\n              <span class=\"token key atrule\">useConfigurationFile</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n              <span class=\"token key atrule\">configurationType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'inline'</span>\n              <span class=\"token key atrule\">inline</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n                apiVersion: v1\n                kind: Service\n                metadata:\n                  name: $(imageRepository)\n                  labels:\n                    app: $(imageRepository)\n                spec:\n                  ports:\n                    - port: 8080\n                      targetPort: 8080\n                  selector:\n                    app: $(imageRepository)</span>\n              <span class=\"token key atrule\">secretType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'dockerRegistry'</span>\n              <span class=\"token key atrule\">containerRegistryType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Azure Container Registry'</span></code></pre>\n<h3 id=\"-synchronous-call--circuit-breaking--fault-isolation\"><a href=\"#-synchronous-call--circuit-breaking--fault-isolation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Synchronous Call / Circuit Breaking / Fault Isolation</h3>\n<ul>\n<li>Choice of circuit breaking framework: Implemented using Spring FeignClient + Hystrix option</li>\n</ul>\n<p>The scenario is implemented by linking the connection at reservation system-->diagnosis with RESTful Request/Response, and in case of excessive treatment request, fault isolation through CB.</p>\n<ul>\n<li>Set Hystrix: Set the CB circuit to close (fail and block requests quickly) when the processing time starts to exceed 610 millimeters in the request processing thread and is maintained for a certain amount.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># application.yml\n\nserver:\n  port: 8081\nspring:\n  profiles: default\n  cloud:\n    stream:\n      kafka:\n        binder:\n          brokers: localhost:9092\n      bindings:\n        output:\n          destination: animal\n          contentType: application/json\nfeign:\n  hystrix:\n    enabled: true\n    \n    </code></pre>\n<ul>\n<li>Random load handling of the called service (diagnosis) - it fluctuates from 400 millimeters to 220 millimeters.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># (diagnosis) MedicalRecord.java (Entity)\n\n    @PrePersist\n    public void onPrePersist(){  //After saving the medical history, take the appropriate time delay.\n        ...\n        \n        try {\n            Thread.currentThread().sleep((long) (400 + Math.random() * 220));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }</code></pre>\n<ul>\n<li>Check circuit breaker operation with load tester siege tool:</li>\n<li>100 concurrent users</li>\n<li>run for 60 seconds</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">$ siege -c100 -t60s -r10 --content-type &quot;application/json&quot; &#39;http://localhost:8081/reservations POST {&quot;reservatorName&quot;: &quot;Jackson&quot;, &quot;phoneNumber&quot;: &quot;01032713104&quot;, &quot;reservationDate&quot;: &quot;2020-05-01&quot;}&#39;\n\nWhen running siege on Ubuntu running in Windows, &quot;[error] unable to set close control sock.c:141: Invalid argument&quot; occurs and the intermediate process is unknown. \n\nHowever, check the results as below.\n\nLifting the server siege...\nTransactions:                   1067 hits\nAvailability:                  78.92 %\nElapsed time:                  59.46 secs\nData transferred:               0.37 MB\nResponse time:                  5.36 secs\nTransaction rate:              17.94 trans/sec\nThroughput:                     0.01 MB/sec\nConcurrency:                   96.13\nSuccessful transactions:        1067\nFailed transactions:             285\nLongest transaction:            7.01\nShortest transaction:           0.02</code></pre>\n<ul>\n<li>The operating system does not die and shows that the resource is protected by properly opening and closing the circuit by CB continuously. 78.92% were successful.</li>\n</ul>\n<h3 id=\"-autoscale-out\"><a href=\"#-autoscale-out\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· autoscale out</h3>\n<p>Previously, CB made it possible to operate the system stably, but it did not accept 100% of the user's request. </p>\n<ul>\n<li>Configure HPA to dynamically increase replicas for medical services. The setting increases the number of replicas to 10 when CPU usage exceeds 15%.</li>\n</ul>\n<p>kubectl autoscale deploy diagnosis --min=1 --max=10 --cpu-percent=15</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl autoscale deploy diagnosis --min=1 --max=10 --cpu-percent=15</code></pre>\n<h3 id=\"-uninterrupted-redistribution\"><a href=\"#-uninterrupted-redistribution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>· Uninterrupted redistribution</h3>\n<ul>\n<li>Complete readiness probe and liveness probe setup for all projects.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /actuator/health\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n  <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token key atrule\">failureThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n<span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n     <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /actuator/health\n     <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n  <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">120</span>\n  <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token key atrule\">failureThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></code></pre>\n","sidebar":"started","next":"","prev":"","headings":[{"depth":1,"value":"Veterinary Practice Management System","anchor":"#veterinary-practice-management-system"},{"depth":2,"value":"service scenario","anchor":"#service-scenario"},{"depth":2,"value":"Analysis/Design","anchor":"#analysisdesign"},{"depth":3,"value":"· Hexagonal Architecture Diagram Derivation","anchor":"#-hexagonal-architecture-diagram-derivation"},{"depth":2,"value":"Implementation","anchor":"#implementation"},{"depth":3,"value":"· Application of DDD","anchor":"#-application-of-ddd"},{"depth":3,"value":"· Synchronous Invocation and Fallback Handling","anchor":"#-synchronous-invocation-and-fallback-handling"},{"depth":3,"value":"· Testing REST API after cluster application","anchor":"#-testing-rest-api-after-cluster-application"},{"depth":3,"value":"· Asynchronous Invocation and Eventual Consistency","anchor":"#-asynchronous-invocation-and-eventual-consistency"},{"depth":3,"value":"· API Gateway","anchor":"#-api-gateway"},{"depth":3,"value":"· Application of Oauth authentication","anchor":"#-application-of-oauth-authentication"},{"depth":2,"value":"operation","anchor":"#operation"},{"depth":3,"value":"· CI/CD settings","anchor":"#-cicd-settings"},{"depth":3,"value":"· Synchronous Call / Circuit Breaking / Fault Isolation","anchor":"#-synchronous-call--circuit-breaking--fault-isolation"},{"depth":3,"value":"· autoscale out","anchor":"#-autoscale-out"},{"depth":3,"value":"· Uninterrupted redistribution","anchor":"#-uninterrupted-redistribution"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/tool/event-storming-tool/","title":"EventStorming"}},{"node":{"path":"/tool/si-gpt/","title":"Code Implementation with ChatGPT"}},{"node":{"path":"/tool/infrastructure-modeling/","title":"Infrastructure Modeling (Kubernetes)"}},{"node":{"path":"/tool/on-prem-inst/","title":"Installing on-premise MSA-Easy"}},{"node":{"path":"/tool/development-practice/","title":"Registration Course"}},{"node":{"path":"/tool/model-driven/","title":"Automatic Code Generation"}},{"node":{"path":"/tool/marketplace/","title":"Marketplace"}},{"node":{"path":"/tool/k8s-modeling/","title":"K8s Deployment Modeling"}},{"node":{"path":"/tool/google-drive-examples/","title":"Google Drive Examples"}},{"node":{"path":"/templates-language/go-template/","title":"Go Template "}},{"node":{"path":"/templates-language/python-template/","title":"Python template "}},{"node":{"path":"/tool/cloud-ide-tool/","title":"Cloud IDE"}},{"node":{"path":"/tool/chat-gpt/","title":"Creating Models with ChatGPT"}},{"node":{"path":"/tool/attending-lectures/","title":"Attending lectures"}},{"node":{"path":"/templates-language/springboot-java-template/","title":"Spring Boot/Java Template"}},{"node":{"path":"/started/key-features/","title":"Key Features"}},{"node":{"path":"/started/","title":"Introduction"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-ingress/","title":"Ingress Deployment Model Design"}},{"node":{"path":"/operation/ops-deploy-diagramming-basic-objects/","title":"12st Mall Basic Deploy"}},{"node":{"path":"/started/event-storming-learning/","title":"Event Storming Learning"}},{"node":{"path":"/started/domain-driven/","title":"Domain-Driven Design Learning"}},{"node":{"path":"/example-scenario/food-delivery/","title":"food delivery"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-pvc/","title":"Persistent Volume"}},{"node":{"path":"/example-scenario/online-lecture/","title":"Internet lecture system"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-istio/","title":"Istio Mesh"}},{"node":{"path":"/example-scenario/accommodation-reservation/","title":"AirBnB"}},{"node":{"path":"/operation/ops-deploy-diagramming-advanced-hpa/","title":"Automatic Scaling (HPA) Deployment"}},{"node":{"path":"/example-scenario/library-system/","title":"library system"}},{"node":{"path":"/example-scenario/animal-hospital/","title":"Veterinary Practice Management System"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token-based Authentication and Authorization"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub Integration"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Request/Response Communication in MSA Integration"}},{"node":{"path":"/custom-template/template-editor/","title":""}},{"node":{"path":"/development/choreography-saga/","title":"Choreography Saga"}},{"node":{"path":"/custom-template/template-structure/","title":"Template File Structure"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/cna-start/","title":"Running Unit Microservices"}},{"node":{"path":"/custom-template/template-editor-custom-template/","title":"1. Creating a Repository"}},{"node":{"path":"/custom-template/unit-test/","title":"Test Automation"}},{"node":{"path":"/custom-template/tutorial/","title":"Concept of Custom Template"}},{"node":{"path":"/custom-template/global-helper/","title":""}},{"node":{"path":"/custom-template/mock-server/","title":"Open API 3.0-based Mock Server Generation Topping(New)"}},{"node":{"path":"/custom-template/loop-conditional-statement/","title":""}},{"node":{"path":"/custom-template/helper/","title":""}},{"node":{"path":"/custom-template/designing-template/","title":"Developing Custom Template"}},{"node":{"path":"/custom-template/custom-template/","title":"Custom Template Objects"}},{"node":{"path":"/business/","title":"Eventstorming - Shopping Mall"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/contact/question/","title":"CONTACT"}}]}},"context":{}}